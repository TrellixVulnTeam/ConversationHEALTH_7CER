{"version":3,"sources":["webpack:///webpack/bootstrap ce76b24c6b1d867decb4","webpack:///external \"lodash\"","webpack:///./src/providers/entities.js","webpack:///external \"crypto\"","webpack:///./src/providers/base.js","webpack:///external \"bluebird\"","webpack:///external \"axios\"","webpack:///./src/index.js","webpack:///external \"bluebird-retry\"","webpack:///./src/storage.js","webpack:///external \"mkdirp\"","webpack:///external \"path\"","webpack:///./src/parser.js","webpack:///./src/providers/dialogflow.js","webpack:///external \"dialogflow\"","webpack:///./src/providers/luis.js","webpack:///./src/providers/rasa.js","webpack:///external \"ms\"","webpack:///./src/providers/recast.js","webpack:///./src/providers/native.js","webpack:///external \"zscore\"","webpack:///external \"natural\""],"names":["ENVIRONEMENT","process","env","NODE_ENV","Provider","name","entityKey","logger","config","storage","parser","kvs","isProduction","Error","incomingText","getCustomEntities","_getProviderEntities","toPairs","filter","p","map","isFromProvider","nameProvider","provider","module","exports","intentsDir","type","required","default","entitiesDir","googleProjectId","luisAppId","luisProgrammaticKey","luisAppSecret","luisAppRegion","rasaEndpoint","rasaToken","rasaProject","recastToken","recastUserSlug","recastBotSlug","debugModeEnabled","minimumConfidence","maximumConfidence","nativeAdjustementThreshold","init","bp","configurator","event","includes","info","text","raw","extract","retryPolicy","metadata","Object","assign","nlu","warn","message","intentConfidentEnough","get","MIN_CONFIDENCE","MAX_CONFIDENCE","intentStartsWith","toLowerCase","startsWith","prefix","intentIs","intentName","bestMatchProps","is","merge","intent","intents","has","find","i","processEvent","loadAll","initializeGhost","dialogflow","luis","rasa","recast","native","parseFloat","isNaN","interval","max_interval","timeout","max_tries","middlewares","register","handler","next","order","description","ready","router","getRouter","delete","req","res","deleteIntent","params","sendStatus","post","saveIntent","body","getIntents","send","getIntent","getAvailableEntities","x","checkSyncNeeded","sync","status","formatFilename","replace","Storage","ghost","ghostManager","projectDir","projectLocation","resolve","addRootFolder","filesGlob","content","length","utterancesFile","propertiesFile","utterances","join","upsertFile","JSON","stringify","entities","deleteFile","directoryListing","mapSeries","filename","readFile","propertiesContent","utterancesContent","split","properties","parse","getCustomEntity","entity","definitionContent","definition","Parser","canonicalUtterance","intentEntities","labels","plainText","regex","m","exec","substr","index","push","start","end","entityName","DialogflowProvider","projectId","agentClient","AgentsClient","sessionClient","SessionsClient","shortUserId","createHash","update","digest","field","kind","values","_resolveEntity","v","mapValues","fields","f","getAgent","parent","projectPath","agent","request","session","sessionPath","_getSessionId","queryInput","languageCode","defaultLanguageCode","detectIntent","detection","queryResult","displayName","confidence","intentDetectionConfidence","parameters","k","value","original","position","LUIS_APP_VERSION","LUIS_HASH_KVS_KEY","LuisProvider","appId","programmaticKey","appSecret","appRegion","headers","data","version","debug","del","statusCode","response","localIntents","remoteVersion","intentsHash","hash","time","lastModifiedDateTime","getRemoteVersion","currentVersion","isInSync","set","getCustomLuisEntities","simples","composites","lists","mapToType","list","providerType","simplesDef","e","compositesDef","listsDef","missingPattern","isEmpty","validateCredentials","deleteVersion","builtinEntities","simpleEntities","compositeEntities","listEntities","availableEntities","forEach","extracted","extractLabelsFromCanonical","utterance","label","indexOf","startPos","endPos","getAppInfo","appInfo","luis_schema_version","versionId","desc","culture","closedLists","bing_entities","model_features","regex_features","result","train","onSyncSuccess","detailedError","error","models","percent","details","modelId","failureReason","toFixed","delay","isStaging","region","incomingEvent","q","verbose","spellCheck","staging","score","startIndex","RASA_HASH_KVS_KEY","RasaProvider","endpoint","token","project","client","create","baseURL","_getRemoteVersions","remoteVersions","_isInSync","scope","projectName","_getProjectName","versions","last","sortBy","_modelId","sample","rasa_nlu_data","common_examples","entity_synonyms","_training","msg","_onSyncSuccess","_cacheLatestModel","latestModel","model","extractor","RECAST_HASH_KVS_KEY","RecastProvider","Authorization","intentSlug","expressionId","expression","put","gazetteSlug","entity_id","syncing","_getIntentsHash","_getBotModel","results","defaultLanguage","language","isocode","_getRemoteGazettes","remoteGazettes","_deleteGazette","customEntities","_postGazette","remoteGazette","pick","_getRemoteIntents","remoteIntents","_deleteIntent","u","expressions","source","_postIntent","_getBulkCreations","_getRemoteIntentExpressions","remoteIntentExpressions","expr","_getRemoteExpression","id","remoteIntentExpression","word","tokens","t","slug","gazette","_updateRemoteExpression","savedHash","key","entityType","omit","valueSize","size","keys","act","detected","processed","processing_language","sentiment","NATIVE_HASH_KVS_KEY","NATIVE_MODEL","NativeProvider","classifier","stemmer","customStemmer","isFunction","tokenizeAndStem","_stemText","bind","PorterStemmer","BayesClassifier","restore","getStemmer","samples_count","addDocument","_restoreModel","classifications","orderBy","getClassifications","allScores","c","s","delta","Math","abs","max","bestIntent","first"],"mappings":"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","file":"node.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/home/epaminond/private/projects/2015.08.08_keenethics/projects/botpress/botpress/packages/functionals/botpress-nlu\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ce76b24c6b1d867decb4","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 0\n// module chunks = 0","export default {\n  // Date & Time\n  '@native.date': { '@luis': 'datetimeV2', '@dialogflow': 'date', '@recast': 'datetime' },\n  '@native.date-period': { '@luis': 'datetimeV2', '@dialogflow': 'date-period', '@recast': 'interval' },\n  '@native.date-time': { '@luis': 'datetimeV2', '@dialogflow': 'date-time', '@recast': 'datetime' },\n  '@native.time': { '@luis': 'datetimeV2', '@dialogflow': 'time', '@recast': 'datetime' },\n  '@native.time-period': { '@luis': 'datetimeV2', '@dialogflow': 'time-period', '@recast': 'interval' },\n\n  // Numbers\n  '@native.cardinal': { '@dialogflow': 'cardinal', '@recast': 'cardinal' },\n  '@native.flight-number': { '@dialogflow': 'flight-number' },\n  '@native.number': { '@dialogflow': 'number', '@luis': 'number', '@recast': 'number' },\n  '@native.number-integer': { '@dialogflow': 'number-integer', '@recast': 'ordinal' },\n  '@native.number-sequence': { '@dialogflow': 'number-sequence' },\n  '@native.ordinal': { '@luis': 'ordinal', '@dialogflow': 'ordinal', '@recast': 'ordinal' },\n\n  // Amounts with Units\n  '@native.age': { '@dialogflow': 'age' },\n  '@native.duration': { '@dialogflow': 'duration', '@recast': 'duration' },\n  '@native.percentage': { '@luis': 'percentage', '@dialogflow': 'percentage', '@recast': 'percent' },\n  '@native.set': { '@recast': 'set' },\n  '@native.temperature': { '@luis': 'temperature', '@dialogflow': 'temperature', '@recast': 'temperature' },\n  '@native.unit-area': { '@luis': 'dimension', '@dialogflow': 'unit-area' },\n  '@native.unit-currency': { '@luis': 'money', '@dialogflow': 'unit-currency', '@recast': 'money' },\n  '@native.unit-information': { '@dialogflow': 'unit-information' },\n  '@native.unit-length': { '@luis': 'dimension', '@dialogflow': 'unit-lenght', '@recast': 'distance' },\n  '@native.unit-speed': { '@dialogflow': 'unit-speed', '@recast': 'speed' },\n  '@native.unit-volume': { '@dialogflow': 'unit-volume', '@recast': 'volume' },\n  '@native.unit-weight': { '@dialogflow': 'unit-weight', '@recast': 'mass' },\n\n  // Unit Names\n  '@native.currency-name': { '@dialogflow': 'currency-name' },\n  '@native.unit-area-name': { '@dialogflow': 'unit-area-name' },\n  '@native.unit-information-name': { '@dialogflow': 'unit-information-name' },\n  '@native.unit-length-name': { '@dialogflow': 'unit-lenght-name' },\n  '@native.unit-speed-name': { '@dialogflow': 'unit-speed-name' },\n  '@native.unit-volume-name': { '@dialogflow': 'unit-volume-name' },\n  '@native.unit-weight-name': { '@dialogflow': 'unit-weight-name' },\n\n  // Geography\n  '@native.address': { '@dialogflow': 'address', '@recast': 'location' },\n  '@native.airport': { '@dialogflow': 'airport', '@recast': 'location' },\n  '@native.geo-capital': { '@dialogflow': 'geo-capital' },\n  '@native.geo-country': { '@dialogflow': 'geo-country', '@recast': 'location' },\n  '@native.geo-country-code': { '@dialogflow': 'geo-country-code' },\n  '@native.geo-city': { '@dialogflow': 'geo-city', '@recast': 'location' },\n  '@native.geo-city-gb': { '@dialogflow': 'geo-city-gb', '@recast': 'location' },\n  '@native.geo-city-us': { '@dialogflow': 'geo-city-us', '@recast': 'location' },\n  '@native.geo-state-us': { '@dialogflow': 'geo-state-us', '@recast': 'location' },\n  '@native.ip': { '@recast': 'ip' },\n  '@native.location': { '@dialogflow': 'location', '@recast': 'location' },\n  '@native.place-attraction-us': { '@dialogflow': 'place-attraction-us', '@recast': 'location' },\n  '@native.place-attraction-gb': { '@dialogflow': 'place-attraction-gb', '@recast': 'location' },\n  '@native.street-address': { '@dialogflow': 'street-address', '@recast': 'location' },\n  '@native.zip-code': { '@dialogflow': 'zip-code', '@recast': 'location' },\n\n  // Contacts\n  '@native.email': { '@luis': 'email', '@dialogflow': 'email', '@recast': 'email' },\n  '@native.phone-number': { '@luis': 'phonenumber', '@dialogflow': 'phone-number', '@recast': 'phone' },\n\n  // Person\n  '@native.given-name': { '@dialogflow': 'given-name' },\n  '@native.last-name': { '@dialogflow': 'last-name' },\n  '@native.name': { '@recast': 'person' },\n  '@native.nationality': { '@recast': 'nationality' },\n\n  // Music\n  '@native.music-artist': { '@dialogflow': 'music-artist' },\n  '@native.music-genre': { '@dialogflow': 'music-genre' },\n\n  // Others\n  '@native.color': { '@dialogflow': 'color', '@recast': 'color' },\n  '@native.emoji': { '@recast': 'emoji' },\n  '@native.job': { '@recast': 'job' },\n  '@native.language': { '@dialogflow': 'language', '@recast': 'language' },\n  '@native.organization': { '@recast': 'organization' },\n  '@native.pronoun': { '@recast': 'pronoun' },\n  '@native.sort': { '@recast': 'sort' },\n  '@native.url': { '@luis': 'url', '@dialogflow': 'url', '@recast': 'url' },\n\n  // Generic\n  '@native.any': { '@dialogflow': 'any', '@rasa': 'any' }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/entities.js","module.exports = require(\"crypto\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"crypto\"\n// module id = 2\n// module chunks = 0","const ENVIRONEMENT = process.env.NODE_ENV === 'production' ? 'prod' : 'dev'\n\nimport Entities from './entities'\nimport _ from 'lodash'\n\nexport default class Provider {\n  constructor({ name, entityKey, logger, config, storage, parser, kvs }) {\n    this.name = name\n    this.entityKey = entityKey\n    this.logger = logger\n    this.storage = storage\n    this.kvs = kvs\n    this.config = config\n    this.parser = parser\n    this.isProduction = ENVIRONEMENT === 'prod'\n    this.env = ENVIRONEMENT\n  }\n\n  /*******\n  Public API\n  *******/\n\n  async init() {}\n\n  async sync() {\n    throw new Error('Not implemented')\n  }\n\n  async checkSyncNeeded() {\n    throw new Error('Not implemented')\n  }\n\n  async extract(incomingText) {\n    throw new Error('Not implemented')\n  }\n\n  async getCustomEntities() {\n    throw new Error('Not implemented')\n  }\n\n  /*******\n  Shared API\n  *******/\n\n  async getAvailableEntities() {\n    return [...(await this.getCustomEntities()), ...(await this._getProviderEntities())]\n  }\n\n  /*******\n  Private Methods\n  *******/\n\n  async _getProviderEntities() {\n    return _.toPairs(Entities)\n      .filter(p => p[1][this.entityKey])\n      .map(p => ({\n        name: p[0],\n        isFromProvider: true,\n        nameProvider: p[1][this.entityKey]\n      }))\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/base.js","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"axios\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"axios\"\n// module id = 5\n// module chunks = 0","import _ from 'lodash'\nimport retry from 'bluebird-retry'\n\nimport Storage from './storage'\nimport Parser from './parser'\n\nimport Entities from './providers/entities'\n\nimport DialogflowProvider from './providers/dialogflow'\nimport LuisProvider from './providers/luis'\nimport RasaProvider from './providers/rasa'\nimport RecastProvider from './providers/recast'\nimport NativeProvider from './providers/native'\n\nlet storage\nlet provider\n\nmodule.exports = {\n  config: {\n    intentsDir: { type: 'string', required: true, default: './intents', env: 'NLU_INTENTS_DIR' },\n    entitiesDir: { type: 'string', required: true, default: './entities', env: 'NLU_ENTITIES_DIR' },\n\n    // Provider config\n    provider: { type: 'string', required: true, default: 'native', env: 'NLU_PROVIDER' },\n\n    // DIALOGFLOW-specific config\n    googleProjectId: { type: 'string', required: false, default: '', env: 'NLU_GOOGLE_PROJECT_ID' },\n\n    // LUIS-specific config\n    luisAppId: { type: 'string', required: false, default: '', env: 'NLU_LUIS_APP_ID' },\n    luisProgrammaticKey: { type: 'string', required: false, default: '', env: 'NLU_LUIS_PROGRAMMATIC_KEY' },\n    luisAppSecret: { type: 'string', required: false, default: '', env: 'NLU_LUIS_APP_SECRET' },\n    luisAppRegion: { type: 'string', required: false, default: 'westus', env: 'NLU_LUIS_APP_REGION' },\n\n    // RASA-specific config\n    rasaEndpoint: { type: 'string', required: false, default: 'http://localhost:5000', env: 'NLU_RASA_URL' },\n    rasaToken: { type: 'string', required: false, default: '', env: 'NLU_RASA_TOKEN' },\n    rasaProject: { type: 'string', required: false, default: 'botpress', env: 'NLU_RASA_PROJECT' },\n\n    // RECAST-specific config\n    recastToken: { type: 'string', required: false, default: '', env: 'NLU_RECAST_TOKEN' },\n    recastUserSlug: { type: 'string', required: false, default: '', env: 'NLU_RECAST_USER_SLUG' },\n    recastBotSlug: { type: 'string', required: false, default: '', env: 'NLU_RECAST_BOT_SLUG' },\n\n    // Debug mode will print NLU information to the console for debugging purposes\n    debugModeEnabled: { type: 'bool', required: true, default: false, env: 'NLU_DEBUG_ENABLED' },\n\n    // The minimum confidence required (in %) for an intent to match\n    // Set to '0' to always match\n    minimumConfidence: { type: 'string', required: false, default: '0.3', env: 'NLU_MIN_CONFIDENCE' },\n\n    // The maximum confidence after which it is considered a statistical error\n    // Mostly irrelevant except for NLU=native\n    maximumConfidence: { type: 'string', required: false, default: '1000', env: 'NLU_MAX_CONFIDENCE' },\n\n    // The minimum difference between scores required before we apply a distribution fixes\n    nativeAdjustementThreshold: { type: 'string', required: false, default: '0.25', env: 'NLU_NATIVE_ADJ_THRESHOLD' }\n  },\n\n  init: async function(bp, configurator) {\n    const config = await configurator.loadAll()\n    storage = new Storage({ bp, config })\n    await storage.initializeGhost()\n\n    const Provider = {\n      dialogflow: DialogflowProvider,\n      luis: LuisProvider,\n      rasa: RasaProvider,\n      recast: RecastProvider,\n      native: NativeProvider\n    }[config.provider.toLowerCase()]\n\n    if (!Provider) {\n      throw new Error(`Unknown NLU provider \"${config.provider}\"`)\n    }\n\n    let MIN_CONFIDENCE = parseFloat(config.minimumConfidence)\n\n    if (isNaN(MIN_CONFIDENCE) || MIN_CONFIDENCE < 0 || MIN_CONFIDENCE > 1) {\n      MIN_CONFIDENCE = 0\n    }\n\n    let MAX_CONFIDENCE = parseFloat(config.maximumConfidence)\n\n    if (isNaN(MAX_CONFIDENCE) || MAX_CONFIDENCE < 0) {\n      MAX_CONFIDENCE = 10000\n    }\n\n    provider = new Provider({\n      logger: bp.logger,\n      storage: storage,\n      parser: new Parser(),\n      kvs: bp.kvs,\n      config: config\n    })\n    await provider.init()\n\n    const retryPolicy = {\n      interval: 100,\n      max_interval: 500,\n      timeout: 5000,\n      max_tries: 3\n    }\n\n    async function processEvent(event) {\n      if (['session_reset', 'bp_dialog_timeout'].includes(event.type)) {\n        return\n      }\n\n      try {\n        if (config.debugModeEnabled) {\n          bp.logger.info('[NLU Extraction] ' + event.text, event.raw)\n        }\n\n        const metadata = await retry(() => provider.extract(event), retryPolicy)\n\n        if (metadata) {\n          Object.assign(event, { nlu: metadata })\n        }\n      } catch (err) {\n        bp.logger.warn('[NLU] Error extracting metadata for incoming text: ' + err.message)\n      }\n\n      const intentConfidentEnough = () =>\n        (_.get(event, 'nlu.intent.confidence') || 1) >= MIN_CONFIDENCE &&\n        (_.get(event, 'nlu.intent.confidence') || 1) <= MAX_CONFIDENCE\n\n      const intentStartsWith = prefix => {\n        return (\n          intentConfidentEnough() &&\n          (_.get(event, 'nlu.intent.name') || '').toLowerCase().startsWith(prefix && prefix.toLowerCase())\n        )\n      }\n\n      const intentIs = intentName => {\n        return (\n          intentConfidentEnough() &&\n          (_.get(event, 'nlu.intent.name') || '').toLowerCase() === (intentName && intentName.toLowerCase())\n        )\n      }\n\n      const bestMatchProps = {\n        is: intentIs,\n        startsWith: intentStartsWith,\n        intentConfidentEnough\n      }\n\n      _.merge(event, {\n        nlu: {\n          intent: bestMatchProps,\n          intents: {\n            has: intentName => !!(_.get(event, 'nlu.intents') || []).find(i => i.name === intentName)\n          }\n        }\n      })\n    }\n\n    bp.nlu = {\n      processEvent,\n      provider,\n      storage\n    }\n\n    bp.middlewares.register({\n      name: 'nlu.incoming',\n      module: 'botpress-nlu',\n      type: 'incoming',\n      handler: async (event, next) => {\n        await processEvent(event)\n        next()\n      },\n      order: 10,\n      description:\n        'Process natural language in the form of text. Structured data with an action and parameters for that action is injected in the incoming message event.'\n    })\n  },\n\n  ready: async function(bp) {\n    const router = bp.getRouter('botpress-nlu')\n\n    router.delete('/intents/:intent', async (req, res) => {\n      await storage.deleteIntent(req.params.intent)\n      res.sendStatus(200)\n    })\n\n    router.post('/intents/:intent', async (req, res) => {\n      await storage.saveIntent(req.params.intent, req.body)\n      res.sendStatus(200)\n    })\n\n    router.get('/intents', async (req, res) => {\n      res.send(await storage.getIntents())\n    })\n\n    router.get('/intents/:intent', async (req, res) => {\n      res.send(await storage.getIntent(req.params.intent))\n    })\n\n    router.get('/entities', async (req, res) => {\n      res.send((await provider.getAvailableEntities()).map(x => x.name))\n    })\n\n    router.get('/sync/check', async (req, res) => {\n      res.send(await provider.checkSyncNeeded())\n    })\n\n    router.get('/sync', async (req, res) => {\n      try {\n        await provider.sync()\n        res.sendStatus(200)\n      } catch (e) {\n        res.status(500).send(`${e.name} : ${e.message}`)\n      }\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = require(\"bluebird-retry\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird-retry\"\n// module id = 8\n// module chunks = 0","import mkdirp from 'mkdirp'\nimport path from 'path'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nconst formatFilename = name =>\n  name\n    .toLowerCase()\n    .replace(/[^a-z0-9-_.]/gi, '_')\n    .replace('.entities.json', '')\n    .replace('.json', '')\n    .replace('.utterances.txt', '')\n\nexport default class Storage {\n  constructor({ bp, config, provider }) {\n    this.ghost = bp.ghostManager\n    this.intentsDir = config.intentsDir\n    this.entitiesDir = config.entitiesDir\n    this.projectDir = bp.projectLocation\n    this.provider = provider\n  }\n\n  async initializeGhost() {\n    mkdirp.sync(path.resolve(this.projectDir, this.intentsDir))\n    mkdirp.sync(path.resolve(this.projectDir, this.entitiesDir))\n\n    await this.ghost.addRootFolder(this.intentsDir, { filesGlob: '**/*.*' })\n    await this.ghost.addRootFolder(this.entitiesDir, { filesGlob: '**/*.entity.json' })\n  }\n\n  async saveIntent(intent, content) {\n    intent = formatFilename(intent)\n\n    if (intent.length < 1) {\n      throw new Error('Invalid intent name, expected at least one character')\n    }\n\n    const utterancesFile = `${intent}.utterances.txt`\n    const propertiesFile = `${intent}.json`\n\n    const utterances = content.utterances.join('\\r\\n') // \\n To support windows as well\n\n    await this.ghost.upsertFile(this.intentsDir, utterancesFile, utterances)\n    await this.ghost.upsertFile(\n      this.intentsDir,\n      propertiesFile,\n      JSON.stringify({\n        entities: content.entities\n      })\n    )\n  }\n\n  async deleteIntent(intent) {\n    intent = formatFilename(intent)\n\n    if (intent.length < 1) {\n      throw new Error('Invalid intent name, expected at least one character')\n    }\n\n    const utterancesFile = `${intent}.utterances.txt`\n    const propertiesFile = `${intent}.json`\n\n    await this.ghost.deleteFile(this.intentsDir, utterancesFile)\n    await this.ghost.deleteFile(this.intentsDir, propertiesFile)\n  }\n\n  async getIntents() {\n    const intents = await this.ghost.directoryListing(this.intentsDir, '.json')\n    return Promise.mapSeries(intents, intent => this.getIntent(intent))\n  }\n\n  async getIntent(intent) {\n    intent = formatFilename(intent)\n\n    if (intent.length < 1) {\n      throw new Error('Invalid intent name, expected at least one character')\n    }\n\n    const filename = `${intent}.json`\n\n    const propertiesContent = await this.ghost.readFile(this.intentsDir, filename)\n    const utterancesContent = await this.ghost.readFile(this.intentsDir, filename.replace('.json', '.utterances.txt'))\n\n    const utterances = _.split(utterancesContent, /\\r|\\r\\n|\\n/i).filter(x => x.length)\n    const properties = JSON.parse(propertiesContent)\n\n    return {\n      name: intent,\n      filename: filename,\n      utterances: utterances,\n      ...properties\n    }\n  }\n\n  async getCustomEntities() {\n    const entities = await this.ghost.directoryListing(this.entitiesDir, '.json')\n\n    return Promise.mapSeries(entities, entity => this.getCustomEntity(entity))\n  }\n\n  async getCustomEntity(entity) {\n    entity = formatFilename(entity)\n\n    if (entity.length < 1) {\n      throw new Error('Invalid entity name, expected at least one character')\n    }\n\n    const filename = `${entity}.json`\n\n    const definitionContent = await this.ghost.readFile(this.entitiesDir, filename)\n    const definition = JSON.parse(definitionContent)\n\n    return {\n      name: entity,\n      definition: definition\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/storage.js","module.exports = require(\"mkdirp\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"mkdirp\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 11\n// module chunks = 0","import _ from 'lodash'\n\nexport default class Parser {\n  constructor() {}\n\n  extractLabelsFromCanonical(canonicalUtterance, intentEntities) {\n    const labels = []\n    let plainText = ''\n\n    const regex = /\\[(.+?)]\\((.+?)\\)/g\n    let m\n    let i = 0\n\n    do {\n      m = regex.exec(canonicalUtterance)\n      if (m) {\n        plainText += canonicalUtterance.substr(i, m.index - i)\n        i = m.index + m[0].length\n        plainText += m[1]\n        labels.push({\n          start: plainText.length - m[1].length,\n          end: plainText.length - 1,\n          entityName: m[2],\n          type: _.get(_.find(intentEntities, { name: m[2] }), 'type')\n        })\n      }\n    } while (m)\n\n    plainText += canonicalUtterance.substr(i, canonicalUtterance.length - i)\n\n    return {\n      text: plainText,\n      labels: labels\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser.js","import _ from 'lodash'\nimport crypto from 'crypto'\nimport dialogflow from 'dialogflow'\n\nimport Provider from './base'\n\nexport default class DialogflowProvider extends Provider {\n  constructor(config) {\n    super({ ...config, name: 'dialogflow', entityKey: '@dialogflow' })\n\n    this.projectId = this.config.googleProjectId\n\n    this.agentClient = new dialogflow.AgentsClient()\n    this.sessionClient = new dialogflow.SessionsClient()\n  }\n\n  _getSessionId(event) {\n    let shortUserId = _.get(event, 'user.id') || ''\n    if (shortUserId.length > 36) {\n      shortUserId = crypto\n        .createHash('md5')\n        .update(shortUserId)\n        .digest('hex')\n    }\n    return shortUserId\n  }\n\n  _resolveEntity(field) {\n    const entity = field[field.kind]\n\n    if (field.kind === 'stringValue' || field.kind === 'numberValue') {\n      return entity\n    } else if (field.kind === 'listValue') {\n      return entity.values.map(v => this._resolveEntity(v))\n    } else if (field.kind === 'structValue') {\n      return _.mapValues(entity.fields, f => this._resolveEntity(f))\n    } else {\n      throw new Error('Not supported')\n    }\n  }\n\n  /*******\n  Public API\n  *******/\n\n  async init() {\n    const [agent] = await this.agentClient.getAgent({ parent: this.agentClient.projectPath(this.projectId) })\n    this.agent = agent\n  }\n\n  async sync() {\n    throw new Error('Not implemented')\n  }\n\n  async checkSyncNeeded() {\n    return false // Not implemented yet\n  }\n\n  async extract(event) {\n    const request = {\n      session: this.sessionClient.sessionPath(this.projectId, this._getSessionId(event)),\n      queryInput: {\n        text: {\n          text: event.text,\n          languageCode: this.agent.defaultLanguageCode\n        }\n      }\n    }\n    const detection = await this.sessionClient.detectIntent(request)\n    const { queryResult } = detection[0]\n    const intent = {\n      name: queryResult.intent.displayName,\n      confidence: queryResult.intentDetectionConfidence,\n      provider: 'dialogflow'\n    }\n    const entities = _.map(queryResult.parameters.fields, (v, k) => ({ name: k, value: this._resolveEntity(v) }))\n\n    return {\n      intent,\n      intents: [intent],\n      entities: entities.map(entity => ({\n        name: entity.name, // usually the entity name, but can be modified\n        type: entity.name, // when parameter name modified dialogflow doesn't give the original entity name\n        value: entity.value,\n        original: null,\n        confidence: null,\n        position: null,\n        provider: 'dialogflow'\n      }))\n    }\n  }\n\n  async getCustomEntities() {\n    return [] // Not implemented yet\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/dialogflow.js","module.exports = require(\"dialogflow\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"dialogflow\"\n// module id = 14\n// module chunks = 0","import axios from 'axios'\nimport _ from 'lodash'\nimport crypto from 'crypto'\nimport Promise from 'bluebird'\n\nimport Provider from './base'\nimport Entities from './entities'\n\nconst LUIS_APP_VERSION = '1.0' // Static, we're not using this as everything is source-controlled in your bot\nconst LUIS_HASH_KVS_KEY = 'nlu/luis/updateMetadata'\n\nexport default class LuisProvider extends Provider {\n  constructor(config) {\n    super({ ...config, name: 'luis', entityKey: '@luis' })\n\n    this.appId = this.config.luisAppId\n    this.programmaticKey = this.config.luisProgrammaticKey\n    this.appSecret = this.config.luisAppSecret\n    this.appRegion = this.config.luisAppRegion\n  }\n\n  async init() {}\n\n  async getRemoteVersion() {\n    try {\n      const res = await axios.get(\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this.appId}/versions`,\n        {\n          headers: {\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\n          }\n        }\n      )\n\n      return _.find(res.data, { version: LUIS_APP_VERSION })\n    } catch (err) {\n      this.logger.debug('[NLU::Luis] Could not fetch app versions')\n      return []\n    }\n  }\n\n  async deleteVersion() {\n    try {\n      const del = await axios.delete(\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\n          .appId}/versions/${LUIS_APP_VERSION}/`,\n        {\n          headers: {\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\n          }\n        }\n      )\n\n      if (del.statusCode === 200) {\n        this.logger.debug('[NLU::Luis] Removed old version of the model')\n      }\n    } catch (err) {\n      this.logger.debug('[NLU::Luis] Could not remove old version of the model')\n    }\n  }\n\n  async getAppInfo() {\n    try {\n      const response = await axios.get(\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this.appId}`,\n        {\n          headers: {\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\n          }\n        }\n      )\n      return response.data\n    } catch (err) {\n      throw new Error('[NLU::Luis] Could not find app ' + this.appId)\n    }\n  }\n\n  async isInSync(localIntents, remoteVersion) {\n    const intentsHash = crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n\n    const metadata = await this.kvs.get(LUIS_HASH_KVS_KEY)\n\n    return metadata && metadata.hash === intentsHash && metadata.time === remoteVersion.lastModifiedDateTime\n  }\n\n  async checkSyncNeeded() {\n    const intents = await this.storage.getIntents()\n    const currentVersion = await this.getRemoteVersion()\n    return !await this.isInSync(intents, currentVersion)\n  }\n\n  async onSyncSuccess(localIntents, remoteVersion) {\n    const intentsHash = crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n\n    await this.kvs.set(LUIS_HASH_KVS_KEY, {\n      hash: intentsHash,\n      time: remoteVersion.lastModifiedDateTime\n    })\n  }\n\n  async getCustomEntities() {\n    const { simples, composites, lists } = await this.getCustomLuisEntities()\n\n    const mapToType = (list, type) =>\n      list.map(x => ({\n        name: '@custom.' + x.name,\n        isFromProvider: false,\n        nameProvider: x.name,\n        providerType: type,\n        definition: x\n      }))\n\n    return [\n      ...mapToType(simples, 'entities'),\n      ...mapToType(composites, 'composites'),\n      ...mapToType(lists, 'closedLists')\n    ]\n  }\n\n  async getCustomLuisEntities() {\n    const entities = await this.storage.getCustomEntities()\n\n    const simplesDef = _.find(entities, e => e.name.toLowerCase() === 'luis_entities')\n    const compositesDef = _.find(entities, e => e.name.toLowerCase() === 'luis_composites')\n    const listsDef = _.find(entities, e => e.name.toLowerCase() === 'luis_closedlists')\n\n    const simples = (simplesDef && simplesDef.definition) || []\n    const composites = (compositesDef && compositesDef.definition) || []\n    const lists = (listsDef && listsDef.definition) || []\n\n    return { simples, composites, lists }\n  }\n\n  validateCredentials() {\n    const missingPattern = name =>\n      '[NLU::LUIS] \"' +\n      name +\n      '\" is missing from the configuration, please have a look at botpress-nlu ' +\n      'documentation to learn how to setup the credentials.'\n\n    if (_.isEmpty(this.appId)) {\n      throw new Error(missingPattern('Application Id'))\n    }\n\n    if (_.isEmpty(this.programmaticKey)) {\n      throw new Error(missingPattern('Programmatic Key'))\n    }\n\n    if (_.isEmpty(this.appId)) {\n      throw new Error(missingPattern('Application Secret'))\n    }\n\n    if (_.isEmpty(this.appId)) {\n      throw new Error(missingPattern('Application Region'))\n    }\n  }\n\n  async sync() {\n    this.validateCredentials()\n\n    const intents = await this.storage.getIntents()\n    let currentVersion = await this.getRemoteVersion()\n\n    if (await this.isInSync(intents, currentVersion)) {\n      this.logger.debug('[NLU::Luis] Model is up to date')\n      return\n    } else {\n      this.logger.debug('[NLU::Luis] The model needs to be updated')\n    }\n\n    if (currentVersion) {\n      this.logger.debug('[NLU::Luis] Deleting old version of the model')\n      await this.deleteVersion()\n    }\n\n    const utterances = []\n\n    const builtinEntities = []\n    const simpleEntities = []\n    const compositeEntities = []\n    const listEntities = []\n\n    const availableEntities = await this.getAvailableEntities()\n\n    intents.forEach(intent => {\n      intent.utterances.forEach(utterance => {\n        const extracted = this.parser.extractLabelsFromCanonical(utterance, intent.entities)\n        const entities = []\n\n        extracted.labels.forEach(label => {\n          const entity = _.find(availableEntities, { name: label.type })\n\n          if (!entity) {\n            throw new Error('[NLU::Luis] Unknown entity: ' + label.type)\n          }\n\n          if (entity.isFromProvider && builtinEntities.indexOf(entity.nameProvider) === -1) {\n            builtinEntities.push(entity.nameProvider)\n          } else if (entity.providerType === 'entities' && !_.find(simpleEntities, { name: entity.nameProvider })) {\n            simpleEntities.push(entity.definition)\n          } else if (\n            entity.providerType === 'composites' &&\n            !_.find(compositeEntities, { name: entity.nameProvider })\n          ) {\n            compositeEntities.push(entity.definition)\n          } else if (entity.providerType === 'closedLists' && !_.find(listEntities, { name: entity.nameProvider })) {\n            listEntities.push(entity.definition)\n          }\n\n          entities.push({\n            entity: entity.nameProvider,\n            startPos: label.start,\n            endPos: label.end\n          })\n        })\n\n        utterances.push({\n          text: extracted.text,\n          intent: intent.name,\n          entities: entities\n        })\n      })\n    })\n\n    const appInfo = await this.getAppInfo()\n\n    const body = {\n      luis_schema_version: '2.1.0',\n      versionId: LUIS_APP_VERSION,\n      name: appInfo.name,\n      desc: appInfo.description,\n      culture: appInfo.culture,\n      intents: intents.map(i => ({ name: i.name })),\n      entities: simpleEntities,\n      composites: compositeEntities,\n      closedLists: listEntities,\n      bing_entities: builtinEntities,\n      model_features: [],\n      regex_features: [],\n      utterances: utterances\n    }\n\n    try {\n      const result = await axios.post(\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\n          .appId}/versions/import?versionId=${LUIS_APP_VERSION}`,\n        body,\n        {\n          headers: {\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\n          }\n        }\n      )\n\n      await this.train()\n\n      currentVersion = await this.getRemoteVersion()\n      await this.onSyncSuccess(intents, currentVersion)\n\n      this.logger.info('[NLU::Luis] Synced model [' + result.data + ']')\n    } catch (err) {\n      const detailedError = _.get(err, 'response.data.error.message') || (err && err.message) || err\n      this.logger.error('[NLU::Luis] Could not sync the model. Error = ' + detailedError)\n    }\n  }\n\n  async train() {\n    let res = await axios.post(\n      `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\n        .appId}/versions/${LUIS_APP_VERSION}/train`,\n      {},\n      {\n        headers: {\n          'Ocp-Apim-Subscription-Key': this.programmaticKey\n        }\n      }\n    )\n\n    if (res.data.status !== 'Queued') {\n      throw new Error('Expected training to be Queued but was: ' + res.data.status)\n    }\n\n    while (true) {\n      res = await axios.get(\n        `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this\n          .appId}/versions/${LUIS_APP_VERSION}/train`,\n        {\n          headers: {\n            'Ocp-Apim-Subscription-Key': this.programmaticKey\n          }\n        }\n      )\n\n      const models = res.data\n\n      const percent = (models.length - _.filter(models, m => m.details.status === 'InProgress').length) / models.length\n\n      const error = _.find(models, m => m.details.status === 'Fail')\n\n      if (error) {\n        throw new Error(\n          `[NLU::Luis] Error training model \"${error.modelId}\", reason is \"${error.details.failureReason}\"`\n        )\n      }\n\n      if (percent >= 1) {\n        this.logger.debug('[NLU::Luis] Model trained (100%)')\n        break\n      } else {\n        this.logger.debug('[NLU::Luis] Training... ' + percent.toFixed(2) * 100 + '%')\n      }\n\n      await Promise.delay(1000)\n    }\n\n    await Promise.delay(1000)\n\n    await axios.post(\n      `https://${this.appRegion}.api.cognitive.microsoft.com/luis/api/v2.0/apps/${this.appId}/publish`,\n      {\n        versionId: LUIS_APP_VERSION,\n        isStaging: !this.isProduction,\n        region: this.appRegion\n      },\n      {\n        headers: {\n          'Ocp-Apim-Subscription-Key': this.programmaticKey\n        }\n      }\n    )\n  }\n\n  async extract(incomingEvent) {\n    try {\n      this.validateCredentials()\n    } catch (err) {\n      this.logger.warn(\n        '[NLU::Luis] Did not extract NLU metadata for incoming text because Luis is not configured properly.'\n      )\n      return {}\n    }\n\n    const res = await axios.get(`https://${this.appRegion}.api.cognitive.microsoft.com/luis/v2.0/apps/${this.appId}`, {\n      params: {\n        q: incomingEvent.text,\n        verbose: false,\n        spellCheck: false,\n        staging: !this.isProduction\n      },\n      headers: {\n        'Ocp-Apim-Subscription-Key': this.appSecret\n      }\n    })\n\n    const intentName = _.get(res, 'data.topScoringIntent.intent') || 'None'\n    const confidence = _.get(res, 'data.topScoringIntent.score') || 0\n    const intents = _.get(res, 'data.intents') || []\n    const entities = _.get(res, 'data.entities') || []\n\n    return {\n      intent: {\n        name: intentName,\n        confidence: parseFloat(confidence),\n        provider: 'luis'\n      },\n      intents: intents.map(intent => ({\n        name: intent.intent,\n        confidence: parseFloat(intent.score),\n        provider: 'luis'\n      })),\n      entities: entities.map(entity => ({\n        name: null,\n        type: entity.type,\n        value: _.get(entity, 'resolution.values.0.value') || _.get(entity, 'resolution.value') || entity.entity,\n        original: entity.entity,\n        confidence: null,\n        position: entity.startIndex,\n        provider: 'luis'\n      }))\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/luis.js","import axios from 'axios'\nimport _ from 'lodash'\nimport crypto from 'crypto'\nimport Promise from 'bluebird'\nimport ms from 'ms'\n\nimport Provider from './base'\nimport Entities from './entities'\n\nconst RASA_HASH_KVS_KEY = 'nlu/rasa/updateMetadata'\n\nexport default class RasaProvider extends Provider {\n  constructor(config) {\n    super({ ...config, name: 'rasa', entityKey: '@rasa' })\n\n    this.endpoint = this.config.rasaEndpoint\n    this.token = this.config.rasaToken\n    this.project = this.config.rasaProject\n\n    this.client = axios.create({\n      baseURL: this.endpoint,\n      params: this.token && this.token.length ? { token: this.token } : {}\n    })\n  }\n\n  async init() {}\n\n  async checkSyncNeeded() {\n    const intents = await this.storage.getIntents()\n    const remoteVersions = await this._getRemoteVersions()\n    return !await this._isInSync(intents, remoteVersions)\n  }\n\n  _getProjectName() {\n    const scope = 'all'\n    return `${this.env}__${this.project}__${scope}`\n  }\n\n  async _getRemoteVersions() {\n    try {\n      const projectName = this._getProjectName()\n      const res = await this.client.get('/status')\n      const versions = _.get(res, 'data.available_projects.' + projectName + '.available_models') || []\n      return versions\n    } catch (err) {\n      this.logger.debug('[NLU::Rasa] Could not fetch model versions')\n      return []\n    }\n  }\n\n  async _isInSync(localIntents, remoteVersions) {\n    const intentsHash = crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n\n    const metadata = await this.kvs.get(RASA_HASH_KVS_KEY)\n\n    return metadata && metadata.hash === intentsHash && _.includes(remoteVersions, metadata.modelId)\n  }\n\n  async _onSyncSuccess(localIntents) {\n    const intentsHash = crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n\n    const versions = await this._getRemoteVersions()\n\n    const version = _.last(_.sortBy(versions))\n\n    if (!version) {\n      throw new Error('[NLU::Rasa] Could not sync model, could not list project models after training')\n    }\n\n    await this.kvs.set(RASA_HASH_KVS_KEY, {\n      hash: intentsHash,\n      modelId: version\n    })\n  }\n\n  async _cacheLatestModel() {\n    const metadata = await this.kvs.get(RASA_HASH_KVS_KEY)\n    this._modelId = metadata.modelId\n    return metadata.modelId\n  }\n\n  async getCustomEntities() {\n    // RASA doesn't support custom entity types (version 0.10 as of writing)\n    return []\n  }\n\n  async sync() {\n    const intents = await this.storage.getIntents()\n    const remoteVersions = await this._getRemoteVersions()\n\n    if (await this._isInSync(intents, remoteVersions)) {\n      this.logger.debug('[NLU::Rasa] Model is up to date')\n      return\n    } else {\n      this.logger.debug('[NLU::Rasa] The model needs to be updated')\n    }\n\n    const sample = {\n      rasa_nlu_data: {\n        common_examples: [],\n        regex_features: [],\n        entity_synonyms: []\n      }\n    }\n\n    const common_examples = []\n\n    intents.forEach(intent => {\n      intent.utterances.forEach(utterance => {\n        const extracted = this.parser.extractLabelsFromCanonical(utterance, intent.entities)\n        const entities = []\n\n        extracted.labels.forEach(label => {\n          entities.push({\n            entity: label.entityName,\n            value: extracted.text.substr(label.start, label.end - label.start + 1),\n            start: label.start,\n            end: label.end + 1\n          })\n        })\n\n        common_examples.push({\n          text: extracted.text,\n          intent: intent.name,\n          entities: entities\n        })\n      })\n    })\n\n    if (this._training) {\n      return this.logger.warn('[NLU::Rasa] Training is already in progress, aborting this request')\n    } else {\n      this._training = true\n      this.logger.debug(`[NLU::Rasa] Started training model from ${common_examples.length} samples`)\n    }\n\n    try {\n      await this.client.post(\n        '/train',\n        {\n          rasa_nlu_data: {\n            common_examples: common_examples,\n            regex_features: [], // TODO Implement that\n            entity_synonyms: []\n          }\n        },\n        {\n          timeout: ms('30m'),\n          params: {\n            project: this._getProjectName()\n          }\n        }\n      )\n    } catch (err) {\n      this._training = false\n\n      const msg = `\"${_.get(err, 'response.data')}\" Status: ${err.status} | Message: ${err.message}`\n\n      if (err.status == 403) {\n        return this.logger.warn('[NLU::Rasa] A model is already training, aborting sync: ' + msg)\n      }\n\n      if (err.status == 404) {\n        return this.logger.warn('[NLU::Rasa] Invalid project error: ' + msg)\n      }\n\n      if (err.status == 500) {\n        return this.logger.warn('[NLU::Rasa] Training error: ' + msg)\n      }\n\n      return this.logger.error('[NLU::Rasa] Error syncing model: ' + msg)\n    }\n\n    this._training = false\n\n    await this._onSyncSuccess(intents)\n\n    const latestModel = await this._cacheLatestModel()\n\n    this.logger.info(`[NLU::Rasa] Synced model [Model=${latestModel}]`)\n  }\n\n  async extract(incomingEvent) {\n    let modelId = this._modelId\n\n    if (!modelId) {\n      modelId = await this._cacheLatestModel()\n    }\n\n    if (!modelId) {\n      const versions = await this._getRemoteVersions()\n\n      if (!versions.length) {\n        this.sync() // Async\n        return this.logger.error(\n          '[NLU:Rasa] Your model needs to be trained at least once in this environment before extraction can be done'\n        )\n      }\n\n      return this.logger.warn(\n        '[NLU:Rasa] Model not specified, using latest one. Retrain in this environment to fix this warning.'\n      )\n\n      this._modelId = modelId = _.last(_.sortBy(versions))\n    }\n\n    const res = await this.client.post('/parse', {\n      q: incomingEvent.text,\n      project: this._getProjectName(),\n      model: modelId\n    })\n\n    const intentName = _.get(res, 'data.intent.name') || 'None'\n    const confidence = _.get(res, 'data.intent.confidence') || 0\n    const intents = _.get(res, 'data.intent_ranking') || []\n    const entities = _.get(res, 'data.entities') || []\n\n    return {\n      intent: {\n        name: intentName,\n        confidence: parseFloat(confidence),\n        provider: 'rasa'\n      },\n      intents: intents.map(intent => ({\n        name: intent.name,\n        confidence: parseFloat(intent.confidence),\n        provider: 'rasa'\n      })),\n      entities: entities.map(entity => ({\n        name: null,\n        type: entity.entity,\n        value: entity.value,\n        original: entity.text,\n        confidence: null,\n        position: entity.start,\n        provider: entity.extractor\n      }))\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/rasa.js","module.exports = require(\"ms\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ms\"\n// module id = 17\n// module chunks = 0","import _ from 'lodash'\nimport axios from 'axios'\nimport crypto from 'crypto'\nimport Promise from 'bluebird'\n\nimport Provider from './base'\n\nconst RECAST_HASH_KVS_KEY = 'nlu/recast/updateMetadata'\n\nexport default class RecastProvider extends Provider {\n  constructor(config) {\n    super({ ...config, name: 'recast', entityKey: '@recast' })\n\n    this.endpoint = `/users/${this.config.recastUserSlug}/bots/${this.config.recastBotSlug}`\n\n    this.client = axios.create({\n      baseURL: 'https://api.recast.ai/v2',\n      headers: { Authorization: `Token ${this.config.recastToken}` }\n    })\n  }\n\n  _getBotModel() {\n    return this.client.get(`${this.endpoint}`)\n  }\n\n  _getBulkCreations() {\n    return this.client.get(`${this.endpoint}/bulk_creations`)\n  }\n\n  _getRemoteIntents() {\n    return this.client.get(`${this.endpoint}/intents`)\n  }\n\n  _deleteIntent(intentSlug) {\n    return this.client.delete(`${this.endpoint}/intents/${intentSlug}`)\n  }\n\n  _postIntent(intent) {\n    return this.client.post(`${this.endpoint}/intents`, intent)\n  }\n\n  _getRemoteIntentExpressions(intentSlug) {\n    return this.client.get(`${this.endpoint}/intents/${intentSlug}/expressions`)\n  }\n\n  _getRemoteExpression(intentSlug, expressionId) {\n    return this.client.get(`${this.endpoint}/intents/${intentSlug}/expressions/${expressionId}`)\n  }\n\n  _updateRemoteExpression(intentSlug, expressionId, expression) {\n    return this.client.put(`${this.endpoint}/intents/${intentSlug}/expressions/${expressionId}`, expression)\n  }\n\n  _getRemoteGazettes() {\n    return this.client.get(`${this.endpoint}/gazettes`)\n  }\n\n  _deleteGazette(gazetteSlug) {\n    return this.client.delete(`${this.endpoint}/gazettes/${gazetteSlug}`)\n  }\n\n  async _postGazette(entity) {\n    try {\n      await this.client.post(`/entities`, { name: entity.entity_id })\n    } catch (err) {\n      // Entities names on recast are shared, so it's not really an error\n      if (err.response.data.message !== 'Entity has already been taken') {\n        this.syncing = false\n        throw new Error(err.response.data.message)\n      }\n    }\n\n    return this.client.post(`${this.endpoint}/gazettes`, entity)\n  }\n\n  async _getIntentsHash() {\n    const localIntents = await this.storage.getIntents()\n\n    return crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n  }\n\n  async _onSyncSuccess() {\n    const intentsHash = await this._getIntentsHash()\n\n    await this.kvs.set(RECAST_HASH_KVS_KEY, intentsHash)\n    this.syncing = false\n  }\n\n  /*******\n  Public API\n  *******/\n\n  async init() {\n    const { data: { results } } = await this._getBotModel()\n    this.defaultLanguage = results.language.isocode\n  }\n\n  async sync() {\n    if (this.syncing) {\n      this.logger.warn('[NLU::Recast] Model is already syncing !')\n      return\n    }\n\n    this.syncing = true\n    this.logger.debug('[NLU::Recast] Syncing Model...')\n\n    try {\n      // Delete all gazettes\n      let { data: { results: remoteGazettes } } = await this._getRemoteGazettes()\n\n      for (const e of _.map(remoteGazettes, 'slug')) {\n        await this._deleteGazette(e)\n      }\n\n      // Create entities and gazettes\n      const customEntities = await this.getCustomEntities()\n      remoteGazettes = []\n\n      for (const e of customEntities) {\n        const { data: { results: remoteGazette } } = await this._postGazette(e.definition)\n        remoteGazettes.push(_.pick(remoteGazette, ['slug', 'entity.id']))\n      }\n\n      // Delete then create intents and update expressions with entities\n      const localIntents = await this.storage.getIntents()\n      const { data: { results: remoteIntents } } = await this._getRemoteIntents()\n\n      // Delete all intents\n      for (const i of _.map(remoteIntents, 'slug')) {\n        await this._deleteIntent(i)\n      }\n\n      for (const intent of localIntents) {\n        if (intent.utterances.length === 0) {\n          this.logger.warn(`[NLU::Recast] Intent ${intent.name} has been skipped because it has no utterances`)\n          continue\n        }\n\n        // Post the intent\n        const utterances = _.map(intent.utterances, u => this.parser.extractLabelsFromCanonical(u, intent.entities))\n        const expressions = _.map(utterances, u => ({\n          source: u.text,\n          language: { isocode: this.defaultLanguage }\n        }))\n        await this._postIntent({ name: intent.name, expressions })\n\n        // Wait for the expressions of the intents to be created\n        while (true) {\n          const { data: { results } } = await this._getBulkCreations()\n\n          if (results.length === 0) {\n            break\n          }\n\n          await Promise.delay(1000)\n        }\n\n        // Update expressions with entities\n        const { data: { results: remoteIntentExpressions } } = await this._getRemoteIntentExpressions(intent.name)\n\n        for (const expr of remoteIntentExpressions) {\n          const utterance = utterances.find(u => u.text === expr.source)\n\n          if (utterance && utterance.labels.length) {\n            const { data: { results: remoteIntentExpression } } = await this._getRemoteExpression(intent.name, expr.id)\n\n            for (const label of utterance.labels) {\n              const word = utterance.text.substr(label.start, label.end - label.start + 1)\n              const token = remoteIntentExpression.tokens.find(t => t.word.name === word)\n\n              if (token && (!token.entity || token.entity.slug !== label.type)) {\n                const gazette = remoteGazettes.find(e => e.slug === label.type)\n                token.entity = { id: gazette.entity.id }\n                const expression = { source: expr.source, tokens: [token] }\n                await this._updateRemoteExpression(intent.name, expr.id, expression)\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      this.syncing = false\n      throw new Error(err.response.data.message)\n    }\n\n    await this._onSyncSuccess()\n\n    this.logger.info('[NLU::Recast] Synced Model')\n  }\n\n  async checkSyncNeeded() {\n    const intentsHash = await this._getIntentsHash()\n    const savedHash = await this.kvs.get(RECAST_HASH_KVS_KEY)\n\n    return savedHash !== intentsHash\n  }\n\n  async extract(incomingEvent) {\n    const { data: { results } } = await this.client.post('/request', {\n      text: incomingEvent.text\n    })\n\n    const intentName = _.get(results.intents[0], 'slug') || 'None'\n    const confidence = _.get(results.intents[0], 'confidence') || 0\n    const entities = []\n    _.forEach(results.entities, (value, key) => {\n      value.forEach(e => entities.push({ ...e, entityType: key }))\n    })\n\n    return {\n      intent: {\n        name: intentName,\n        confidence: confidence,\n        provider: 'recast'\n      },\n      intents: results.intents.map(intent => ({\n        name: intent.slug,\n        confidence: intent.confidence,\n        provider: 'recast'\n      })),\n      entities: entities.map(entity => {\n        let value = _.omit(entity, ['confidence', 'entityType', 'raw'])\n        const valueSize = _.size(value)\n        if (valueSize === 1) {\n          value = value[Object.keys(value)[0]]\n        } else if (valueSize === 0) {\n          value = entity.raw\n        }\n\n        return {\n          name: null,\n          type: entity.entityType,\n          value,\n          original: entity.raw,\n          confidence: entity.confidence,\n          position: null,\n          provider: 'recast'\n        }\n      }),\n      act: results.act, // Recast custom\n      type: results.type, // Recast custom\n      language: {\n        detected: results.language,\n        processed: results.processing_language\n      },\n      sentiment: results.sentiment // Recast custom\n    }\n  }\n\n  async getCustomEntities() {\n    return this.storage.getCustomEntities()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/recast.js","import _ from 'lodash'\nimport crypto from 'crypto'\n\nimport zscore from 'zscore'\nimport natural from 'natural'\n\nimport Provider from './base'\nimport Entities from './entities'\n\nconst NATIVE_HASH_KVS_KEY = 'nlu/native/updateMetadata'\nconst NATIVE_MODEL = 'nlu/native/model'\n\nexport default class NativeProvider extends Provider {\n  constructor(config) {\n    super({ ...config, name: 'native', entityKey: '@native' })\n    this.classifier = null\n  }\n\n  async init() {}\n\n  async checkSyncNeeded() {\n    const intents = await this.storage.getIntents()\n    return !await this._isInSync(intents)\n  }\n\n  _getProjectName() {\n    const scope = 'all'\n    return `${this.env}__${this.project}__${scope}`\n  }\n\n  setStemmer(stemmer) {\n    if (!stemmer) {\n      this.customStemmer = null\n    } else if (!_.isFunction(stemmer)) {\n      this.logger.error('[NLU::Native] Stemmer must be a function')\n      this.customStemmer = null\n    } else {\n      this.customStemmer = stemmer\n    }\n  }\n\n  getStemmer() {\n    return { tokenizeAndStem: this._stemText.bind(this) }\n  }\n\n  _stemText(text) {\n    if (this.customStemmer) {\n      return this.customStemmer(text)\n    } else {\n      return natural.PorterStemmer.tokenizeAndStem(text)\n    }\n  }\n\n  async _isInSync(localIntents) {\n    const intentsHash = crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n\n    const metadata = await this.kvs.get(NATIVE_HASH_KVS_KEY)\n    return metadata && metadata.hash === intentsHash\n  }\n\n  async _onSyncSuccess(localIntents) {\n    const intentsHash = crypto\n      .createHash('md5')\n      .update(JSON.stringify(localIntents))\n      .digest('hex')\n\n    // We save the model hash and model to the KVS\n    await this.kvs.set(NATIVE_HASH_KVS_KEY, { hash: intentsHash })\n    await this.kvs.set(NATIVE_MODEL, JSON.stringify(this.classifier))\n  }\n\n  async _restoreModel() {\n    const model = await this.kvs.get(NATIVE_MODEL)\n\n    if (!model) {\n      this.classifier = new natural.BayesClassifier()\n    }\n\n    this.classifier = natural.BayesClassifier.restore(JSON.parse(model), this.getStemmer())\n  }\n\n  async getCustomEntities() {\n    // Native NLU doesn't support entity extraction\n    return []\n  }\n\n  async sync() {\n    const intents = await this.storage.getIntents()\n\n    if (await this._isInSync(intents)) {\n      this.logger.debug('[NLU::Native] Model is up to date')\n      return\n    } else {\n      this.logger.debug('[NLU::Native] The model needs to be updated')\n    }\n\n    const classifier = new natural.BayesClassifier(this.getStemmer())\n\n    let samples_count = 0\n\n    intents.forEach(intent => {\n      intent.utterances.forEach(utterance => {\n        const extracted = this.parser.extractLabelsFromCanonical(utterance, intent.entities)\n        samples_count += 1\n        classifier.addDocument(this._stemText(extracted.text), intent.name)\n      })\n    })\n\n    this.logger.debug(`[NLU::Native] Started training model from ${samples_count} samples`)\n\n    try {\n      classifier.train()\n    } catch (err) {\n      return this.logger.error(`[NLU::Native] Error training model: ${err.message}`)\n    }\n\n    this.classifier = classifier\n\n    await this._onSyncSuccess(intents)\n\n    this.logger.info(`[NLU::Native] Synced model`)\n  }\n\n  async extract(incomingEvent) {\n    if (!this.classifier) {\n      if (await this.checkSyncNeeded()) {\n        await this.sync()\n      } else {\n        await this._restoreModel()\n      }\n    }\n\n    const classifications = _.orderBy(this.classifier.getClassifications(incomingEvent.text), ['value'], ['desc'])\n\n    let allScores = zscore(_.map(classifications, c => parseFloat(c.value)))\n\n    allScores = allScores.map((s, i) => {\n      const delta = Math.abs(s - _.get(allScores, i + 1) / s)\n      if (delta >= parseFloat(this.nativeAdjustementThreshold || '0.25')) {\n        return s\n      }\n\n      return (\n        s -\n        Math.max(0, _.get(allScores, i + 1) || 0) * 0.5 -\n        Math.max(0, _.get(allScores, i + 2) || 0) * 0.75 -\n        Math.max(0, _.get(allScores, i + 3) || 0)\n      )\n    })\n\n    const intents = _.orderBy(\n      _.map(classifications, (c, i) => {\n        return {\n          intent: c.label,\n          score: allScores[i]\n        }\n      }),\n      ['score'],\n      'desc'\n    )\n\n    const bestIntent = _.first(intents)\n    const intentName = _.get(bestIntent, 'intent') || 'None'\n    const confidence = _.get(bestIntent, 'score') || 0\n\n    return {\n      intent: {\n        name: intentName,\n        confidence: parseFloat(confidence),\n        provider: 'native'\n      },\n      intents: intents.map(intent => ({\n        name: intent.intent,\n        confidence: parseFloat(intent.score),\n        provider: 'native'\n      })),\n      entities: [] // Unsupported for now\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/native.js","module.exports = require(\"zscore\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"zscore\"\n// module id = 20\n// module chunks = 0","module.exports = require(\"natural\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"natural\"\n// module id = 21\n// module chunks = 0"],"sourceRoot":""}