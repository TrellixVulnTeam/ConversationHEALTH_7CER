{"version":3,"sources":["../src/setup.js"],"names":["bp","dialogEngine","onBeforeCreated","ctx","next","stateId","includes","convoCount","users","getTag","USER_TAG_CONVO_COUNT","tag","parseInt","onBeforeEnd","position","getCurrentPosition","USER_TAG_CONVO_LAST","flow","conversationKey","registerActionMetadataProvider","name","actions_metadata","err"],"mappings":";;;;;;kBAae,UAASA,EAAT,EAAa;AAC1B;AACA;AACA;AACAA,KAAGC,YAAH,CAAgBC,eAAhB;AAAA,iCAAgC,WAAOC,GAAP,EAAYC,IAAZ,EAAqB;AACnD,YAAM,EAAEC,OAAF,KAAcF,GAApB;;AAEA,UAAI,CAACE,QAAQC,QAAR,CAAiB,GAAjB,CAAL,EAA4B;AAC1B;AACA,eAAOF,MAAP;AACD;;AAED,YAAMG,aAAa,MAAMP,GAAGQ,KAAH,CAASC,MAAT,CAAgBJ,OAAhB,EAAyBK,4BAAzB,CAAzB;AACA,YAAMV,GAAGQ,KAAH,CAASG,GAAT,CAAaN,OAAb,EAAsBK,4BAAtB,EAA4CE,SAASL,cAAc,CAAvB,IAA4B,CAAxE,CAAN;;AAEAH;AACD,KAZD;;AAAA;AAAA;AAAA;AAAA;;AAcA;AACA;AACA;AACA;AACAJ,KAAGC,YAAH,CAAgBY,WAAhB;AAAA,kCAA4B,WAAOV,GAAP,EAAYC,IAAZ,EAAqB;AAC/C,YAAM,EAAEC,OAAF,KAAcF,GAApB;;AAEA,UAAI,CAACE,QAAQC,QAAR,CAAiB,GAAjB,CAAL,EAA4B;AAC1B;AACA,eAAOF,MAAP;AACD;;AAED,YAAMU,WAAW,MAAMd,GAAGC,YAAH,CAAgBc,kBAAhB,CAAmCV,OAAnC,CAAvB;AACA,YAAML,GAAGQ,KAAH,CAASG,GAAT,CAAaN,OAAb,EAAsBW,2BAAtB,EAA2CF,YAAYA,SAASG,IAAhE,CAAN;;AAEA;AACA;AACA;AACA,YAAMC,kBAAkB,uCAA0Bb,OAA1B,EAAmC,EAAnC,CAAxB,CAd+C,CAcgB;AAC/D,YAAM,2CAA8BL,EAA9B,EAAkCkB,eAAlC,CAAN;;AAEAd;AACD,KAlBD;;AAAA;AAAA;AAAA;AAAA;;AAoBA;AACAJ,KAAGC,YAAH,CAAgBkB,8BAAhB,CAA+CC,QAAQ;AACrD,QAAIC,mBAAiBD,IAAjB,CAAJ,EAA4B;AAC1B,UAAI;AACF,eAAOC,mBAAiBD,IAAjB,CAAP;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY,CAAE;AACjB;AACD,WAAO,IAAP;AACD,GAPD;AAQD,C;;AAhED;;AACA;;AAEA;;;;;;;;AAEA","file":"setup.js","sourcesContent":["import { getConversationStorageKey, USER_TAG_CONVO_COUNT, USER_TAG_CONVO_LAST } from './common'\nimport { removeStorageKeysStartingWith } from './actions/storage/driver'\n\nimport actions_metadata from './actions/metadata'\n\n/**\n * This method should be called on bot boot in order\n * for the different actions and renderers to work properly.\n *\n * This method will setup and inject different middleware.\n *\n * @param  {Botpress} bp The global Botpress instance\n */\nexport default function(bp) {\n  // Tracks new user conversations\n  // Used by the following actions:\n  // - Get total number of conversations\n  bp.dialogEngine.onBeforeCreated(async (ctx, next) => {\n    const { stateId } = ctx\n\n    if (!stateId.includes(':')) {\n      // Unknown platform / can't extract userId\n      return next()\n    }\n\n    const convoCount = await bp.users.getTag(stateId, USER_TAG_CONVO_COUNT)\n    await bp.users.tag(stateId, USER_TAG_CONVO_COUNT, parseInt(convoCount || 0) + 1)\n\n    next()\n  })\n\n  // Tracks conversation endings and cleans up\n  // Used by the following actions:\n  // - Get time since last conversation\n  // - Conversation data\n  bp.dialogEngine.onBeforeEnd(async (ctx, next) => {\n    const { stateId } = ctx\n\n    if (!stateId.includes(':')) {\n      // Unknown platform / can't extract userId\n      return next()\n    }\n\n    const position = await bp.dialogEngine.getCurrentPosition(stateId)\n    await bp.users.tag(stateId, USER_TAG_CONVO_LAST, position && position.flow)\n\n    //\n    // Cleans up Conversation Storage variables\n    //\n    const conversationKey = getConversationStorageKey(stateId, '') // Empty to delete all variables\n    await removeStorageKeysStartingWith(bp, conversationKey)\n\n    next()\n  })\n\n  // For built-in actions\n  bp.dialogEngine.registerActionMetadataProvider(name => {\n    if (actions_metadata[name]) {\n      try {\n        return actions_metadata[name]\n      } catch (err) {}\n    }\n    return null\n  })\n}\n"]}