{"version":3,"sources":["../src/index.js"],"names":["RESOURCES","enrichResources","ressourceMatches","pattern","res","separator","indexOf","parts","split","testParts","matches","ii","length","toLowerCase","OPERATION_ALIASES","read","write","KNOWN_OPERATIONS","checkRule","rules","operation","ressource","includes","Error","permission","rule","op","checkMultipleRoles","roles","roleName"],"mappings":";;;;;;;;;;;sBAASA,S;;;;;;sBAAWC,e;;;AAEb,IAAMC,8CAAmB,SAAnBA,gBAAmB,CAACC,OAAD,EAAUC,GAAV,EAAkB;AAChD,MAAMC,YAAY,QAAlB;AACAF,YAAUA,WAAW,EAArB;;AAEA,MAAI,CAAC,CAACA,QAAQG,OAAR,CAAgB,GAAhB,CAAN,EAA4B;AAC1BH,cAAUA,WAAW,IAArB;AACD;;AAED,MAAMI,QAAQJ,QAAQK,KAAR,CAAcH,SAAd,CAAd;AACA,MAAMI,YAAYL,IAAII,KAAJ,CAAUH,SAAV,CAAlB;;AAEA,MAAIK,UAAU,IAAd;AACA,OAAK,IAAIC,KAAK,CAAd,EAAiBD,WAAWC,KAAKJ,MAAMK,MAAvC,EAA+CD,IAA/C,EAAqD;AACnD,QAAIJ,MAAMI,EAAN,MAAc,GAAlB,EAAuB;AACrB;AACD,KAFD,MAEO,IAAIA,KAAKF,UAAUG,MAAnB,EAA2B;AAChCF,gBAAUH,MAAMI,EAAN,EAAUE,WAAV,OAA4BJ,UAAUE,EAAV,EAAcE,WAAd,EAAtC;AACD,KAFM,MAEA;AACLH,gBAAU,KAAV;AACD;AACF;;AAED,SAAOA,OAAP;AACD,CAvBM;;AAyBP,IAAMI,oBAAoB;AACxBC,QAAM,GADkB;AAExBC,SAAO;AAFiB,CAA1B;;AAKA,IAAMC,mBAAmB,CAAC,GAAD,EAAM,GAAN,CAAzB;;AAEO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,KAAD,EAAQC,SAAR,EAAmBC,SAAnB,EAAiC;AACxD,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AAEDC,cAAYA,UAAUP,WAAV,EAAZ;AACAO,cAAYN,kBAAkBM,SAAlB,KAAgCA,SAA5C;;AAEA,MAAI,CAACH,iBAAiBK,QAAjB,CAA0BF,SAA1B,CAAL,EAA2C;AACzC,UAAM,IAAIG,KAAJ,8BAAqCH,SAArC,CAAN;AACD;;AAED,MAAII,aAAa,KAAjB,CAZwD,CAYjC;;AAZiC;AAAA;AAAA;;AAAA;AAcxD,yBAAmBL,KAAnB,8HAA0B;AAAA,UAAfM,IAAe;AAAA,UAChBC,EADgB,GACTD,IADS,CAChBC,EADgB;;AAExB,UAAI,CAACA,EAAD,IAAOA,GAAGd,MAAH,GAAY,CAAnB,IAAwBc,GAAGd,MAAH,GAAY,CAAxC,EAA2C;AACzC,cAAM,IAAIW,KAAJ,8BAAqCG,EAArC,CAAN;AACD;;AAED,UAAI,CAACxB,iBAAiBuB,KAAKrB,GAAtB,EAA2BiB,SAA3B,CAAL,EAA4C;AAC1C;AACD;;AAED,UAAIK,GAAGd,MAAH,KAAc,CAAlB,EAAqB;AACnB;AACA,YAAIc,GAAG,CAAH,MAAUN,SAAd,EAAyB;AACvBI,uBAAaE,GAAG,CAAH,MAAU,GAAvB;AACD,SAFD,MAEO,IAAIA,GAAG,CAAH,MAAUN,SAAd,EAAyB;AAC9BI,uBAAaE,GAAG,CAAH,MAAU,GAAvB;AACD,SAFM,MAEA;AACLF,uBAAa,KAAb;AACD;AACF,OATD,MASO,IAAIE,GAAGd,MAAH,KAAc,CAAlB,EAAqB;AAC1B;AACAY,qBAAaE,GAAG,CAAH,MAAU,GAAvB;AACD,OAHM,MAGA,IAAIA,GAAGd,MAAH,KAAc,CAAlB,EAAqB;AAC1B;AACA,YAAIc,GAAG,CAAH,MAAUN,SAAd,EAAyB;AACvBI,uBAAaE,GAAG,CAAH,MAAU,GAAvB;AACD;AACF,OA3BuB,CA2BtB;AACH;AA1CuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4CxD,SAAOF,UAAP;AACD,CA7CM;;AA+CA,IAAMG,kDAAqB,SAArBA,kBAAqB,CAACC,KAAD,EAAQR,SAAR,EAAmBC,SAAnB,EAAiC;AACjE,MAAI,CAACO,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AAED,OAAK,IAAMC,QAAX,IAAuBD,KAAvB,EAA8B;AAC5B,QAAIV,UAAUU,MAAMC,QAAN,CAAV,EAA2BT,SAA3B,EAAsCC,SAAtC,CAAJ,EAAsD;AACpD,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAZM","file":"index.js","sourcesContent":["export { RESOURCES, enrichResources } from './resources'\n\nexport const ressourceMatches = (pattern, res) => {\n  const separator = /[\\/\\.]/\n  pattern = pattern || ''\n\n  if (!~pattern.indexOf('*')) {\n    pattern = pattern += '.*'\n  }\n\n  const parts = pattern.split(separator)\n  const testParts = res.split(separator)\n\n  let matches = true\n  for (let ii = 0; matches && ii < parts.length; ii++) {\n    if (parts[ii] === '*') {\n      continue\n    } else if (ii < testParts.length) {\n      matches = parts[ii].toLowerCase() === testParts[ii].toLowerCase()\n    } else {\n      matches = false\n    }\n  }\n\n  return matches\n}\n\nconst OPERATION_ALIASES = {\n  read: 'r',\n  write: 'w'\n}\n\nconst KNOWN_OPERATIONS = ['r', 'w']\n\nexport const checkRule = (rules, operation, ressource) => {\n  if (!rules) {\n    return false\n  }\n\n  operation = operation.toLowerCase()\n  operation = OPERATION_ALIASES[operation] || operation\n\n  if (!KNOWN_OPERATIONS.includes(operation)) {\n    throw new Error(`Invalid rule operation: ${operation}`)\n  }\n\n  let permission = false // Everything is restricted by default\n\n  for (const rule of rules) {\n    const { op } = rule\n    if (!op || op.length < 2 || op.length > 4) {\n      throw new Error(`Invalid rule operation: ${op}`)\n    }\n\n    if (!ressourceMatches(rule.res, ressource)) {\n      continue\n    }\n\n    if (op.length === 4) {\n      // `+r-w` form\n      if (op[1] === operation) {\n        permission = op[0] === '+'\n      } else if (op[3] === operation) {\n        permission = op[2] === '+'\n      } else {\n        permission = false\n      }\n    } else if (op.length === 3) {\n      // `+rw` form\n      permission = op[0] === '+'\n    } else if (op.length === 2) {\n      // `+r` form\n      if (op[1] === operation) {\n        permission = op[0] === '+'\n      }\n    } // else leave the permission untouched\n  }\n\n  return permission\n}\n\nexport const checkMultipleRoles = (roles, operation, ressource) => {\n  if (!roles) {\n    return false\n  }\n\n  for (const roleName in roles) {\n    if (checkRule(roles[roleName], operation, ressource)) {\n      return true\n    }\n  }\n\n  return false\n}\n"]}