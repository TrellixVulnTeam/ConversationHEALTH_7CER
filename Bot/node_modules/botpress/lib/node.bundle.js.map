{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./src/util.js","webpack:///external \"bluebird\"","webpack:///./src/database/helpers.js","webpack:///external \"ms\"","webpack:///external \"chalk\"","webpack:///external \"glob\"","webpack:///external \"mkdirp\"","webpack:///external \"moment\"","webpack:///external \"nanoid\"","webpack:///external \"axios\"","webpack:///external \"os\"","webpack:///./src/stats.js","webpack:///external \"express\"","webpack:///./src/listeners.js","webpack:///./src/security/provider.js","webpack:///external \"mware\"","webpack:///./src/modules.js","webpack:///external \"prompt-confirm\"","webpack:///external \"child_process\"","webpack:///external \"knex\"","webpack:///external \"prompt\"","webpack:///./src/dialog/validator.js","webpack:///external \"yn\"","webpack:///external \"eventemitter2\"","webpack:///external \"json5\"","webpack:///external \"mustache\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"joi\"","webpack:///external \"winston\"","webpack:///./src/ghost-content/util.js","webpack:///./src/ghost-content/index.js","webpack:///external \"lodash/mapValues\"","webpack:///external \"lodash/get\"","webpack:///./src/cli/auth.js","webpack:///./src/database/kvs.js","webpack:///./src/cli/migrations/0.1.js","webpack:///./src/cli/migrations sync ^\\.\\/.*$","webpack:///./src/helpers.js","webpack:///external \"crypto\"","webpack:///external \"multer\"","webpack:///./src/server/secured.js","webpack:///./src/server/non-secured.js","webpack:///./src/server/anonymous.js","webpack:///external \"@botpress/util-roles\"","webpack:///external \"query-string\"","webpack:///external \"body-parser\"","webpack:///./src/server/api.js","webpack:///./src/server/static.js","webpack:///external \"socketio-jwt\"","webpack:///external \"socket.io\"","webpack:///./src/server/socket.js","webpack:///external \"http\"","webpack:///external \"compression\"","webpack:///./src/server/index.js","webpack:///./src/queues/memory.js","webpack:///./src/skills/index.js","webpack:///./src/dialog/janitor.js","webpack:///./src/dialog/processors.js","webpack:///external \"vm2\"","webpack:///./src/dialog/engine.js","webpack:///./src/dialog/state.js","webpack:///./src/dialog/provider.js","webpack:///./src/config-manager/module.js","webpack:///./src/config-manager/index.js","webpack:///./src/bus.js","webpack:///./src/janitor/index.js","webpack:///./src/content/getItemProviders.js","webpack:///external \"verror\"","webpack:///./src/content/service.js","webpack:///./src/users.js","webpack:///external \"util\"","webpack:///./src/renderers/proactive.js","webpack:///./src/renderers/engine.js","webpack:///./src/renderers/index.js","webpack:///./src/cloud/index.js","webpack:///./src/about.js","webpack:///./src/licensing.js","webpack:///./src/media-manager/index.js","webpack:///./src/database/logs.js","webpack:///./src/database/ghost.js","webpack:///./src/database/sessions.js","webpack:///./src/database/notifications.js","webpack:///./src/database/tags.js","webpack:///./src/database/users.js","webpack:///./src/database/tables.js","webpack:///external \"lodash/pick\"","webpack:///./src/database/index.js","webpack:///./src/fallback.js","webpack:///./src/hear.js","webpack:///./src/notifications.js","webpack:///./src/security/none/index.js","webpack:///./src/security/cloud/index.js","webpack:///./src/security/root/index.js","webpack:///./src/security/index.js","webpack:///./src/logger/db-transport.js","webpack:///./src/logger/index.js","webpack:///./src/middlewares.js","webpack:///external \"dotenv\"","webpack:///external \"cluster\"","webpack:///external \"source-map-support/register\"","webpack:///./src/botpress.js","webpack:///./src/cli/cloudPair.js","webpack:///./src/ghost-content/transparent.js","webpack:///external \"lodash/uniq\"","webpack:///external \"lodash/partition\"","webpack:///external \"prepend-file\"","webpack:///external \"username\"","webpack:///./src/cli/ghost-sync.js","webpack:///external \"valid-url\"","webpack:///./src/cli/list.js","webpack:///./src/cli/migrate.js","webpack:///./src/cli/update.js","webpack:///./src/cli/create.js","webpack:///external \"monitorctrlc\"","webpack:///external \"nodemon\"","webpack:///external \"nanoid/generate\"","webpack:///external \"module\"","webpack:///./src/cli/start.js","webpack:///external \"node-machine-id\"","webpack:///external \"universal-analytics\"","webpack:///./src/cli/init.js","webpack:///external \"commander\"","webpack:///./src/cli/index.js","webpack:///external \"babel-polyfill\"","webpack:///./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","_chalk","_path","_module","_fs","_knex","_generate","IS_DEV","eval","NPM_CMD","test","process","platform","PRINT_LEVELS","info","chalk","white","warn","yellow","error","red","success","green","print","level","_len","arguments","length","args","Array","_key","method","concat","console","log","black","bgWhite","keys","forEach","_len2","_key2","resolveFromDir","fromDir","path","resolve","fromFile","join","Module","_resolveFilename","id","filename","paths","_nodeModulePaths","err","resolveModuleRootPath","entryPath","current","dirname","lookup","fs","existsSync","resolveProjectFile","file","projectLocation","throwIfNotExist","packagePath","Error","getDataLocation","dataDir","isAbsolute","getBotpressVersion","botpressPackagePath","__dirname","JSON","parse","readFileSync","version","collectArgs","val","memo","push","getInMemoryDb","_knex2","default","client","connection","pool","min","max","disposeTiemout","idleTimeoutMillis","useNullAsDefault","safeId","undefined","_generate2","isBotpressPackage","pkg","_getPackageName","getPackageName","_getPackageName2","_slicedToArray","scope","startsWith","getModuleShortname","_getPackageName3","replace","_pkg$match$slice","match","slice","_pkg$match$slice2","isDeveloping","npmCmd","_moment","isLite","knex","config","dateParse","exp","raw","dateFormat","date","iso","_moment2","toDate","toISOString","columnOrDateFormat","colOrDate","lite","sql","createTableIfNotExists","tableName","cb","schema","hasTable","then","exists","format","now","isBefore","d1","d2","isAfter","isBetween","d3","isSameDay","hourOfDay","bool","true","false","json","set","obj","stringify","_nodeMachineId","botfile","visitor","queued","machineId","catch","hash","crypto","createHash","update","os","arch","hostname","type","digest","mid","_universalAnalytics2","strictCidFormat","a","track","category","action","label","optOutStats","event","trackException","message","_lodash","matches","conditions","_","isPlainObject","text","pairs","toPairs","every","_ref","_ref2","comparrer","eventValue","isFunction","isRegExp","isString","isNil","captured","tail","exec","isEqual","hear","callback","next","result","isArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","conditionsItem","return","AbstractAuthenticationProvider","options","_classCallCheck","this","assign","authHeader","authenticateWithError","logger","debug","_context","t0","_bluebird","_axios","_helpers","_util","dataLocation","configManager","loadModules","_asyncToGenerator","regeneratorRuntime","mark","_callee2","moduleDefinitions","botpress","loadedCount","loadedModules","wrap","_callee2$","_context2","prev","Promise","mapSeries","_callee","mod","loader","configuration","_callee$","entry","abrupt","_typeof","handlers","getModuleConfiguration","root","isConfigMissing","sent","bootstrap","t1","t2","init","helpers","t3","stop","_x3","apply","_x","_x2","scanModules","botPackage","deps","dependencies","merge","devDependencies","reduce","util","modulePackage","homepage","settings","listInstalledModules","prodDeps","filter","getRandomCommunityHero","axios","_ref3","contributors","data","_$sample","sample","username","login","github","html_url","avatar","avatar_url","contributions","listInstalled","_scan","_load","validateFlowSchema","flow","errorPrefix","location","isObjectLike","startNode","nodes","find","catchAll","onEnter","node","normalizeFolder","folder","folderPath","normalizedFolderName","relative","_util2","promisifyAll","globAsync","promisify","glob","db","enabled","_transparent2","_ref5","_ref7","_ref8","_ref13","_ref14","_ref17","_ref18","_ref20","_ref21","pendingRevisionsByFolder","trackedFolders","folderOptions","upsert","where","_ref2$idField","idField","_ref2$trx","trx","prepareQuery","transacting","select","res","_get2","thenReturn","insert","_extends","recordFile","filePath","column","_ref6$isBinary","isBinary","readFileAsync","content","getPendingRevisions","orderBy","_x5","addRootFolder","_callee3","rootFolder","_normalizeFolder2","_options$isBinary","_options$filesGlob","filesGlob","revisionsFile","fileRevisionsPromise","_ref9","_ref10","knownRevisions","dbRevisions","_partition","_partition2","revisionsToDelete","remainingRevisions","files","_context3","code","trim","split","map","acc","all","_partition4","_ref11","revision","whereIn","_ref12","del","cwd","whereNotIn","andWhere","_x6","updatePendingForFolder","_callee4","_context4","_x8","recordRevision","content_id","created_by","upsertFile","_callee5","_context5","_defineProperty","count","_ref15","Number","transaction","commit","rollback","_x9","_x10","_x11","revertAllPendingChangesForFile","_callee6","_normalizeFolder3","_folderOptions$normal","_context6","from","_x12","_x13","readFile","_callee7","_normalizeFolder4","_ref19","_context7","results","_x14","_x15","deleteFile","_callee8","_normalizeFolder5","_context8","deleted","binary_content","_x16","_x17","directoryListing","_callee9","_normalizeFolder6","fileEndingPattern","pathsToOmit","_context9","row","_x18","getPending","getPendingWithContent","_ref26$stringifyBinar","stringifyBinary","props","_mapValues2","_ref22","_ref23","_ref22$stringifyBinar","_callee10","folderInfo","revisions","fileNames","_context10","_ref24","_uniq2","_ref25","toString","binary","_x21","_x22","getPendingWithContentForFolder","REVISIONS_FILE_NAME","_prompt","_validUrl","_promptConfirm","_mkdirp","_os","_get","AUTH_FILE","getDataDir","projectPath","bold","exit","bf","getCloudAuthFile","homedir","getAuthFile","readJsonFile","writeJsonFile","mkdirp","sync","writeFileSync","readBotAuth","readCloudAuth","writeBotAuth","auth","writeCloudAuth","AUTH_DISABLED","refreshToken","botUrl","token","response","request","url","headers","Authorization","doRootLogin","user","password","kind","properties","description","required","hidden","prompt","delimiter","start","fromCallback","post","reason","doCloudLogin","_ref4","botInfo","userAuthUrl","loginUrl","cloudAuth","apiToken","authorization","_ref6","msg","endpoint","botId","botEnv","_x4","doLogin","validUrl","isUri","logout","Confirm","run","answer","getSetCallback","betweenGetAndSetCallback","params","keyCol","valueCol","modifiedOnCol","_helpers2","limit","at","setValue","original","table","string","primary","timestamp","_kvs","dropTableIfExists","has","dropTable","migrate_database_schema","dbLocation","created_on","updateUsers","rows","_kvs2","env","DELETE_TABLES","migrate_botfile","botfilePath","before","indexOf","after","bot_path","./0.1","./0.1.js","webpackContext","req","webpackContextResolve","e","database","logsSecret","_nanoid2","bp","app","secure","_loadedModules","fullName","isPlugin","menuText","menuIcon","noInterface","moduleView","stretched","plugins","send","hero","bot","getContributor","middlewares","list","stats","body","setCustomizations","load","delete","resetCustomizations","notifications","getInbox","about","getBotInformation","licensing","changeLicense","license","sendStatus","status","queryDb","query","secret","setHeader","Date","contentManager","listAvailableCategories","_req$query","searchTerm","categoryId","listCategoryItems","_x7","categoryItemsCount","getItem","getItems","ids","createOrUpdateCategoryItem","formData","itemId","deleteCategoryItems","_x19","_x20","_callee11","_context11","ghostManager","_callee12","_context12","_x23","_x24","_callee13","_context13","_x25","_x26","_ref16","mediaUploadMulter","_multer2","limits","fileSize","single","_callee14","_context14","mediaManager","saveFile","originalname","buffer","_x27","_x28","_callee15","flows","_context15","dialogEngine","getFlows","_x29","_x30","_callee16","actions","_context16","getAvailableActions","_x31","_x32","_callee17","_context17","flowProvider","saveFlows","_x33","_x34","_callee18","_context18","skills","generateFlow","skillId","_x35","_x36","getLicensing","unlink","isFirstRun","roles","cloud","getUserRoles","security","getAuthenticationInfo","ip","_express","_utilRoles","routersConditions","routers","maybeApply","fn","router","originalUrl","condition","_authenticationMiddleware","maybeSendRequireLogin","authenticate","end","getCloudRoles","_bp$botfile$login","useCloud","isPaired","installProtector","operation","resource","route","secureMiddleware","checkMultipleRoles","put","patch","installRouter","getRouter","Router","use","links","createShortlink","destination","toLowerCase","q","qs","redirect","installMaybeUse","maybeUse","install","bodyParser","urlencoded","extended","_anonymous2","_nonSecured2","_secured2","serveModule","shortName","iconRequestPath","iconPath","contentType","liteDir","readdirSync","b","endsWith","settingsKey","webBundle","bundlePath","subview","serveCustomTheme","customTheme","getFeatures","whitelabel","themeLocation","serveMedia","contents","extname","Cache-Control","tokenExpiry","authEnabled","ghostEnabled","appName","isUsingCloud","pairingInfo","ghostContent","teamId","getPairingInfo","_ms2","_yn2","BOTPRESS_FLOW_EDITOR_DISABLED","static","botpressPath","accept","sendFile","server","io","admin","guest","_socket2","of","socketioJwt","getJWTSecretOrCertificate","handshake","t4","authorize","on","socket","visitorId","events","emit","socketId","onAny","__socketId","__room","to","serveApi","api","_api2","serveSocket","serveStatic","staticStuff","_static2","_bp$botfile","port","_express2","_compression2","http","createServer","listen","MemoryQueue","_this","drain","queue","tick","retries","drainInterval","subscribers","_lock","_drain","setInterval","job","isPriority","jobWrapped","unshift","shift","_this2","jobQueueId","getQueueId","item","_this3","toDequeueIdx","findIndex","el","queueId","_this4","pullAt","enqueue","_validator","SKILLS_PREFIX_REGEX","RegExp","SkillsManager","_log","_skills","curr","generate","generator","generatedFlow","validationError","transitions","intervalRef","defaultJanitorInterval","defaultTimeout","checkStaleSessions","timedOutCondition","sessions","subtract","andWhereRaw","session","includes","chunks","head","userId","sendIncoming","sessionId","uninstall","clearInterval","randomMs","Math","random","runOnce","originalEvent","state","flowContext","rendered","additionalData","Mustache","render","pick","currentFlow","isEmpty","reply","_vm","loggerShim","callSubflowRegex","DialogEngine","stateManager","_ref$logger","onError","errorHandlers","flowsLoaded","defaultFlow","outputProcessors","actionMetadataProviders","onBeforeCreated","_mware2","onAfterCreated","onBeforeEnd","onBeforeNodeEnter","onBeforeSessionTimeout","stateId","reloadFlows","_getOrCreateContext","context","getState","_processTimeout","setState","substr","_trace","catchAllOnReceive","_processInstructions","catchAllNext","_evaluateCondition","_processNode","errorHandler","flowName","nodeName","resetState","_findFlow","_findNode","_setContext","hasJumped","flowStack","_getContext","_endFlow","loadAll","processor","provider","fnMap","overwrite","toRegister","handler","metadata","isObject","extra","registerActions","values","x","String","userState","beforeCtx","currentNodeTimeout","currentFlowTimeout","fallbackTimeoutNode","fallbackTimeoutFlow","switchedFlow","switchedNode","originalFlow","_gotoSubflow","_gotoPreviousFlow","onReceive","_transitionToNextNodes","nextNodes","_this5","deleteState","_this6","afterCtx","_nodeName$match","_nodeName$match2","subflow","subflowNode","last","pop","_$last","instructions","instruction","_this7","trace","_dispatchOutput","_invokeAction","output","argsStr","first","mapValues","freeze","ret","isFrozen","vm","VM","timeout","_this8","throwIfNotFound","repeat","_ref$internals","internals","_internals","_isExpired","_upsertState","_createEmptyState","_stateId","_createSession","states","substates","_toConsumableArray","FlowProvider","_possibleConstructorReturn","__proto__","getPrototypeOf","wildcard","maxListeners","flowsDir","EventEmitter2","flowFiles","flowPath","schemaError","uiEq","unplacedIndex","_uiPath","position","y","maxBy","Boolean","_prepareSaveFlow","flowsToSave","flowsSavePromises","flatten","uiPath","flowContent","uiContent","flowsDeletePromises","omit","ModuleConfiguration","manager","configLocation","caching","_getFileName","_getOptions","_hasDefaultConfig","_readDefaultConfig","validations","any","validation","choice","transformers","defaultValues","amendOption","option","validTypes","ConfigurationManager","Joi","assert","_memoizedLoadAll","memoize","_loadAll","json5","findKey","amendOptions","_loadFromDefaultValues","_loadFromConfigFile","_loadFromEnvVariables","_eventemitter","EventBus","DEFAULTS","timestampColumn","_ref$intervalMs","intervalMs","tasks","currentPromise","runTask","outdatedCondition","ttl","runTasks","each","finally","intervalId","add","remove","_tasks$splice","splice","_verror","_glob","_nanoid","_json","getNewItemId","renderer","prepareDb","createTable","defaults","contentDir","contentDataDir","_callee23","categories","categoryById","fileById","getItemProviders","transformItemDbToApi","transformItemApiToDb","dumpDataToFile","dumpAllDataToFiles","getCategorySchema","resolveRefs","computeData","computeMetadata","computePreviewText","fillComputedProps","getItemDefault","getItemsByMetadata","recomputeCategoriesMetadata","loadData","loadCategoryFromSchema","loadCategoriesFromPath","readDataForFile","registerGetItemProvider","_callee23$","_context24","_query","items","_ref5$from","_ref5$count","_ref5$orderBy","orWhere","offset","jsonSchema","ui","uiSchema","title","expandedFormData","previewText","isNewItemCreation","createdBy","createdOn","some","providerRegex","pMatch","categoryName","categoryTitle","categorySchema","queries","_loop","computedProps","delegateYield","finish","_ref26","fileName","_context19","_ref27","_ref28","_callee19","_context20","field","_ref29","_callee20","schemas","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee20$","_context21","VError","_ref30","_callee21","_context22","_ref31","_callee22","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context23","_glob2","hasTag","tag","toUpper","tagged_on","untag","getTag","details","getTags","tags","v","selectTags","subQuery","groupBy","leftJoin","users","listWithTags","filterByTag","toUpperCase","parseInt","sendContent","getUser","sendToUser","elementOrRenderer","forgedEvent","inspect","forged","ParsingError","bloc","instructionIndex","internalMessage","captureStackTrace","mapBloc","blocName","processors","incomingEvent","currentPlatform","_options$throwIfNoPla","throwIfNoPlatform","_premapInstruction","index","detectedPlatforms","evaluate","isArrayLike","if","unless","platforms","mapKeys","__","alias","trimmed","premapInstruction","_mapInstruction","messages","wait","__internal","typing","mapInstruction","hydrateMustache","template","renderMustache","rawBloc","rendererName","rendererFn","t5","renderers","registerChannel","processOutgoing","verbose","invoke","outputPlatform","_ref3$incomingEvent","_engine2","doSendContent","delay","sendOutgoing","initialData","itemName","contentItem","itemCategoryId","itemCategory","itemRenderer","fullContext","BOT_URL","incomingMiddleware","order","proactiveMethods","_proactive2","registerConnector","register","unregister","isRegistered","_getWellKnownRSACert","certificate","getCloudEndpoint","updateRemoteEnv","_getPairingInfo","_getRemoteRoles","_getPairingInfo2","rolesPromise","payload","roleNames","roleName","role","rules","_readCloudfile","getBotEnv","getCertificate","packageJsonPath","packageJson","author","licensesPath","licensePath","licenseFileName","licenseContent","middleware","listeners","_JSON$parse2","sendText","responseTo","licenses","currentLicense","agplContent","botpressContent","agpl","licensedUnder","licensed","mediaDir","basename","increments","h","defaultTo","integer","references","unique","boolean","enu","initializeCoreDatabase","directory","tables","migrate","latest","createKnex","commonConfig","dbConfig","sqlite","postgres","_pick2","afterCreate","conn","_knex3","getDb","kvsInstance","createKvs","kvs","getKvs","kvsWrapper","instance","saveUser","_ref5$gender","gender","_ref5$timezone","timezone","_ref5$locale","locale","picture_url","first_name","last_name","userRow","fallbackHandler","chain","getOriginatingModule","origPrepareStackTrace","prepareStackTrace","stack","getFileName","toDatabase","notification","module_id","module_icon","icon","module_name","redirect_url","read","archived","fromDatabase","sound","markAsRead","notificationId","markAllAsRead","getArchived","archive","archiveAll","callingFile","callingModuleRoot","logMessage","redirectUrl","enableSound","_bindEvents","_provider","RootAuthentication","email","scheme","CloudAuthentication","allowProof","algorithm","decoded","jwt","verify","algorithms","identity_proof_only","aud","_bootstrapToken","attempts","secretPath","randomBytes","loginUser","sign","issuer","expiresIn","securityConfig","_securityConfig","maxAttempts","resetAfter","lastCleanTimestamp","adminPassword","BOTPRESS_ADMIN_PASSWORD","_attempt","_login","_buildToken","buildToken","isCloudPaired","NoneAuthentication","LOGS_FLUSH_INTERVAL","LOGS_CHUNK_SIZE","DbTransport","opts","flushPromise","batches","doFlush","batch","batchInsert","flush","janitor","flushInterval","winston","Transport","meta","logConfig","_db","Logger","transports","Console","prettyPrint","colorize","enableDbStorageIfNeeded","keepDays","createMiddleware","middlewareName","_use","_error","TypeError","dispatch","conformsTo","_promise","middlewaresFilePath","noopChain","arg","incoming","outgoing","customizations","writeCustomizations","customization","sendToMiddleware","mw","licenseMiddleware","in","out","sendIncomingImmediately","sendOutgoingImmediately","getCustomizations","_cluster","_dotenv","_ms","_middlewares","_logger","_security","_notifications","_hear","_fallback","_database","_ghostContent","_mediaManager","_licensing","_about","_modules","_cloud","_renderers","_users","_service","_getItemProviders","_janitor","_stats","_bus","_configManager","_state","_engine","_processors","_janitor3","_memory","_package","_server","RESTART_EXIT_CODE","mkdirIfNeeded","mkdirSync","REQUIRED_PROPS","validateBotfile","prop","_ref$options","cluster","isMaster","firstWorkerHasStartedAlready","quit","stopServer","receiveMessageFromWorker","workerStatus","worker","fork","isWorker","_start","_setupEnv","_stats2","interval","hasInspectMode","modulesConfigDir","_logger2","logs","_database2","_janitor2","_cloud2","_security2","_modules2","createNotifications","_about2","_licensing2","_middlewares2","_hear2","hearMiddleware","_fallback2","fallbackMiddleware","_users2","_ghostContent2","_service2","_mediaManager2","defaultGetItemProviders","_renderers2","_state2","dialogJanitor","DialogJanitor","skillsManager","registerOutputProcessor","DialogProcessors","incomingQueue","Queue","redis","subscribe","outgoingQueue","cancelAll","peek","registerSkillsFromModules","_server2","srv","serverPID","pid","_debugProcess","kill","ready","createHelpers","middlewareAutoLoading","projectEntry","setTimeout","envPath","envConfig","dotenv","k","ENV_OVERLOAD","hostnameRegex","_eval","pairUrl","_data$payload","mkdirpAsync","fullFileFolder","writeFileAsync","unlinkAsync","accessAsync","_auth","writeRevisions","host","fullUser","preamble","_username2","_prependFile2","writeFile","updateFolder","Buffer","fromVersion","sortBy","toApply","f","parseFloat","migration","_child_process","modulesManager","packages","cmdRest","_templateObject3","_templateObject","execSync","_templateObject2","introductionText","nextStepText","invalidDirectoryError","copyingFile","_templateObject5","assertDoesntExist","loadTemplate","templatePath","_templateObject4","dot","compiled","entries","interpolate","moduleDirectory","pattern","_nodemon","_monitorctrlc","getPath","Botpress","getDefaultWatchIgnore","watch","w","argvWithoutWatch","argv","nodemonOptions","ext","watchExt","watchDir","ignore","watchIgnore","stdin","restartable","mon","_nodemon2","changedFile","two","monitorCtrlC","showTemplateInfo","_templateObject6","channels","_templateObject7","dirName","botpressVersion","defaultBotName","yes","chdir","dir","program","command","ghostSync","cloudPair","help","global","_babelPolyfill","DatabaseHelpers","CLI"],"mappings":"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","file":"node.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/home/epaminond/private/projects/2015.08.08_keenethics/projects/botpress/botpress/packages/core/botpress\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 129);\n","module.exports = require(\"lodash\");","module.exports = require(\"path\");","module.exports = require(\"fs\");","import chalk from 'chalk'\nimport path from 'path'\nimport Module from 'module'\nimport fs from 'fs'\nimport knex from 'knex'\nimport generate from 'nanoid/generate'\n\nconst IS_DEV = eval(\"process.env.NODE_ENV !== 'production'\") /* eslint-disable-line no-eval */\n\nconst NPM_CMD = /^win/.test(process.platform) ? 'npm.cmd' : 'npm'\n\nconst PRINT_LEVELS = {\n  info: chalk.white,\n  warn: chalk.yellow.bind(chalk, 'WARN'),\n  error: chalk.red.bind(chalk, 'ERR'),\n  success: chalk.green.bind(chalk, 'OK')\n}\n\nconst print = (level, ...args) => {\n  let method = PRINT_LEVELS[level]\n\n  if (!method) {\n    args = [level].concat(args)\n    method = PRINT_LEVELS.info\n  }\n\n  console.log(chalk.black.bgWhite('[botpress]'), '\\t', method(...args))\n}\n\nObject.keys(PRINT_LEVELS).forEach(level => {\n  print[level] = (...args) => print(level, ...args)\n})\n\nconst resolveFromDir = (fromDir, moduleId) => {\n  fromDir = path.resolve(fromDir)\n  const fromFile = path.join(fromDir, 'noop.js')\n  try {\n    return Module._resolveFilename(moduleId, {\n      id: fromFile,\n      filename: fromFile,\n      paths: Module._nodeModulePaths(fromDir)\n    })\n  } catch (err) {\n    return null\n  }\n}\n\nconst resolveModuleRootPath = entryPath => {\n  let current = path.dirname(entryPath)\n  while (current !== '/') {\n    const lookup = path.join(current, 'package.json')\n    if (fs.existsSync(lookup)) {\n      return current\n    }\n    current = path.resolve(path.join(current, '..'))\n  }\n  return null\n}\n\nconst resolveProjectFile = (file, projectLocation, throwIfNotExist) => {\n  const packagePath = path.resolve(projectLocation || './', file)\n\n  if (!fs.existsSync(packagePath)) {\n    if (throwIfNotExist) {\n      throw new Error(\"Could not find bot's package.json file\")\n    }\n    return null\n  }\n\n  return packagePath\n}\n\nconst getDataLocation = (dataDir, projectLocation) =>\n  dataDir && path.isAbsolute(dataDir) ? path.resolve(dataDir) : path.resolve(projectLocation, dataDir || 'data')\n\nconst getBotpressVersion = () => {\n  const botpressPackagePath = path.join(__dirname, '../package.json')\n  const botpressJson = JSON.parse(fs.readFileSync(botpressPackagePath))\n  return botpressJson.version\n}\n\nconst collectArgs = (val, memo) => {\n  memo.push(val)\n  return memo\n}\n\n// https://github.com/tgriesser/knex/issues/1871#issuecomment-273721116\nconst getInMemoryDb = () =>\n  knex({\n    client: 'sqlite3',\n    connection: ':memory:',\n    pool: {\n      min: 1,\n      max: 1,\n      disposeTiemout: 360000 * 1000,\n      idleTimeoutMillis: 360000 * 1000\n    },\n    useNullAsDefault: true\n  })\n\nconst safeId = (length = 10) => generate('1234567890abcdefghijklmnopqrsuvwxyz', length)\n\nconst isBotpressPackage = pkg => {\n  const [scope, name] = getPackageName(pkg)\n  const isBotpress = scope === 'botpress' || name.startsWith('botpress-')\n  return isBotpress\n}\n\nconst getModuleShortname = pkg => {\n  const [, name] = getPackageName(pkg)\n  const withoutPrefix = name.replace(/^botpress-/i, '')\n  return withoutPrefix\n}\n\nconst getPackageName = pkg => {\n  const isScoped = pkg.startsWith('@')\n\n  if (isScoped) {\n    const [scope, name] = pkg.match(/^@(.*)\\/(.*)/).slice(1)\n    return [scope, name]\n  } else {\n    return [null, pkg]\n  }\n}\n\nmodule.exports = {\n  print,\n  resolveFromDir,\n  isDeveloping: IS_DEV,\n  resolveModuleRootPath,\n  resolveProjectFile,\n  getDataLocation,\n  npmCmd: NPM_CMD,\n  getBotpressVersion,\n  collectArgs,\n  getInMemoryDb,\n  safeId,\n  isBotpressPackage,\n  getModuleShortname\n}\n","module.exports = require(\"bluebird\");","/**\n * Helpers for the [Botpress Database]{@link Database} running on [Knex]{@link http://knexjs.org/}\n * @public\n * @module DatabaseHelpers\n * @example\n * import { DatabaseHelpers } from 'botpress'\n * // or\n * const { DatabaseHelpers } from 'botpress'\n *\n * const helpers = DatabaseHelpers(await bp.db.get())\n */\n\n/*\n  The goal of these helpers is to generate SQL queries\n  that are valid for both SQLite and Postgres\n*/\n\nimport moment from 'moment'\n\nconst isLite = knex => {\n  return knex.client.config.client === 'sqlite3'\n}\n\nmodule.exports = knex => {\n  const dateParse = exp => {\n    return isLite(knex) ? knex.raw(`strftime('%Y-%m-%dT%H:%M:%fZ', ${exp})`) : knex.raw(exp)\n  }\n\n  const dateFormat = date => {\n    const iso = moment(date)\n      .toDate()\n      .toISOString()\n    return dateParse(`'${iso}'`)\n  }\n\n  const columnOrDateFormat = colOrDate => {\n    const lite = isLite(knex)\n\n    if (colOrDate.sql) {\n      return colOrDate.sql\n    }\n\n    if (typeof colOrDate === 'string') {\n      return lite ? dateParse(colOrDate) : `\"${colOrDate}\"`\n    }\n\n    return dateFormat(colOrDate)\n  }\n\n  return {\n    /**\n     * Returns whether or not the current database is SQLite\n     * @return {Boolean} Returns true if the database is SQLite, false if Postgres\n     */\n    isLite: () => isLite(knex),\n\n    /**\n     * **This is a workaround utility function**\n     * knex's createTableIfNotExists doesn't work with postgres\n     * https://github.com/tgriesser/knex/issues/1303\n     * @param  {String}   tableName Name of the table to create\n     * @param  {Function} Callback function. Identical to Knex's callback.\n     */\n    createTableIfNotExists: (tableName, cb) => {\n      return knex.schema.hasTable(tableName).then(exists => {\n        if (exists) {\n          return\n        }\n        return knex.schema.createTableIfNotExists(tableName, cb)\n      })\n    },\n\n    date: {\n      format: dateFormat,\n      now: () => (isLite(knex) ? knex.raw(\"strftime('%Y-%m-%dT%H:%M:%fZ', 'now')\") : knex.raw('now()')),\n\n      isBefore: (d1, d2) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n\n        return knex.raw(d1 + ' < ' + d2)\n      },\n\n      isAfter: (d1, d2) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n\n        return knex.raw(d1 + ' > ' + d2)\n      },\n\n      isBetween: (d1, d2, d3) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n        d3 = columnOrDateFormat(d3)\n\n        return knex.raw(`${d1} BETWEEN ${d2} AND ${d3}`)\n      },\n\n      isSameDay: (d1, d2) => {\n        d1 = columnOrDateFormat(d1)\n        d2 = columnOrDateFormat(d2)\n\n        return knex.raw(`date(${d1}) = date(${d2})`)\n      },\n\n      hourOfDay: date => {\n        date = columnOrDateFormat(date)\n        return isLite(knex) ? knex.raw(`strftime('%H', ${date})`) : knex.raw(`to_char(${date}, 'HH24')`)\n      }\n    },\n\n    bool: {\n      true: () => (isLite(knex) ? 1 : true),\n      false: () => (isLite(knex) ? 0 : false),\n      parse: value => (isLite(knex) ? !!value : value)\n    },\n\n    json: {\n      set: obj => {\n        return isLite(knex) ? obj && JSON.stringify(obj) : obj\n      },\n      get: obj => {\n        return isLite(knex) ? obj && JSON.parse(obj) : obj\n      }\n    }\n  }\n}\n","module.exports = require(\"ms\");","module.exports = require(\"chalk\");","module.exports = require(\"glob\");","module.exports = require(\"mkdirp\");","module.exports = require(\"moment\");","module.exports = require(\"nanoid\");","module.exports = require(\"axios\");","module.exports = require(\"os\");","import os from 'os'\nimport crypto from 'crypto'\nimport ua from 'universal-analytics'\nimport { machineId } from 'node-machine-id'\n\nmodule.exports = botfile => {\n  let visitor = null\n  let queued = []\n\n  machineId()\n    .catch(() => {\n      const hash = crypto.createHash('sha256')\n      hash.update(os.arch() + os.hostname() + os.platform() + os.type())\n      return hash.digest('hex')\n    })\n    .then(mid => {\n      visitor = ua('UA-90044826-1', mid, { strictCidFormat: false })\n      queued.forEach(a => a())\n      queued = []\n    })\n\n  const track = (category, action, label = null, value = null) => {\n    if (!!botfile.optOutStats) {\n      return // Don't track if bot explicitly opted out from stats collection\n    }\n\n    if (!visitor) {\n      queued.push(() => track(category, action, label, value))\n      return\n    }\n\n    visitor.event(category, action, label, value, () => {\n      /* ignore errors */\n    })\n  }\n\n  const trackException = message => {\n    if (!!botfile.optOutStats) {\n      return // Don't track if bot explicitly opted out from stats collection\n    }\n\n    if (!visitor) {\n      queued.push(() => trackException(message))\n      return\n    }\n\n    visitor.event(message, () => {\n      /* ignore errors */\n    })\n  }\n\n  return { track, trackException }\n}\n","module.exports = require(\"express\");","import _ from 'lodash'\n\nconst matches = (conditions, event) => {\n  if (!_.isPlainObject(conditions)) {\n    conditions = { text: conditions }\n  }\n\n  const pairs = _.toPairs(conditions)\n  return _.every(pairs, ([key, comparrer]) => {\n    const eventValue = _.get(event, key, null)\n\n    if (_.isFunction(comparrer)) {\n      return comparrer(eventValue, event) === true\n    } else if (_.isRegExp(comparrer)) {\n      const matches = comparrer.test(eventValue)\n\n      if (matches && _.isString(eventValue)) {\n        if (_.isNil(event.captured)) {\n          event.captured = []\n        }\n\n        const a = _.tail(comparrer.exec(eventValue))\n        a.forEach(m => event.captured.push(m))\n      }\n\n      return matches\n    } else {\n      return _.isEqual(comparrer, eventValue)\n    }\n  })\n}\n\nconst hear = (conditions, callback) => {\n  return (event, next) => {\n    let result = false\n    if (_.isFunction(conditions)) {\n      result = conditions(event)\n    } else if (_.isArray(conditions)) {\n      for (const conditionsItem of conditions) {\n        if (matches(conditionsItem, event)) {\n          result = true\n          break\n        }\n      }\n    } else {\n      result = matches(conditions, event)\n    }\n\n    if (result && _.isFunction(callback)) {\n      if (callback.length <= 1) {\n        if (_.isFunction(next)) {\n          next()\n        }\n        callback(event)\n      } else {\n        callback(event, next)\n      }\n    } else {\n      if (_.isFunction(next)) {\n        next()\n      }\n    }\n  }\n}\n\nmodule.exports = { hear, matches }\n","/**\n * Security Provider\n * @private\n * @module security\n */\n\nexport default class AbstractAuthenticationProvider {\n  constructor(options) {\n    Object.assign(this, options)\n  }\n\n  /**\n   * @abstract\n   * @description Login a user to the configured provider\n   * @return {object} An authenticated User object or false if invalid login\n   */\n  login() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Returns a fresh token from an old (but still active) token\n   * @return {{ success: bool, token: string, reason: string }} A token object\n   */\n  refreshToken() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * Authenticates a user from an authentication header\n   * @description Example of header is: \"bearer your_token_here\"\n   * @return {object} An authenticated User object or false if invalid login\n   */\n  async authenticate(authHeader) {\n    try {\n      return await this.authenticateWithError(authHeader)\n    } catch (err) {\n      this.logger.debug('[Login]', err.message)\n      return false\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  async authenticateWithError() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Retrieve the user's identity from an authentication token\n   * @return {object} An authenticated User object or false if invalid token\n   */\n  getUserIdentity() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Returns information about the authentication provider and authentication status\n   * @return {Object} Varies from provider to the other\n   */\n  getAuthenticationInfo() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n\n  /**\n   * @abstract\n   * @description Returns a public JWT certificate or a private JWT key used to sign tokens and validate its origin\n   * @return {String} The public certificate or private secret\n   */\n  getJWTSecretOrCertificate() {\n    throw new Error('Abstract Class: Needs to be implemented')\n  }\n}\n","module.exports = require(\"mware\");","import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\nimport _ from 'lodash'\nimport axios from 'axios'\nimport helpers from './helpers'\nimport util from './util'\n\nimport { isDeveloping, resolveModuleRootPath, resolveFromDir, resolveProjectFile } from './util'\n\nmodule.exports = (logger, projectLocation, dataLocation, configManager) => {\n  const loadModules = async (moduleDefinitions, botpress) => {\n    let loadedCount = 0\n    const loadedModules = {}\n\n    await Promise.mapSeries(moduleDefinitions, async mod => {\n      let loader = null\n      try {\n        // eslint-disable-next-line no-eval\n        loader = eval('require')(mod.entry)\n      } catch (err) {\n        return logger.error(`Error loading module \"${mod.name}\": ` + err.message)\n      }\n\n      if (typeof loader !== 'object') {\n        return logger.warn(`Ignoring module ${mod.name}. Invalid entry point signature.`)\n      }\n\n      mod.handlers = loader\n\n      try {\n        const configuration = configManager.getModuleConfiguration({\n          name: mod.name,\n          options: loader.config,\n          path: mod.root\n        })\n\n        if (await configuration.isConfigMissing()) {\n          await configuration.bootstrap()\n        }\n\n        mod.configuration = configuration\n      } catch (err) {\n        logger.error(`Invalid module configuration in module ${mod.name}:`, err)\n      }\n\n      try {\n        loader.init && (await loader.init(botpress, mod.configuration, helpers))\n      } catch (err) {\n        logger.warn('Error during module initialization: ', err)\n      }\n\n      loadedModules[mod.name] = mod\n      logger.info(`Loaded ${mod.name}, version ${mod.version}`)\n      loadedCount++\n    })\n\n    if (loadedCount > 0) {\n      logger.info(`Loaded ${loadedCount} modules`)\n    }\n\n    return loadedModules\n  }\n\n  const scanModules = () => {\n    const packagePath = path.join(projectLocation, 'package.json')\n\n    if (!fs.existsSync(packagePath)) {\n      return logger.warn(\n        'No package.json found at project root, ' + \"which means botpress can't load any module for the bot.\"\n      )\n    }\n\n    // eslint-disable-next-line no-eval\n    const botPackage = eval('require')(packagePath)\n\n    let deps = botPackage.dependencies || {}\n    if (isDeveloping) {\n      deps = _.merge(deps, botPackage.devDependencies || {})\n    }\n\n    return _.reduce(\n      deps,\n      (result, value, key) => {\n        if (!util.isBotpressPackage(key)) {\n          return result\n        }\n        const entry = resolveFromDir(projectLocation, key)\n        if (!entry) {\n          return result\n        }\n        const root = resolveModuleRootPath(entry)\n        if (!root) {\n          return result\n        }\n\n        // eslint-disable-next-line no-eval\n        const modulePackage = eval('require')(path.join(root, 'package.json'))\n        if (!modulePackage.botpress) {\n          return result\n        }\n\n        return (\n          result.push({\n            name: key,\n            root: root,\n            homepage: modulePackage.homepage,\n            settings: modulePackage.botpress,\n            version: modulePackage.version,\n            entry: entry\n          }) && result\n        )\n      },\n      []\n    )\n  }\n\n  const listInstalledModules = () => {\n    const packagePath = resolveProjectFile('package.json', projectLocation, true)\n    const { dependencies } = JSON.parse(fs.readFileSync(packagePath))\n    const prodDeps = _.keys(dependencies)\n\n    return _.filter(prodDeps, util.isBotpressPackage)\n  }\n\n  const getRandomCommunityHero = Promise.method(() =>\n    axios\n      .get('https://api.github.com/repos/botpress/botpress/contributors')\n      .then(({ data: contributors }) => {\n        const { login: username, html_url: github, avatar_url: avatar, contributions } = _.sample(contributors)\n        return { username, github, avatar, contributions, module: 'botpress' }\n      })\n      .catch(() =>\n        Promise.resolve({\n          username: 'danyfs',\n          github: 'https://github.com/danyfs',\n          avatar: 'https://avatars1.githubusercontent.com/u/5629987?v=3',\n          contributions: 'many',\n          module: 'botpress'\n        })\n      )\n  )\n\n  return {\n    getRandomCommunityHero,\n    listInstalled: listInstalledModules,\n    _scan: scanModules,\n    _load: loadModules\n  }\n}\n","module.exports = require(\"prompt-confirm\");","module.exports = require(\"child_process\");","module.exports = require(\"knex\");","module.exports = require(\"prompt\");","import _ from 'lodash'\n\nexport const validateFlowSchema = flow => {\n  const errorPrefix = `[Flow] Invalid flow \"${flow && flow.location}\"`\n\n  if (!flow || !_.isObjectLike(flow)) {\n    return 'Invalid JSON flow schema'\n  }\n\n  if (!flow.version || !_.isString(flow.version)) {\n    return `${errorPrefix}, expected valid version but found none`\n  }\n\n  if (!flow.version.startsWith('0.')) {\n    return `${errorPrefix}, unsupported version of the schema \"${flow.version}\"`\n  }\n\n  if (!_.isString(flow.startNode)) {\n    return `${errorPrefix}, expected valid 'startNode'`\n  }\n\n  if (!_.isArray(flow.nodes)) {\n    return `${errorPrefix}, expected 'nodes' to be an array of nodes`\n  }\n\n  if (!_.find(flow.nodes, { name: flow.startNode })) {\n    return `${errorPrefix}, expected 'startNode' to point to a valid node name`\n  }\n\n  if (flow.catchAll && flow.catchAll.onEnter) {\n    return `${errorPrefix}, \"catchAll\" does not support \"onEnter\"`\n  }\n\n  for (const node of flow.nodes) {\n    if (!_.isString(node.id) || node.id.length <= 3) {\n      return `${errorPrefix}, expected node ${node.id} (${node.name}) to have a valid id`\n    }\n  }\n}\n","module.exports = require(\"yn\");","module.exports = require(\"eventemitter2\");","module.exports = require(\"json5\");","module.exports = require(\"mustache\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"joi\");","module.exports = require(\"winston\");","import path from 'path'\n\nexport const normalizeFolder = projectLocation => folder => {\n  const folderPath = path.resolve(projectLocation, folder)\n  return {\n    folderPath,\n    normalizedFolderName: path.relative(projectLocation, folderPath)\n  }\n}\n","import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\nimport glob from 'glob'\n\nimport get from 'lodash/get'\nimport partition from 'lodash/partition'\nimport mapValues from 'lodash/mapValues'\nimport uniq from 'lodash/uniq'\n\nimport createTransparent from './transparent'\nimport { normalizeFolder as _normalizeFolder } from './util'\nimport { safeId } from '../util'\n\nPromise.promisifyAll(fs)\nconst globAsync = Promise.promisify(glob)\n\nconst REVISIONS_FILE_NAME = '.ghost-revisions'\n\nmodule.exports = ({ logger, db, projectLocation, enabled }) => {\n  if (!enabled) {\n    return createTransparent({ logger, projectLocation })\n  }\n\n  const normalizeFolder = _normalizeFolder(projectLocation)\n\n  const pendingRevisionsByFolder = {}\n  const trackedFolders = []\n  const folderOptions = {}\n\n  const upsert = ({ knex, tableName, where, data, idField = 'id', trx = null }) => {\n    const prepareQuery = () => (trx ? knex(tableName).transacting(trx) : knex(tableName))\n    return prepareQuery()\n      .where(where)\n      .select(idField)\n      .then(res => {\n        const id = get(res, '0.id')\n        return id\n          ? prepareQuery()\n              .where(idField, id)\n              .update(data)\n              .thenReturn(id)\n          : prepareQuery()\n              .insert({ ...where, ...data }, 'id')\n              .then(([insertedId]) => insertedId)\n      })\n  }\n\n  const recordFile = async (folderPath, folder, file, { isBinary = false } = {}) => {\n    const knex = await db.get()\n    const filePath = path.join(folderPath, file)\n    const column = isBinary ? 'binary_content' : 'content'\n    await fs.readFileAsync(filePath, isBinary ? null : 'utf8').then(content =>\n      upsert({\n        knex,\n        tableName: 'ghost_content',\n        where: { folder, file },\n        data: { [column]: content }\n      })\n    )\n  }\n\n  const getPendingRevisions = async normalizedFolderName => {\n    const knex = await db.get()\n\n    return knex('ghost_revisions')\n      .join('ghost_content', 'ghost_content.id', '=', 'ghost_revisions.content_id')\n      .where('ghost_content.folder', normalizedFolderName)\n      .select(\n        'ghost_content.file',\n        'ghost_revisions.id',\n        'ghost_revisions.revision',\n        'ghost_revisions.created_on',\n        'ghost_revisions.created_by'\n      )\n      .orderBy('ghost_revisions.created_on', 'desc')\n      .then()\n  }\n\n  const addRootFolder = async (rootFolder, options = {}) => {\n    const { folderPath, normalizedFolderName } = normalizeFolder(rootFolder)\n    const { isBinary = false, filesGlob = '**/*' } = options\n\n    logger.debug(`[Ghost Content Manager] adding folder ${normalizedFolderName}`)\n    trackedFolders.push(normalizedFolderName)\n    folderOptions[normalizedFolderName] = options\n\n    // read known revisions\n    const revisionsFile = path.join(folderPath, REVISIONS_FILE_NAME)\n    const fileRevisionsPromise = fs\n      .readFileAsync(revisionsFile, 'utf8')\n      .catch({ code: 'ENOENT' }, () => '')\n      .then(content =>\n        content\n          .trim()\n          .split('\\n')\n          .map(s => s.trim())\n          .filter(s => !!s && !s.startsWith('#'))\n          .reduce((acc, r) => {\n            acc[r] = true\n            return acc\n          }, {})\n      )\n\n    const [knownRevisions, dbRevisions] = await Promise.all([\n      fileRevisionsPromise,\n      getPendingRevisions(normalizedFolderName)\n    ])\n\n    const [revisionsToDelete, remainingRevisions] = partition(dbRevisions, ({ revision }) => knownRevisions[revision])\n\n    const knex = await db.get()\n\n    // cleanup known revisions\n    if (revisionsToDelete.length) {\n      logger.debug(\n        `[Ghost Content Manager] ${normalizedFolderName}: deleting ${revisionsToDelete.length} known revision(s).`\n      )\n      await knex('ghost_revisions')\n        .whereIn('id', revisionsToDelete.map(({ id }) => id))\n        .del()\n    }\n\n    if (remainingRevisions.length) {\n      logger.debug(`[Ghost Content Manager] ${normalizedFolderName}: ${remainingRevisions.length} pending revision(s).`)\n      // record remaining revisions if any\n      pendingRevisionsByFolder[normalizedFolderName] = remainingRevisions\n      return\n    }\n\n    logger.debug(\n      `[Ghost Content Manager] ${normalizedFolderName} has no pending revisions, updating DB from the file system.`\n    )\n    // otherwise update the content in the DB\n    const files = await globAsync(filesGlob, { cwd: folderPath })\n    await Promise.map(files, file => recordFile(folderPath, normalizedFolderName, file, { isBinary }))\n    // and also delete the files no longer in the FS\n    await knex('ghost_content')\n      .whereNotIn('file', files)\n      .andWhere('folder', normalizedFolderName)\n      .del()\n      .then()\n  }\n\n  const updatePendingForFolder = async normalizedFolderName => {\n    pendingRevisionsByFolder[normalizedFolderName] = await getPendingRevisions(normalizedFolderName)\n\n    if (!pendingRevisionsByFolder[normalizedFolderName].length) {\n      delete pendingRevisionsByFolder[normalizedFolderName]\n    }\n  }\n\n  const updatePendingForAllFolders = () => Promise.each(trackedFolders, updatePendingForFolder)\n\n  const recordRevision = (knex, content_id, trx) =>\n    knex('ghost_revisions')\n      .transacting(trx)\n      .insert({ content_id, revision: safeId(), created_by: 'admin' })\n\n  const upsertFile = async (rootFolder, file, content) => {\n    const knex = await db.get()\n\n    const folder = normalizeFolder(rootFolder).normalizedFolderName\n    const { isBinary } = folderOptions[folder]\n    const column = isBinary ? 'binary_content' : 'content'\n\n    if (\n      await knex('ghost_content')\n        .where({ folder, file, [column]: content })\n        .count('id as count')\n        .then(([res]) => Number(res.count) > 0)\n    ) {\n      return Promise.resolve()\n    }\n\n    return knex.transaction(trx => {\n      upsert({\n        knex,\n        tableName: 'ghost_content',\n        where: { folder, file },\n        data: { [column]: content },\n        trx\n      })\n        .then(content_id => recordRevision(knex, content_id, trx))\n        .then(trx.commit)\n        .then(() => updatePendingForFolder(folder))\n        .catch(err => {\n          logger.error('[Ghost Content Manager]', err)\n          trx.rollback()\n        })\n    })\n  }\n\n  const revertAllPendingChangesForFile = async (folder, file) => {\n    const knex = await db.get()\n\n    const { folderPath, normalizedFolderName } = normalizeFolder(folder)\n    const filePath = path.join(folderPath, file)\n    const { isBinary = false } = folderOptions[normalizedFolderName]\n\n    await knex('ghost_revisions')\n      .whereIn('id', function() {\n        // Subquery because SQLite doesn't support delete with joins\n        this.select('ghost_revisions.id')\n          .from('ghost_revisions')\n          .join('ghost_content', 'ghost_content.id', '=', 'ghost_revisions.content_id')\n          .where('folder', folder)\n          .andWhere('file', file)\n      })\n      .del()\n\n    await updatePendingForFolder(folder)\n\n    if (fs.existsSync(filePath)) {\n      // If the file exists on disk, this means it was initially source controlled\n      recordFile(folderPath, folder, file, { isBinary })\n    } else {\n      await knex('ghost_content')\n        .where('folder', folder)\n        .andWhere('file', file)\n        .del()\n    }\n  }\n\n  const readFile = async (rootFolder, file) => {\n    const knex = await db.get()\n    const { normalizedFolderName } = normalizeFolder(rootFolder)\n    const { isBinary } = folderOptions[normalizedFolderName] || {}\n    const column = isBinary ? 'binary_content' : 'content'\n\n    return knex('ghost_content')\n      .select(column)\n      .where({ folder: normalizedFolderName, file })\n      .then(results => {\n        if (!results || !results.length) {\n          return null\n        }\n        const result = results[0]\n        return (result && result[column]) || null\n      })\n  }\n\n  const deleteFile = async (rootFolder, file) => {\n    const knex = await db.get()\n    const { normalizedFolderName } = normalizeFolder(rootFolder)\n\n    const id = get(\n      await knex('ghost_content')\n        .where({ folder: normalizedFolderName, file, deleted: 0 })\n        .select('id'),\n      '0.id'\n    )\n\n    if (!id) {\n      throw new Error(`Can't delete file: ${file}: couldn't find it in folder: ${normalizedFolderName}`)\n    }\n\n    return knex.transaction(trx => {\n      knex('ghost_content')\n        .transacting(trx)\n        .where({ id })\n        .update({ deleted: 1, content: null, binary_content: null })\n        .then(() => recordRevision(knex, id, trx))\n        .then(trx.commit)\n        .then(() => updatePendingForFolder(normalizedFolderName))\n        .catch(err => {\n          logger.error('[Ghost Content Manager]', err)\n          trx.rollback()\n        })\n    })\n  }\n\n  const directoryListing = async (rootFolder, fileEndingPattern = '', pathsToOmit = []) => {\n    const knex = await db.get()\n    const { normalizedFolderName } = normalizeFolder(rootFolder)\n    return knex('ghost_content')\n      .select('file')\n      .whereNotIn('file', pathsToOmit)\n      .andWhere({ folder: normalizedFolderName, deleted: 0 })\n      .andWhere('file', 'like', `%${fileEndingPattern}`)\n      .then(res => res.map(row => row.file))\n  }\n\n  const getPending = () => pendingRevisionsByFolder\n\n  const getPendingWithContentForFolder = ({ stringifyBinary = false }) => async (folderInfo, normalizedFolderName) => {\n    const revisions = folderInfo.map(({ revision }) => revision)\n    const fileNames = uniq(folderInfo.map(({ file }) => file))\n    const { isBinary } = folderOptions[normalizedFolderName]\n    const column = isBinary ? 'binary_content' : 'content'\n\n    const knex = await db.get()\n    const files = await knex('ghost_content')\n      .select('file', column, 'deleted')\n      .whereIn('file', fileNames)\n      .andWhere({ folder: normalizedFolderName })\n\n    if (isBinary) {\n      files.forEach(data => {\n        data.content = stringifyBinary ? data.binary_content.toString('base64') : data.binary_content\n        delete data.binary_content\n      })\n    }\n\n    return {\n      files,\n      revisions,\n      binary: isBinary\n    }\n  }\n\n  const getPendingWithContent = ({ stringifyBinary = false } = {}) =>\n    Promise.props(mapValues(pendingRevisionsByFolder, getPendingWithContentForFolder({ stringifyBinary })))\n\n  logger.info('[Ghost Content Manager] Initialized')\n\n  return {\n    addRootFolder,\n    upsertFile,\n    readFile,\n    deleteFile,\n    directoryListing,\n    getPending,\n    getPendingWithContent,\n    revertAllPendingChangesForFile\n  }\n}\n\n// TODO: switch to ES6 modules\nmodule.exports.REVISIONS_FILE_NAME = REVISIONS_FILE_NAME\n","module.exports = require(\"lodash/mapValues\");","module.exports = require(\"lodash/get\");","import fs from 'fs'\nimport path from 'path'\nimport Promise from 'bluebird'\nimport prompt from 'prompt'\nimport chalk from 'chalk'\nimport validUrl from 'valid-url'\nimport axios from 'axios'\nimport Confirm from 'prompt-confirm'\nimport mkdirp from 'mkdirp'\nimport os from 'os'\nimport get from 'lodash/get'\n\nimport util from '../util'\n\nconst AUTH_FILE = '.auth.json'\n\n// TODO: this part replicates `start.js`, refactor later\nconst getDataDir = () => {\n  const projectPath = path.resolve('.')\n\n  const botfile = path.join(projectPath, 'botfile.js')\n  if (!fs.existsSync(botfile)) {\n    util.print.error(`(fatal) No ${chalk.bold('botfile.js')} file found at: ` + botfile)\n    process.exit(1)\n  }\n\n  // eslint-disable-next-line no-eval\n  const bf = eval('require')(botfile)\n  return util.getDataLocation(bf.dataDir, projectPath)\n}\n\nconst getCloudAuthFile = () => path.join(os.homedir(), '.botpress', AUTH_FILE)\nconst getAuthFile = () => path.join(getDataDir(), AUTH_FILE)\n\nconst readJsonFile = file => {\n  try {\n    const json = fs.readFileSync(file, 'utf-8')\n    return JSON.parse(json)\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      util.print.warn(err.message || 'Unknown error', `while reading ${file}.`)\n    }\n  }\n  return {}\n}\n\nconst writeJsonFile = (file, content) => {\n  mkdirp.sync(path.dirname(file))\n  fs.writeFileSync(file, JSON.stringify(content, null, 2))\n}\n\nconst readBotAuth = () => readJsonFile(getAuthFile())\nconst readCloudAuth = () => readJsonFile(getCloudAuthFile())\nconst writeBotAuth = auth => writeJsonFile(getAuthFile(), auth)\nconst writeCloudAuth = auth => writeJsonFile(getCloudAuthFile(), auth)\n\nconst AUTH_DISABLED = '[AUTH DISABLED]'\n\nconst refreshToken = async botUrl => {\n  const auth = readBotAuth()\n  const token = auth[botUrl]\n\n  // this method is only called if the auth is enabled\n  // in which case it doesn't make sense even to try refreshing the fake token\n  // we might have saved before when the auth was disabled on this server\n  if (!token || token === AUTH_DISABLED) {\n    return\n  }\n\n  try {\n    const response = await axios.request({\n      url: `${botUrl}/api/auth/refresh_token`,\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n    return response.data\n  } catch (err) {\n    return null\n  }\n}\n\nconst doRootLogin = async botUrl => {\n  // try refreshing token before attempting the new login\n  const token = await refreshToken(botUrl)\n  if (token) {\n    return { token, kind: 'refresh' }\n  }\n\n  const schema = {\n    properties: {\n      user: {\n        description: chalk.white('User:'),\n        required: true\n      },\n      password: {\n        description: chalk.white('Password:'),\n        hidden: true,\n        required: true\n      }\n    }\n  }\n\n  prompt.message = ''\n  prompt.delimiter = ''\n  prompt.start()\n\n  const { user, password } = await Promise.fromCallback(cb => prompt.get(schema, cb))\n  const result = await axios.post(`${botUrl}/api/login`, { user, password })\n\n  if (result.data.success) {\n    return { token: result.data.token, kind: 'login' }\n  }\n  throw new Error(result.data.reason)\n}\n\nconst doCloudLogin = async (botUrl, botInfo) => {\n  const userAuthUrl = `${botInfo.endpoint}/me/cli`\n  const loginUrl = `${botInfo.endpoint}/api/login/bot/${botInfo.botId}/${botInfo.botEnv}`\n\n  const cloudAuth = readCloudAuth()\n\n  if (!cloudAuth[botInfo.endpoint]) {\n    const schema = {\n      properties: {\n        token: {\n          description: chalk.white('API Token:'),\n          required: true\n        }\n      }\n    }\n\n    prompt.message = `You need to authenticate using Botpress Cloud for this bot.\\r\\nPlease visit ${userAuthUrl} and copy/paste your API token here.\\r\\n`\n    prompt.delimiter = ''\n    prompt.start()\n    const { token: apiToken } = await Promise.fromCallback(cb => prompt.get(schema, cb))\n\n    if (!apiToken.startsWith('cli__')) {\n      throw new Error('Invalid API Token, expected token starting with \"cli__\"')\n    }\n\n    cloudAuth[botInfo.endpoint] = apiToken\n    writeCloudAuth(cloudAuth)\n  }\n\n  try {\n    const authorization = `Bearer ${cloudAuth[botInfo.endpoint]}`\n    const { data } = await axios.get(loginUrl, { headers: { authorization } })\n    return { token: get(data, 'payload.token'), kind: 'refresh' }\n  } catch (err) {\n    delete cloudAuth[botInfo.endpoint]\n    writeCloudAuth(cloudAuth)\n    const msg = get(err, 'response.data.message') || err.message\n    throw new Error('Could not authenticate to bot using Botpress Cloud, please try again. (' + msg + ')')\n  }\n}\n\nconst doLogin = async botUrl => {\n  const res = await axios.get(`${botUrl}/api/auth/info`)\n\n  const data = res.data || {}\n\n  if (!data.type === 'none') {\n    return { token: AUTH_DISABLED, kind: 'no-auth' }\n  } else if (data.type === 'cloud') {\n    return doCloudLogin(botUrl, data)\n  } else if (data.type === 'root') {\n    return doRootLogin(botUrl)\n  } else {\n    throw new Error('Unknown login type: ' + data.type)\n  }\n}\n\nexports.login = async botUrl => {\n  botUrl = botUrl.replace(/\\/+$/, '')\n\n  if (!validUrl.isUri(botUrl)) {\n    util.print.error(`Doesn't look like valid URL: ${botUrl}`)\n    return\n  }\n\n  try {\n    const { token, kind } = await doLogin(botUrl)\n    const auth = readBotAuth()\n    auth[botUrl] = token\n    writeBotAuth(auth)\n    if (kind === 'login') {\n      util.print.success(`Logged in successfully. Auth token saved in ${getAuthFile()}.`)\n    } else if (kind === 'refresh') {\n      util.print.success(`Auth token refreshed and saved in ${getAuthFile()}.`)\n    } else if (kind === 'no-auth') {\n      util.print.info(`Auth is disabled at ${botUrl}, no need to login.`)\n    }\n    return token\n  } catch (err) {\n    util.print.error(err.message || 'Unknown')\n    return\n  }\n}\n\nexports.logout = botUrl => {\n  if (!botUrl) {\n    new Confirm(\"You're about to delete all saved auth tokens in the current folder. Are you sure?\")\n      .run()\n      .then(answer => {\n        if (!answer) {\n          return\n        }\n        writeBotAuth({})\n        writeCloudAuth({})\n      })\n\n    return\n  }\n\n  botUrl = botUrl.replace(/\\/+$/, '')\n  const auth = readBotAuth()\n  if (!auth[botUrl]) {\n    util.print.warn(`No saved token for ${botUrl}, nothing to do.`)\n    return\n  }\n\n  delete auth[botUrl]\n  writeBotAuth(auth)\n  util.print.success('Logged out successfully.')\n}\n","/**\n * The KVS (Key-Value Store) serves as a convenient, high-level data storing mechanism.\n * The KVS is an abstraction layer on top of the configured [Botpress Database]{@link Database}\n * @public\n * @namespace KVS\n * @example\n * bp.kvs\n * bp.db.kvs // ⚠️ Deprecated, will be removed in Botpress 11\n */\n\nimport Promise from 'bluebird'\nimport _ from 'lodash'\n\nimport helpers from './helpers'\n\n/*\n  Possible options:\n    - betweenGetAndSetCallback: will be called between the get and the set\n    and wait for promise to resolve\n    - tableName: overrides the KVS table's name\n*/\nmodule.exports = (knex, options = {}) => {\n  const getSetCallback = options.betweenGetAndSetCallback || (() => Promise.resolve())\n  const tableName = options.tableName || 'kvs'\n\n  const upsert = (key, value) => {\n    let sql\n\n    const params = {\n      tableName,\n      keyCol: 'key',\n      valueCol: 'value',\n      modifiedOnCol: 'modified_on',\n      key,\n      value: JSON.stringify(value),\n      now: helpers(knex).date.now()\n    }\n\n    if (helpers(knex).isLite()) {\n      sql = `\n        INSERT OR REPLACE INTO :tableName: (:keyCol:, :valueCol:, :modifiedOnCol:)\n        VALUES (:key, :value, :now)\n      `\n    } else {\n      sql = `\n        INSERT INTO :tableName: (:keyCol:, :valueCol:, :modifiedOnCol:)\n        VALUES (:key, :value, :now)\n        ON CONFLICT (:keyCol:) DO UPDATE\n          SET :valueCol: = :value, :modifiedOnCol: = :now\n      `\n    }\n\n    return knex.raw(sql, params)\n  }\n\n  /**\n   * Returns the unserialized value stored at a given key\n   * @param  {String} key  The unique key where you want to get the value at\n   * @param  {String=} [path] If specified, returns the value at the path inside the retrieved object (if stored object was an object).\n   * @return {?*} Returns the unserialized object of any type stored at that key or null if it doesn't exist\n   * @example\n   * // Assuming 'user001' is an Object like `{ profile: { first_name: \"Sylvain\" } }`\n   * const first_name = await bp.kvs.get('user001', 'profile.first_name')\n   * const fullUser = await bp.kvs.get('user001')\n   *\n   * // You can also retrieve array elements\n   * const first_subscriber = await bp.kvs.get('subscribers', '[0].name')\n   * @memberOf! KVS\n   * @async\n   */\n  const get = (key, path) => {\n    return knex(tableName)\n      .where({ key })\n      .limit(1)\n      .then()\n      .get(0)\n      .then(row => {\n        if (!row) {\n          return null\n        }\n\n        const obj = JSON.parse(row.value)\n        if (!path) {\n          return obj\n        }\n\n        return _.at(obj, [path])[0]\n      })\n  }\n\n  /**\n   * Serializes and stores any value at the specified key, and optionally set a value inside an existing object at `path`.\n   * @param  {String} key   The unique key of the value you want to store\n   * @param  {*} value The value to store. Note that if you provide an object or array, it will be serialized to JSON automatically.\n   * Therefore, you have to make sure that your object is serializable (i.e. it has no circular references)\n   * @param  {String=} [path]  The path inside the object to set the value (see example)\n   * @example\n   * const user = { profile: { name: 'Sylvain' } }\n   * await bp.kvs.set('user001', user)\n   *\n   * // You can later overwrite the `name` property directly\n   * await bp.kvs.set('user001', 'Sylvain Perron', 'name')\n   * @async\n   * @memberof! KVS\n   */\n  const set = (key, value, path) => {\n    if (!path) {\n      return upsert(key, value)\n    }\n\n    const setValue = obj => {\n      if (path) {\n        _.set(obj, path, value)\n        return obj\n      } else {\n        return value\n      }\n    }\n\n    return get(key).then(original => {\n      return getSetCallback().then(() => {\n        if (!_.isNil(original)) {\n          return upsert(key, setValue(Object.assign({}, original)))\n        } else {\n          return upsert(key, setValue({}))\n        }\n      })\n    })\n  }\n\n  const bootstrap = () =>\n    helpers(knex).createTableIfNotExists(tableName, table => {\n      table.string('key').primary()\n      table.text('value')\n      table.timestamp('modified_on')\n    })\n\n  return { get, set, bootstrap }\n}\n","import Knex from 'knex'\nimport path from 'path'\nimport fs from 'fs'\n\nimport kvs from '../../database/kvs'\nimport util from '../../util'\n\nfunction dropTableIfExists(knex, tableName) {\n  return knex.schema.hasTable(tableName).then(has => {\n    if (has) {\n      return knex.schema.dropTable(tableName)\n    }\n  })\n}\n\nfunction migrate_database_schema(dbLocation) {\n  const updateUsers = `strftime('%Y-%m-%dT%H:%M:%fZ', created_on/1000, 'unixepoch')`\n\n  const knex = Knex({\n    client: 'sqlite3',\n    connection: { filename: dbLocation },\n    useNullAsDefault: true\n  })\n\n  return knex.schema\n    .table('users', function(table) {\n      table.string('picture_url')\n      table.string('first_name')\n      table.string('last_name')\n    })\n    .then(() => knex('users').update({ created_on: knex.raw(updateUsers) }))\n    .then(rows => {\n      util.print('info', 'Updated ' + rows + ' users')\n      util.print(\n        'warn',\n        'Users table was migrated to new schema but existing ' +\n          'users will miss the following fields: `picture_url`, `first_name`, ' +\n          '`last_name`. They have been left to `null`.'\n      )\n    })\n    .catch(() => {\n      util.print('warn', 'Did not migrate table `users` as schema was already up to date')\n    })\n    .then(() => kvs(knex).bootstrap())\n    .catch(() => {\n      util.print('warn', 'Did not create table `kvs` as schema was already up to date')\n    })\n    .then(() => {\n      if (!process.env.DELETE_TABLES) {\n        util.print(\n          'warn',\n          'This migration must delete the tables of ' +\n            'the following modules: `botpress-scheduler`, `botpress-analytics`, ' +\n            '`botpress-hitl` and `botpress-subscription`.'\n        )\n\n        util.print(\n          'warn',\n          \"This step has been skipped because you didn't provide \" + 'the DELETE_TABLES=true environement variable.'\n        )\n\n        util.print('warn', 'Please backup your data if necessary then re-run with DELETE_TABLES=true')\n        return false\n      }\n\n      return dropTableIfExists(knex, 'analytics_interactions')\n        .then(() => dropTableIfExists(knex, 'analytics_runs'))\n        .then(() => dropTableIfExists(knex, 'broadcast_outbox'))\n        .then(() => dropTableIfExists(knex, 'broadcast_schedules'))\n        .then(() => dropTableIfExists(knex, 'hitl_messages'))\n        .then(() => dropTableIfExists(knex, 'hitl_sessions'))\n        .then(() => dropTableIfExists(knex, 'subscription_users'))\n        .then(() => dropTableIfExists(knex, 'subscriptions'))\n        .then(() => dropTableIfExists(knex, 'scheduler_schedules'))\n        .then(() => dropTableIfExists(knex, 'scheduler_tasks'))\n        .then(() => util.print('info', 'Dropped module tables'))\n    })\n}\n\nfunction migrate_botfile(botfilePath) {\n  const before = fs.readFileSync(botfilePath).toString()\n\n  if (before.indexOf('postgres:') >= 0) {\n    util.print(\n      'warn',\n      'Did not migrate botfile as it seemed like `postgres`' +\n        ' was already present. Please migrate manually if this is a mistake.'\n    )\n    return false\n  }\n\n  const after = before.replace(\n    /module\\.exports.*?=.*?{/i,\n    `module.exports = {\n\n  /**\n  * Postgres configuration\n  */\n  postgres: {\n    enabled: process.env.DATABASE === 'postgres',\n    host: process.env.PG_HOST || '127.0.0.1',\n    port: process.env.PG_PORT || 5432,\n    user: process.env.PG_USER || '',\n    password: process.env.PG_PASSWORD || '',\n    database: process.env.PG_DB || ''\n  },`\n  )\n\n  fs.writeFileSync(botfilePath, after)\n\n  util.print('info', 'Updated botfile')\n}\n\nmodule.exports = bot_path => {\n  const botfilePath = path.join(bot_path, 'botfile.js')\n  // eslint-disable-next-line no-eval\n  const botfile = eval('require')(botfilePath)\n  const dbLocation = path.resolve(path.join(bot_path, botfile.dataDir, 'db.sqlite'))\n\n  return migrate_database_schema(dbLocation).then(() => migrate_botfile(botfilePath))\n}\n","var map = {\n\t\"./0.1\": 38,\n\t\"./0.1.js\": 38\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 39;","const database = require('./database/helpers')\n\nmodule.exports = { database }\n","module.exports = require(\"crypto\");","module.exports = require(\"multer\");","import _ from 'lodash'\nimport nanoid from 'nanoid'\nimport multer from 'multer'\nimport moment from 'moment'\n\nimport util from '../util'\n\nlet logsSecret = nanoid()\n\nmodule.exports = (bp, app) => {\n  // modules\n\n  app.secure('read', 'bot.modules.list').get('/api/modules', (req, res) => {\n    const modules = _.map(bp._loadedModules, module => {\n      return {\n        name: util.getModuleShortname(module.name),\n        fullName: module.name,\n        homepage: module.homepage,\n        isPlugin: module.settings.isPlugin,\n        menuText: module.settings.menuText || module.name,\n        menuIcon: module.settings.menuIcon || 'view_module',\n        noInterface: !!module.settings.noInterface,\n        moduleView: module.settings.moduleView || { stretched: false },\n        plugins: module.settings.plugins || []\n      }\n    })\n    res.send(modules)\n  })\n\n  app.secure('read', 'bot.modules.list.community').get('/api/module/hero', (req, res) => {\n    bp.modules.getRandomCommunityHero().then(hero => res.send(hero))\n  })\n\n  app.secure('read', 'bot.modules.list.community').get('/api/bot/contributor', (req, res) => {\n    res.send(bp.bot.getContributor())\n  })\n\n  // middleware\n\n  app.secure('read', 'bot.middleware.list').get('/api/middlewares', (req, res) => {\n    res.send(bp.middlewares.list())\n  })\n\n  app.secure('write', 'bot.middleware.customizations').post('/api/middlewares/customizations', (req, res) => {\n    bp.stats.track('api', 'middlewares', 'customizations')\n    const { middlewares } = req.body\n    bp.middlewares.setCustomizations(middlewares)\n    bp.middlewares.load()\n    res.send(bp.middlewares.list())\n  })\n\n  app.secure('write', 'bot.middleware.customizations').delete('/api/middlewares/customizations', (req, res) => {\n    bp.stats.track('api', 'middlewares', 'customizations')\n    bp.middlewares.resetCustomizations()\n    bp.middlewares.load()\n    res.send(bp.middlewares.list())\n  })\n\n  // notifications\n\n  // DEPRECATED in Botpress 1.1\n  app.secure('read', 'bot.notifications').get('/api/notifications', async (req, res) => {\n    res.send(await bp.notifications.getInbox())\n  })\n\n  app.secure('read', 'bot.notifications').get('/api/notifications/inbox', async (req, res) => {\n    res.send(await bp.notifications.getInbox())\n  })\n\n  // bot\n\n  app.secure('read', 'bot.information').get('/api/bot/information', (req, res) => {\n    res.send(bp.about.getBotInformation())\n  })\n\n  app.secure('write', 'bot.information.license').post('/api/license', (req, res) => {\n    bp.stats.track('api', 'license', 'change')\n    bp.licensing\n      .changeLicense(req.body.license)\n      .then(() => {\n        res.sendStatus(200)\n      })\n      .catch(err =>\n        res.status(500).send({\n          message: err && err.message\n        })\n      )\n  })\n\n  app.secure('read', 'bot.logs').get('/api/logs', (req, res) => {\n    bp.logger\n      .queryDb((req.query && req.query.limit) || 50)\n      .then(results => {\n        res.send(results)\n      })\n      .catch(err => {\n        console.log(err)\n      })\n  })\n\n  app.secure('read', 'bot.logs').get('/api/logs/key', (req, res) => {\n    res.send({ secret: logsSecret })\n  })\n\n  app.secure('read', 'bot.logs.archive').get('/api/logs/archive/:key', (req, res) => {\n    bp.stats.track('api', 'logs', 'archive')\n    if (req.params.key !== logsSecret) {\n      return res.sendStatus(403)\n    }\n\n    bp.logger\n      .queryDb(null, 'asc')\n      .then(results => {\n        logsSecret = nanoid()\n        res.setHeader('Content-type', 'text/plain')\n        res.setHeader('Content-disposition', 'attachment; filename=logs.txt')\n        res.send(\n          results\n            .map(({ timestamp, level, message }) => {\n              const time = moment(new Date(timestamp)).format('MMM DD HH:mm:ss')\n              return `${time} ${level}: ${message}`\n            })\n            .join('\\n')\n        )\n      })\n      .catch(err => {\n        console.error(err)\n        res.sendStatus(500)\n      })\n  })\n\n  app.secure('read', 'bot.content').get('/api/content/categories', async (req, res) => {\n    res.send(await bp.contentManager.listAvailableCategories())\n  })\n\n  app.secure('read', 'bot.content').get('/api/content/items', async (req, res) => {\n    const from = req.query.from || 0\n    const count = req.query.count || 50\n    let { searchTerm, categoryId, orderBy } = req.query\n\n    if (categoryId === 'all') {\n      categoryId = null\n    }\n\n    res.send(await bp.contentManager.listCategoryItems(categoryId, { from, count, searchTerm, orderBy }))\n  })\n\n  app.secure('read', 'bot.content').get('/api/content/items/count', async (req, res) => {\n    let { categoryId } = req.query\n    if (categoryId === 'all') {\n      categoryId = null\n    }\n    res.send({ count: await bp.contentManager.categoryItemsCount(categoryId) })\n  })\n\n  app.secure('read', 'bot.content').get('/api/content/items/:id', async (req, res) => {\n    res.send(await bp.contentManager.getItem(req.params.id))\n  })\n\n  app.secure('read', 'bot.content').get('/api/content/items-batched/:ids', async (req, res) => {\n    res.send(await bp.contentManager.getItems(req.params.ids))\n  })\n\n  app.secure('write', 'bot.content').post('/api/content/categories/:id/items', async (req, res) => {\n    res.send(\n      await bp.contentManager.createOrUpdateCategoryItem({\n        formData: req.body.formData,\n        categoryId: req.params.id\n      })\n    )\n  })\n\n  app.secure('write', 'bot.content').post('/api/content/categories/:id/items/:itemId', async (req, res) => {\n    await bp.contentManager.createOrUpdateCategoryItem({\n      itemId: req.params.itemId,\n      formData: req.body.formData,\n      categoryId: req.params.id\n    })\n    res.sendStatus(200)\n  })\n\n  app.secure('write', 'bot.content').post('/api/content/categories/all/bulk_delete', async (req, res) => {\n    await bp.contentManager.deleteCategoryItems(req.body)\n    res.sendStatus(200)\n  })\n\n  app.secure('read', 'bot.ghost_content').get('/api/ghost_content/status', async (req, res) => {\n    res.send(await bp.ghostManager.getPending())\n  })\n\n  app.secure('read', 'bot.ghost_content').get('/api/ghost_content/export', async (req, res) => {\n    res.send(await bp.ghostManager.getPendingWithContent({ stringifyBinary: true }))\n  })\n\n  app.secure('write', 'bot.ghost_content').delete('/api/ghost_content/:folder', async (req, res) => {\n    res.send(await bp.ghostManager.revertAllPendingChangesForFile(req.params.folder, req.query.file))\n  })\n\n  const mediaUploadMulter = multer({\n    limits: {\n      fileSize: 1024 * 1000 * 10 // 100mb\n    }\n  })\n\n  app.secure('write', 'bot.media').post('/api/media', mediaUploadMulter.single('file'), async (req, res) => {\n    const filename = await bp.mediaManager.saveFile(req.file.originalname, req.file.buffer)\n    const url = `/media/${filename}`\n    return res.json({ url })\n  })\n\n  app.secure('read', 'bot.flows').get('/api/flows/all', async (req, res) => {\n    const flows = await bp.dialogEngine.getFlows()\n    res.send(flows)\n  })\n\n  app.secure('read', 'bot.flows').get('/api/flows/available_actions', async (req, res) => {\n    const actions = bp.dialogEngine.getAvailableActions()\n    res.send(actions)\n  })\n\n  app.secure('write', 'bot.flows').post('/api/flows/save', async (req, res) => {\n    await bp.dialogEngine.flowProvider.saveFlows(req.body)\n    res.sendStatus(200)\n  })\n\n  app.secure('write', 'bot.skills').post('/api/skills/:skillId/generate', async (req, res) => {\n    res.send(await bp.skills.generateFlow(req.params.skillId, req.body))\n  })\n\n  app.get('/api/community/hero', (req, res) => {\n    res.send({ hidden: _.get(bp, 'botfile.heroSection.hidden', false) })\n  })\n}\n","import fs from 'fs'\nimport path from 'path'\n\nimport util from '../util'\n\nmodule.exports = (bp, app) => {\n  app.get('/api/ping', (req, res) => {\n    res.send('pong')\n  })\n\n  app.get('/api/license', async (req, res) => {\n    res.send(await bp.licensing.getLicensing())\n  })\n\n  app.delete('/api/guided-tour', (req, res) => {\n    fs.unlink(path.join(bp.projectLocation, '.welcome'), () => {\n      bp.isFirstRun = false\n      res.sendStatus(200)\n    })\n  })\n\n  app.get('/api/my-account', async (req, res) => {\n    const roles = await bp.cloud.getUserRoles(req.user.roles)\n    res.send({ ...req.user, roles })\n  })\n}\n","module.exports = (bp, app) => {\n  app.get('/api/auth/info', async (req, res) => {\n    bp.stats.track('api', 'auth', 'info')\n    res.json(bp.security.getAuthenticationInfo())\n  })\n\n  app.post('/api/auth/refresh_token', async (req, res) => {\n    bp.stats.track('api', 'auth', 'refresh_token')\n    const result = await bp.security.refreshToken(req.headers.authorization)\n    if (result.success) {\n      res.send(result.token)\n    } else {\n      res.status(400).send(result.reason)\n    }\n  })\n\n  app.post('/api/login', async (req, res) => {\n    bp.stats.track('api', 'auth', 'login')\n    const result = await bp.security.login(req.body.user, req.body.password, req.ip)\n    res.send(result)\n  })\n}\n","module.exports = require(\"@botpress/util-roles\");","module.exports = require(\"query-string\");","module.exports = require(\"body-parser\");","import _ from 'lodash'\nimport bodyParser from 'body-parser'\nimport { Router } from 'express'\nimport qs from 'query-string'\nimport { checkMultipleRoles } from '@botpress/util-roles'\n\nimport anonymousApis from './anonymous'\nimport nonSecuredApis from './non-secured'\nimport securedApis from './secured'\n\nconst routersConditions = {}\nconst routers = {}\n\nconst maybeApply = (name, fn) => {\n  return (req, res, next) => {\n    const router = req.originalUrl.match(/\\/api\\/(botpress-[^\\/]+).*$/i)\n    if (!router) {\n      return fn(req, res, next)\n    }\n\n    if (!routersConditions[router[1]]) {\n      return fn(req, res, next)\n    }\n\n    const condition = routersConditions[router[1]][name]\n    if (condition === false) {\n      next()\n    } else if (typeof condition === 'function' && condition(req) === false) {\n      next()\n    } else {\n      return fn(req, res, next)\n    }\n  }\n}\n\nmodule.exports = bp => {\n  const _authenticationMiddleware = async (req, res, next) => {\n    res.maybeSendRequireLogin = () => {\n      if (!bp.botfile.login.enabled) {\n        res.status(400).send({\n          message: 'Login must be turned on for this API method'\n        })\n\n        return true\n      } else {\n        return false\n      }\n    }\n\n    if (!bp.botfile.login.enabled) {\n      return next()\n    }\n\n    const user = await bp.security.authenticate(req.headers.authorization)\n    if (!!user) {\n      req.user = user\n      next()\n    } else {\n      res\n        .status(401)\n        .location('/login')\n        .end()\n    }\n  }\n\n  const getCloudRoles = async req => {\n    const { useCloud, enabled } = bp.botfile.login\n    const isUsingCloud = !!useCloud && (await bp.cloud.isPaired())\n    if (!isUsingCloud || !enabled) {\n      // No cloud, skip check\n      return false\n    }\n    const { roles } = req.user || {}\n    if (!roles) {\n      return null\n    }\n    return bp.cloud.getUserRoles(roles)\n  }\n\n  const installProtector = app => {\n    app.secure = (operation, resource) => {\n      const wrap = method => (route, ...handlers) => {\n        const secureMiddleware = async (req, res, next) => {\n          try {\n            const roles = await getCloudRoles(req)\n\n            if (roles === false) {\n              return next()\n            }\n\n            if (!checkMultipleRoles(roles, operation, resource)) {\n              return res.sendStatus(403) // Forbidden\n            }\n\n            return next()\n          } catch (err) {\n            return res.status(500).send({ message: err.message })\n          }\n        }\n\n        return app[method](route, secureMiddleware, ...handlers)\n      }\n\n      return {\n        get: wrap('get'),\n        post: wrap('post'),\n        put: wrap('put'),\n        patch: wrap('patch'),\n        delete: wrap('delete')\n      }\n    }\n  }\n\n  const installRouter = app => {\n    /**\n     * Creates an HTTP [Express Router]{@link https://expressjs.com/} that is protected by authentication\n     * The router routes are available at \"http://bot_url/api/:name\"\n     * Where `name` is a string starting with `botpress-`\n     * @func\n     * @alias getRouter\n     * @memberOf! Botpress\n     * @param  {String} name       The name of the router. Must start with `botpress-`\n     * @param  {object=} [conditions] See examples. Conditionally disables built-in Botpress middlewares.\n     * @example\n     * const securedRouter = bp.getRouter('botpress-custom')\n     * const publicRouter = bp.getRouter('botpress-custom', { auth: false })\n     *\n     * // Conditions can also be used like below\n     * const conditions = { 'auth': req => !/\\/webhook/i.test(req.originalUrl) }\n     * const conditionalAuthentication = bp.getRouter('botpress-custom', conditions)\n     */\n    bp.getRouter = (name, conditions) => {\n      if (!/^botpress-/.test(name)) {\n        throw new Error(`The name of a router must start with 'botpress-'. Received: ${name}`)\n      }\n\n      if (!routers[name]) {\n        const router = Router()\n        routers[name] = router\n        app.use(`/api/${name}/`, router)\n      }\n\n      if (conditions) {\n        routersConditions[name] = Object.assign(routersConditions[name] || {}, conditions)\n      }\n\n      installProtector(routers[name])\n      return routers[name]\n    }\n\n    const links = {}\n\n    /**\n     * Creates a short link for a specific API route, making it easier to share, more verbose and elegant.\n     * Short links are available as `http://bot_url/s/{name}`\n     * @alias  createShortlink\n     * @param  {String} name        Unique, url-friendly name of the short link\n     * @param  {String} destination The original route to redirect to\n     * @param  {Object} params      Query parameters to pass the route. Will be serialized.\n     * @memberof! Botpress\n     * @example\n     *   const config = {\n  botName: 'Superbot',\n  botConvoDescription: \"Tell me something!\",\n  backgroundColor: '#ffffff'\n}\n\n// Visiting \"http://bot_url/s/chat\" will display the webchat in fullscreen\nbp.createShortlink('chat', '/lite', {\n  m: 'channel-web',\n  v: 'fullscreen',\n  options: JSON.stringify({ config: config })\n})\n     */\n    bp.createShortlink = (name, destination, params) => {\n      name = name.toLowerCase()\n\n      if (links[name]) {\n        throw new Error(`There's already a shortlink named \"${name}\"`)\n      }\n\n      const q = params ? '?' + qs.stringify(params) : ''\n      links[name] = `${destination}${q}`\n    }\n\n    app.get(`/s/:name`, (req, res) => {\n      const name = req.params.name.toLowerCase()\n\n      if (!links[name]) {\n        return res.status(404).send({ error: `Shortlink \"${name}\" not registered` })\n      }\n\n      res.redirect(links[name])\n    })\n  }\n\n  const installMaybeUse = app => {\n    app.maybeUse = function() {\n      if (arguments.length === 3) {\n        app.use(arguments[0], maybeApply(arguments[1], arguments[2]))\n      } else if (arguments.length === 2) {\n        app.use(maybeApply(arguments[0], arguments[1]))\n      }\n    }\n  }\n\n  const install = async app => {\n    installRouter(app)\n    installProtector(app)\n    installMaybeUse(app)\n\n    app.maybeUse('bodyParser.json', bodyParser.json({ limit: _.get(bp.botfile, 'api.bodyMaxSize') || '1mb' }))\n    app.maybeUse('bodyParser.urlencoded', bodyParser.urlencoded({ extended: true }))\n\n    anonymousApis(bp, app)\n\n    app.use('/api/*', maybeApply('auth', _authenticationMiddleware))\n\n    nonSecuredApis(bp, app)\n    securedApis(bp, app)\n  }\n\n  return { install }\n}\n","import Promise from 'bluebird'\nimport { static as staticMiddleware } from 'express'\nimport path from 'path'\nimport fs from 'fs'\nimport ms from 'ms'\nimport util from '../util'\nimport yn from 'yn'\n\nmodule.exports = bp => {\n  const serveModule = (app, module) => {\n    const name = module.name\n    const shortName = util.getModuleShortname(module.name)\n\n    if (module.settings.menuIcon === 'custom') {\n      const iconRequestPath = `/img/modules/${name}.png`\n      const iconPath = path.join(module.root, 'icon.png')\n\n      app.get(iconRequestPath, (req, res) => {\n        try {\n          const content = fs.readFileSync(iconPath)\n          res.contentType('image/png')\n          res.send(content)\n        } catch (err) {\n          bp.logger.warn(`Could not serve module icon [${name}] at: ${iconPath}`)\n        }\n      })\n    }\n\n    const liteDir = path.join(module.root, module.settings.liteDir || 'bin/lite')\n    const liteViews = fs.existsSync(liteDir) ? fs.readdirSync(liteDir).filter(b => b.endsWith('.js')) : []\n\n    app.get(\n      [\n        `/js/modules/${shortName}`, // The full module view\n        `/js/modules/${name}.js`, // <<-- DEPRECATED: Will be removed shortly. Only use shortNames\n        `/js/modules/${shortName}/:subview` // Lite view\n      ],\n      (req, res) => {\n        const settingsKey = module.settings.webBundle\n        const bundlePath =\n          req.params && req.params.subview\n            ? path.join(liteDir, req.params.subview + '.bundle.js') // Render lite view\n            : path.join(module.root, settingsKey || 'bin/web.bundle.js')\n\n        try {\n          const content = fs.readFileSync(bundlePath)\n          res.contentType('text/javascript')\n          res.send(content)\n        } catch (err) {\n          bp.logger.warn(`Could not serve module [${name}] at: ${bundlePath}`)\n          res.sendStatus(404)\n        }\n      }\n    )\n  }\n\n  const serveCustomTheme = app => {\n    let customTheme = ''\n\n    if (bp.licensing.getFeatures().whitelabel === true) {\n      const themeLocation = path.join(bp.projectLocation, 'theme.css')\n      if (fs.existsSync(themeLocation)) {\n        customTheme = fs.readFileSync(themeLocation)\n      }\n    }\n\n    app.use('/style/custom-theme.css', (req, res) => {\n      res.contentType('text/css')\n      res.send(customTheme)\n    })\n  }\n\n  const serveMedia = app => {\n    app.get('/media/:filename', async (req, res) => {\n      const contents = await bp.mediaManager.readFile(req.params.filename)\n      if (!contents) {\n        return res.sendStatus(404)\n      }\n      const type = path.extname(req.params.filename)\n      // files are never overwritten because of the unique ID\n      // so we can set the header to cache the asset for 1 year\n      return res\n        .set({ 'Cache-Control': 'max-age=31556926' })\n        .type(type)\n        .send(contents)\n    })\n  }\n\n  const install = async app => {\n    for (const name in bp._loadedModules) {\n      const module = bp._loadedModules[name]\n      serveModule(app, module)\n    }\n\n    app.use('/js/env.js', async (req, res) => {\n      const { tokenExpiry, enabled: authEnabled, useCloud } = bp.botfile.login\n      const { enabled: ghostEnabled } = bp.botfile.ghostContent\n      const optOutStats = !!bp.botfile.optOutStats\n      const appName = bp.botfile.appName || 'Botpress'\n\n      const isUsingCloud = !!useCloud && (await bp.cloud.isPaired())\n      const pairingInfo = { botId: '', endpoint: '', teamId: '', env: bp.botfile.env }\n      if (isUsingCloud) {\n        Object.assign(pairingInfo, await bp.cloud.getPairingInfo())\n        delete pairingInfo.token\n      }\n\n      const { isFirstRun, version } = bp\n      res.contentType('text/javascript')\n      res.send(`(function(window) {\n        window.NODE_ENV = \"${process.env.NODE_ENV || 'development'}\";\n        window.BOTPRESS_ENV = \"${bp.botfile.env}\";\n        window.BOTPRESS_CLOUD_ENABLED = ${isUsingCloud};\n        window.BOTPRESS_CLOUD_SETTINGS = ${JSON.stringify(pairingInfo)};\n        window.DEV_MODE = ${util.isDeveloping};\n        window.AUTH_ENABLED = ${!!authEnabled};\n        window.AUTH_TOKEN_DURATION = ${ms(tokenExpiry)};\n        window.OPT_OUT_STATS = ${optOutStats};\n        window.SHOW_GUIDED_TOUR = ${isFirstRun};\n        window.BOTPRESS_VERSION = \"${version}\";\n        window.APP_NAME = \"${appName}\";\n        window.GHOST_ENABLED = ${!!ghostEnabled};\n        window.BOTPRESS_FLOW_EDITOR_DISABLED = ${yn(process.env.BOTPRESS_FLOW_EDITOR_DISABLED)};\n      })(typeof window != 'undefined' ? window : {})`)\n    })\n\n    serveCustomTheme(app)\n\n    serveMedia(app)\n\n    app.use(staticMiddleware(path.join(bp.projectLocation, 'static')))\n\n    app.use(staticMiddleware(path.join(bp.botpressPath, './lib/web')))\n\n    app.get('*', (req, res, next) => {\n      // If browser requests HTML and request isn't an API request\n      if (/html/i.test(req.headers.accept) && !/^\\/api\\//i.test(req.url)) {\n        if (req.url && /^\\/lite\\//i.test(req.url)) {\n          return res.sendFile(path.join(bp.botpressPath, './lib/web/lite.html'))\n        }\n\n        return res.sendFile(path.join(bp.botpressPath, './lib/web/index.html'))\n      }\n      next()\n    })\n\n    return Promise.resolve(true)\n  }\n\n  return { install }\n}\n","module.exports = require(\"socketio-jwt\");","module.exports = require(\"socket.io\");","import _ from 'lodash'\nimport socketio from 'socket.io'\nimport socketioJwt from 'socketio-jwt'\n\nmodule.exports = bp => {\n  const install = async server => {\n    const io = socketio(server)\n\n    const admin = io.of('/admin')\n    const guest = io.of('/guest')\n\n    if (bp.botfile.login.enabled) {\n      admin.use(\n        socketioJwt.authorize({\n          secret: await bp.security.getJWTSecretOrCertificate(),\n          handshake: true\n        })\n      )\n    }\n\n    admin.on('connection', socket => {\n      const visitorId = _.get(socket, 'handshake.query.visitorId')\n      bp.stats.track('socket', 'connected')\n\n      socket.on('event', event => {\n        bp.events.emit(event.name, event.data, 'client', {\n          visitorId: visitorId,\n          socketId: socket.id,\n          guest: false,\n          admin: true\n        })\n      })\n    })\n\n    guest.on('connection', socket => {\n      const visitorId = _.get(socket, 'handshake.query.visitorId')\n      bp.stats.track('socket', 'connected')\n\n      if (visitorId && visitorId.length > 0) {\n        socket.join('visitor:' + visitorId)\n      }\n\n      socket.on('event', event => {\n        bp.events.emit(event.name, event.data, 'client', {\n          socketId: socket.id,\n          visitorId: visitorId,\n          guest: true,\n          admin: false\n        })\n      })\n    })\n\n    bp.events.onAny((event, data, from) => {\n      if (from === 'client') {\n        return // we sent this ourselves\n      }\n\n      // TODO: use more meaningful name\n      const c = event.startsWith('guest.') ? guest : admin\n\n      if (data && (data.__socketId || data.__room)) {\n        // Send only to this socketId or room\n        return c.to(data.__socketId || data.__room).emit('event', {\n          name: event,\n          data: data\n        })\n      }\n\n      // broadcast event to the front-end clients\n      c.emit('event', {\n        name: event,\n        data: data\n      })\n    })\n  }\n\n  return { install }\n}\n","module.exports = require(\"http\");","module.exports = require(\"compression\");","import express from 'express'\nimport compression from 'compression'\nimport http from 'http'\n\nimport Socket from './socket'\nimport Static from './static'\nimport Api from './api'\n\nmodule.exports = bp => {\n  const serveApi = async app => {\n    const api = Api(bp)\n    return api.install(app)\n  }\n\n  const serveSocket = async server => {\n    const socket = Socket(bp)\n    return socket.install(server)\n  }\n\n  const serveStatic = async app => {\n    const staticStuff = Static(bp)\n    return staticStuff.install(app)\n  }\n\n  const start = async () => {\n    const app = express()\n    app.use(compression())\n    const server = http.createServer(app)\n    const { port, hostname } = bp.botfile\n\n    await serveApi(app)\n    await serveSocket(server)\n    await serveStatic(app)\n\n    return new Promise(resolve => {\n      server.listen(port, hostname, () => resolve(server))\n    })\n  }\n\n  return { start }\n}\n","import nanoid from 'nanoid'\nimport Promise from 'bluebird'\nimport _ from 'lodash'\n\nexport default class MemoryQueue {\n  constructor(name, logger, options = {}) {\n    this.name = name\n    this.logger = logger\n    this.options = Object.assign({ retries: 2, drainInterval: 2000 }, options)\n    this.queue = []\n    this.subscribers = []\n    this._lock = {}\n\n    this._drain = setInterval(this.drain, this.options.drainInterval)\n  }\n\n  drain = () => {\n    this.queue.length > 0 && this.tick()\n  }\n\n  getQueueId(job) {\n    const event = job.event || job\n\n    return (\n      _.get(event, 'user.id') ||\n      _.get(event, 'user.userId') ||\n      _.get(event, 'userId') ||\n      _.get(event, 'raw.user.id') ||\n      _.get(event, 'raw.userId') ||\n      _.get(event, 'raw.to') ||\n      'default'\n    )\n  }\n\n  enqueue(job, retries = 0, isPriority = false) {\n    const jobWrapped = { job, id: nanoid(), timestamp: new Date(), retries }\n    if (isPriority) {\n      this.queue.unshift(jobWrapped)\n    } else {\n      this.queue.push(jobWrapped)\n    }\n    this.tick()\n  }\n\n  dequeue() {\n    return this.queue.shift()\n  }\n\n  cancelAll(job) {\n    const jobQueueId = this.getQueueId(job)\n    this.queue = this.queue.filter(item => this.getQueueId(item.job) !== jobQueueId)\n  }\n\n  peek(job) {\n    const jobQueueId = this.getQueueId(job)\n    return this.queue.find(item => this.getQueueId(item.job) === jobQueueId)\n  }\n\n  async tick() {\n    const toDequeueIdx = _.findIndex(this.queue, el => {\n      const queueId = this.getQueueId(el.job)\n      return !this._lock[queueId]\n    })\n\n    if (toDequeueIdx === -1) {\n      return\n    }\n\n    const [{ job, retries }] = _.pullAt(this.queue, [toDequeueIdx])\n    const queueId = this.getQueueId(job)\n    this._lock[queueId] = true\n\n    try {\n      await Promise.mapSeries(this.subscribers, fn => fn(job))\n    } catch (err) {\n      this.logger.warn(`${this.name} queue failed to process job: ${err.message}`)\n\n      if (retries + 1 <= this.options.retries) {\n        this.enqueue(job, retries + 1, true)\n      } else {\n        this.logger.error(\n          `Retrying job within ${this.name} queue failed ${this.options.retries} times. Abandoning the job.`\n        )\n      }\n    } finally {\n      delete this._lock[queueId]\n      if (this.queue.length) {\n        this.tick()\n      }\n    }\n  }\n\n  subscribe(fn) {\n    this.subscribers.push(fn)\n  }\n}\n","import _ from 'lodash'\n\nimport util from '../util'\nimport { validateFlowSchema } from '../dialog/validator'\n\nconst SKILLS_PREFIX = 'skill-'\nconst SKILLS_PREFIX_REGEX = new RegExp('^' + SKILLS_PREFIX)\n\nexport default class SkillsManager {\n  constructor({ logger }) {\n    this.logger = logger\n    this._log('info', `[Skills] Initiated`)\n  }\n\n  _log = (level, msg) => {\n    this.logger && this.logger[level] && this.logger[level](msg)\n  }\n\n  registerSkillsFromModules(modules) {\n    this._skills = modules\n      .filter(mod => {\n        const shortName = util.getModuleShortname(mod.name)\n        return SKILLS_PREFIX_REGEX.test(shortName)\n      })\n      .reduce((acc, curr) => {\n        const shortName = util.getModuleShortname(curr.name)\n        if (!curr.handlers.generate) {\n          this._log('warn', `Skill \"${shortName}\" has no flow generator (\"generate\" method exposed)`)\n          return acc\n        }\n\n        if (!_.isFunction(curr.handlers.generate)) {\n          this._log('warn', `Skill \"${shortName}\" generator is not a valid function`)\n          return acc\n        }\n\n        acc[shortName] = curr.handlers.generate\n        return acc\n      }, {})\n\n    this._log('info', `[Skills] Loaded ${_.keys(this._skills).length} skills`)\n  }\n\n  async generateFlow(skillId, data) {\n    if (!this._skills) {\n      throw new Error(\"Skills haven't been initialized yet\")\n    }\n\n    //vv Backward compatible with old skills, just making sure there's no @botpress or botpress-\n    skillId = util.getModuleShortname(skillId)\n\n    if (!SKILLS_PREFIX_REGEX.test(skillId)) {\n      skillId = SKILLS_PREFIX + skillId\n    }\n\n    const generator = this._skills[skillId]\n    if (!generator) {\n      throw new Error(`Skill \"${skillId}\" not found`)\n    }\n\n    const generatedFlow = await generator(data)\n    const validationError = validateFlowSchema(generatedFlow.flow)\n\n    if (validationError) {\n      throw new Error(`Skill \"${skillId}\" generated an invalid flow: ${validationError}`)\n    }\n\n    if (!generatedFlow.transitions || !_.isArray(generatedFlow.transitions)) {\n      throw new Error(`Skill \"${skillId}\" didn't generate valid \"transitions\"`)\n    }\n\n    return generatedFlow\n  }\n}\n","import ms from 'ms'\nimport helpers from '../database/helpers'\nimport moment from 'moment'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nmodule.exports = ({ db, botfile, middlewares }) => {\n  let intervalRef = null\n\n  const defaultJanitorInterval = ms(_.get(botfile, 'dialogs.janitorInterval') || '30s')\n  const defaultTimeout = ms(_.get(botfile, 'dialogs.timeoutInterval') || '15m')\n\n  const checkStaleSessions = async () => {\n    const knex = await db.get()\n\n    const timedOutCondition = helpers(knex).date.isBefore(\n      'active_on',\n      moment().subtract(defaultTimeout, 'milliseconds')\n    )\n\n    const sessions = await knex('dialog_sessions')\n      .where(timedOutCondition)\n      .andWhereRaw(`not \"id\" like '%\\\\_\\\\_\\\\_%' escape '\\\\'`) // Exclude substates\n      .limit(250)\n      .then()\n\n    return Promise.map(sessions, session => {\n      let platform = 'botpress'\n      const props = {}\n\n      if (session.id.includes(':')) {\n        const chunks = session.id.split(':')\n        platform = _.head(chunks)\n        const userId = _.tail(chunks).join(':')\n        props.user = { id: userId }\n      }\n\n      return middlewares.sendIncoming(\n        _.merge(\n          {\n            platform: platform,\n            type: 'bp_dialog_timeout',\n            raw: { sessionId: session.id },\n            text: session.id,\n            sessionId: session.id\n          },\n          props\n        )\n      )\n    })\n  }\n\n  const run = async () => {\n    await checkStaleSessions()\n  }\n\n  const uninstall = () => {\n    if (intervalRef) {\n      clearInterval(intervalRef)\n      intervalRef = null\n    }\n  }\n\n  const install = () => {\n    const randomMs = Math.random() * 5000\n\n    if (intervalRef) {\n      uninstall()\n    }\n\n    intervalRef = setInterval(run, defaultJanitorInterval + randomMs)\n  }\n\n  return { install, uninstall, runOnce: run }\n}\n","import Mustache from 'mustache'\nimport _ from 'lodash'\n\nmodule.exports = {\n  default: {\n    id: 'send-message',\n    send: ({ message, originalEvent, state, flowContext }) => {\n      let rendered = message.value\n\n      const additionalData = { state: state }\n\n      if (/{{/i.test(rendered)) {\n        rendered = Mustache.render(rendered, {\n          ...state,\n          event: _.pick(originalEvent, ['raw', 'text', 'type', 'platform', 'user']),\n          _context: {\n            ..._.pick(flowContext, ['node', 'flowStack']),\n            currentFlow: _.pick(flowContext.currentFlow, ['name', 'version', 'startNode'])\n          }\n        })\n      }\n\n      if (/^{.+}$/.test(rendered)) {\n        // Check if it's JSON\n        Object.assign(additionalData, JSON.parse(rendered))\n      } else if (!_.isEmpty(rendered)) {\n        Object.assign(additionalData, { text: rendered })\n      }\n\n      return originalEvent.reply(message.type, additionalData)\n    }\n  }\n}\n","module.exports = require(\"vm2\");","import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { VM } from 'vm2'\nimport mware from 'mware'\n\nconst loggerShim = { debug: () => {} }\nconst callSubflowRegex = /(.+\\.flow\\.json)\\s?@?\\s?(.+)?/i // e.g. './login.flow.json' or './login.flow.json @ username'\nconst MAX_STACK_SIZE = 100\n\n/** The Dialog Engine (or Dialog Manager) is the component that\n handles the flow logic. It it responsible for executing flows, including\n executing the actions and flowing to the nodes, redirections etc.\n @namespace DialogEngine\n @example\n bp.dialogEngine.processMessage(...)\n */\nclass DialogEngine {\n  constructor({ flowProvider, stateManager, options, logger = loggerShim }) {\n    Object.assign(this, { logger, flowProvider, stateManager })\n\n    this.flowsLoaded = false\n    this.flows = []\n    this.defaultFlow = _.get(options, 'defaultFlow') || 'main.flow.json'\n    this.outputProcessors = []\n    this.errorHandlers = []\n    this.actions = {}\n    this.actionMetadataProviders = []\n\n    /**\n     * @typedef {Function} DialogEngine~DialogMiddleware\n     * @param {object} ctx A mutable context object\n     * @param {function} next Call this to continue processing\n     */\n\n    /**\n     * Middleware triggered before a new session is started.\n     * > **Note:** This middleware allows you to alter `ctx.flowName` to change\n     * > which flow will be selected to start the conversation.\n     * @function DialogEngine#onBeforeCreated\n     * @param {DialogEngine~DialogMiddleware} middleware\n     * @example\nbp.dialogEngine.onBeforeCreated((ctx, next) => {\n  ctx.flowName = 'example.flow.json'\n  next()\n})\n     */\n    this.onBeforeCreated = mware()\n\n    /**\n     * Middleware triggered **after** a new session is started.\n     * `ctx` is not mutable.\n     * @function DialogEngine#onAfterCreated\n     * @param {DialogEngine~DialogMiddleware} middleware\n     * @example\nbp.dialogEngine.onAfterCreated((ctx, next) => {\n  // Do something here\n  next()\n})\n     */\n    this.onAfterCreated = mware()\n\n    /**\n     * Middleware triggered **before** a conversation is ended for any reason.\n     * `ctx` is not mutable.\n     * @function DialogEngine#onBeforeEnd\n     * @param {DialogEngine~DialogMiddleware} middleware\n     * @example\nbp.dialogEngine.onBeforeEnd((ctx, next) => {\n  // Do something here\n  next()\n})\n     */\n    this.onBeforeEnd = mware()\n\n    /**\n     * Middleware triggered **before** a node is entered (before the `onEnter` execution).\n     * > **⚠️ Warn:** It is **not** recommended to mutate `ctx.node` for now, it might break in a future version of Botpress.\n     * @function DialogEngine#onBeforeNodeEnter\n     * @param {DialogEngine~DialogMiddleware} middleware\n     * @example\nbp.dialogEngine.onBeforeNodeEnter((ctx, next) => {\n  // Do something here\n  next()\n})\n     */\n    this.onBeforeNodeEnter = mware()\n\n    /**\n     * Middleware triggered **before** a conversation/session times out.\n     * > **Note:** You can't prevent it from timing out at this point.\n     * > You also can't change the timeout behavior/location at this time.\n     * @function DialogEngine#onBeforeSessionTimeout\n     * @param {DialogEngine~DialogMiddleware} middleware\n     * @example\nbp.dialogEngine.onBeforeSessionTimeout((ctx, next) => {\n  // Do something here\n  next()\n})\n     */\n    this.onBeforeSessionTimeout = mware()\n\n    flowProvider.on('flowsChanged', () => Object.assign(this, { flows: [], flowsLoaded: false }))\n  }\n\n  /**\n   * Process a new incoming message from the user.\n   * This will execute and run the flow until the flow ends or gets paused by user input\n   * @param  {string} stateId The Id of the state.\n   *                          This is usually unique per user/group/channel, depending on the platform.\n   * @param  {BPIncomingEvent} event   The incoming event (message)\n   * @return {Promise<State>}         Returns a promise that resolves with the new state\n   *                                  when the flow is done processing\n   */\n  async processMessage(stateId, event) {\n    try {\n      if (!this.flowsLoaded) {\n        await this.reloadFlows()\n      }\n\n      const context = await this._getOrCreateContext(stateId)\n      let state = await this.stateManager.getState(stateId)\n\n      if (event.type === 'bp_dialog_timeout') {\n        state = await this._processTimeout(stateId, state, context, event)\n\n        if (!_.isNil(state)) {\n          await this.stateManager.setState(stateId, state)\n        }\n\n        return state\n      }\n\n      const msg = (event.text || '').substr(0, 20)\n      this._trace('<~', 'RECV', `\"${msg}\"`, context, state)\n\n      if (!context.currentFlow) {\n        throw new Error('Expected currentFlow to be defined for stateId=' + stateId)\n      }\n\n      const catchAllOnReceive = _.get(context, 'currentFlow.catchAll.onReceive')\n\n      if (catchAllOnReceive) {\n        this._trace('!!', 'KALL', '', context, state)\n        state = await this._processInstructions(catchAllOnReceive, state, event, context)\n      }\n\n      // If there's a 'next' defined in catchAll, this will try to match any condition and if it is matched it\n      // will run the node defined in the next instead of the current context node\n      const catchAllNext = _.get(context, 'currentFlow.catchAll.next')\n      if (catchAllNext) {\n        this._trace('..', 'KALL', '', context, state)\n        for (let i = 0; i < catchAllNext.length; i++) {\n          if (await this._evaluateCondition(catchAllNext[i].condition, state, event)) {\n            return this._processNode(stateId, state, context, catchAllNext[i].node, event)\n          }\n        }\n\n        this._trace('?X', 'KALL', '', context, state)\n      }\n\n      state = await this._processNode(stateId, state, context, context.node, event)\n\n      if (!_.isNil(state)) {\n        await this.stateManager.setState(stateId, state)\n      }\n\n      return state\n    } catch (e) {\n      this.errorHandlers.forEach(errorHandler => errorHandler(e))\n    }\n  }\n\n  /**\n   * Make the stateId jump to the specified flow and node\n   * regardless of if there was already an active flow or not\n   * in execution. If there was already an active flow executing,\n   * this will override it. Note that by default, the current state\n   * will be preserved; if you wish to reset the state as well,\n   * set `resetState` to `true`.\n   * Note that this will not continue processing, i.e. the user must send a message or\n   * you should call {@link BotEngine#processMessage} manually to continue execution.\n   * @example\n   * // inside a bp.hear (...)\n   * await bp.dialogEngine.jumpTo(stateId, 'main.flow.json')\n   * await bp.dialogEngine.processMessage(stateId, event) // Continue processing\n   * @param  {string} stateId  The stateId of the user/channel/group to make jump.\n   * @param  {string} flowName The name of the flow, e.g. `main.flow.json`\n   * @param  {string} [nodeName=null] The name of the node to jump to. Defaults to the flow's entry point.\n   * @param  {boolean} [options.resetState=false] Whether or not the state should be reset\n   */\n  async jumpTo(stateId, flowName, nodeName = null, options) {\n    options = Object.assign(\n      {\n        resetState: false\n      },\n      options\n    )\n\n    if (!this.flowsLoaded) {\n      await this.reloadFlows()\n    }\n\n    const flow = this._findFlow(flowName, true)\n\n    if (nodeName) {\n      // We're just calling for throwing if doesn't exist\n      DialogEngine._findNode(flow, nodeName, true)\n    }\n\n    await this._setContext(stateId, {\n      currentFlow: flow,\n      node: nodeName || flow.startNode,\n      hasJumped: true,\n      flowStack: [{ flow: flow.name, node: nodeName || flow.startNode }]\n    })\n\n    if (options.resetState) {\n      await this.stateManager.setState(stateId, {})\n    }\n  }\n\n  /**\n   * Get the current flow and node for a specific stateId\n   * @param  {string} stateId\n   * @return {{ flow: string, node: string }} Returns the current flow and node\n   */\n  async getCurrentPosition(stateId) {\n    const context = await this._getContext(stateId)\n\n    if (context) {\n      return {\n        flow: context.currentFlow && context.currentFlow.name,\n        node: context.node\n      }\n    }\n\n    return {\n      flow: null,\n      node: null\n    }\n  }\n\n  /**\n   * Ends the flow for a specific stateId if there's an active flow,\n   * otherwise does nothing.\n   * @param  {string} stateId [description]\n   */\n  async endFlow(stateId) {\n    return this._endFlow(stateId)\n  }\n\n  async reloadFlows() {\n    this._trace('**', 'LOAD', '')\n    this.flows = await this.flowProvider.loadAll()\n    this.flowsLoaded = true\n  }\n\n  async getFlows() {\n    if (!this.flowsLoaded) {\n      await this.reloadFlows()\n    }\n\n    return this.flows\n  }\n\n  /**\n   * Registers a new output processor (there can be many, which all get triggered on output).\n   * @param {OutpoutProcessor} processor - Is an object with {id, send}\n   * @param {string} processor.id - The unique id of the processor\n   * @param {Function} processor.send - The `send` function of the processor\n   * @returns {void}\n   * @private\n   */\n  registerOutputProcessor(processor) {\n    if (_.isNil(processor) || !_.isFunction(processor.send) || !_.isString(processor.id)) {\n      throw new Error('Invalid processor. Processor must have a function `send` defined and a valid `id`')\n    }\n\n    // For now we only ever support a single output processor\n    // We might want many output processors in the future, for example to hook up a debugger or a test suite\n    this.outputProcessors = [processor]\n  }\n\n  /**\n   * @typedef {object} DialogEngine~ActionMetadata\n   * @var {string} title\n   * @var {string} description\n   * @var {boolean} required\n   * @var {string} default\n   * @var {string} type\n   * @private\n   */\n\n  /**\n   * A metadata provider returns metadata for an action or\n   * returns null, in which case other providers will be called\n   * @typedef {Function} DialogEngine~MetadataProvider\n   * @param {string} action The name of the action\n   * @returns {DialogEngine~ActionMetadata}\n   * @private\n   */\n\n  /**\n   * Adds a new provider of function metadata\n   * @param {DialogEngine~MetadataProvider} provider\n   * @returns {void}\n   * @private\n   */\n  registerActionMetadataProvider(provider) {\n    if (!_.isFunction(provider)) {\n      throw new Error('Expected the function metadata provider to be a function')\n    }\n\n    if (!_.includes(this.actionMetadataProviders, provider)) {\n      this.actionMetadataProviders.push(provider)\n    }\n  }\n\n  /**\n   * Introduce new actions to the Flows that they can call.\n   * @param {Object} fnMap\n   * @param {bool} [overwrite=false] - Whether or not it should overwrite existing actions with the same name.\n   * Note that if overwrite is false, an error will be thrown on conflict.\n   * @returns {Promise.<void>}\n   */\n  async registerActions(fnMap, overwrite = false) {\n    const toRegister = {}\n    _.keys(fnMap).forEach(name => {\n      if (this.actions[name] && !overwrite) {\n        throw new Error(`There is already a function named \"${name}\" registered`)\n      }\n\n      let handler = fnMap[name]\n      let metadata = null\n\n      if (!_.isFunction(fnMap[name])) {\n        if (!_.isObject(fnMap[name]) || !_.isFunction(fnMap[name].handler)) {\n          throw new Error(`Expected function \"${name}\" to be a function or an object with a 'hander' function`)\n        }\n\n        handler = fnMap[name].handler\n        metadata = Object.assign({}, fnMap[name], { name: name, handler: null })\n      }\n\n      for (const provider of this.actionMetadataProviders) {\n        const extra = provider(name)\n\n        if (extra) {\n          metadata = Object.assign({}, extra, metadata || {})\n          break\n        }\n      }\n\n      toRegister[name] = {\n        name: name,\n        metadata: metadata,\n        fn: handler\n      }\n    })\n\n    Object.assign(this.actions, toRegister)\n  }\n\n  /**\n   * @deprecated Use registerActions() instead\n   */\n  async registerFunctions(fnMap, overwrite = false) {\n    return this.registerActions(fnMap, overwrite)\n  }\n\n  /**\n   * Returns all the available actions along with their metadata\n   * @private\n   */\n  getAvailableActions() {\n    return _.values(this.actions)\n      .filter(x => !String(x.name).startsWith('__'))\n      .map(x => Object.assign({}, x, { fn: null }))\n  }\n\n  onError = fn => this.errorHandlers.push(fn)\n\n  async _processTimeout(stateId, userState, context, event) {\n    const beforeCtx = { stateId }\n    await Promise.fromCallback(callback => this.onBeforeSessionTimeout.run(beforeCtx, callback))\n\n    const currentNodeTimeout = _.get(DialogEngine._findNode(context.currentFlow, context.node), 'timeoutNode')\n    const currentFlowTimeout = _.get(context, 'currentFlow.timeoutNode')\n    const fallbackTimeoutNode = DialogEngine._findNode(context.currentFlow, 'timeout')\n    const fallbackTimeoutFlow = this._findFlow('timeout.flow.json')\n\n    if (currentNodeTimeout) {\n      this._trace('<>', 'SNDE', '', context)\n      userState = await this._processNode(stateId, userState, context, currentNodeTimeout, event)\n    } else if (currentFlowTimeout) {\n      this._trace('<>', 'SFLW', '', context)\n      userState = await this._processNode(stateId, userState, context, currentFlowTimeout, event)\n    } else if (fallbackTimeoutNode) {\n      this._trace('<>', 'DNDE', '', context)\n      userState = await this._processNode(stateId, userState, context, fallbackTimeoutNode.name, event)\n    } else if (fallbackTimeoutFlow) {\n      this._trace('<>', 'DFLW', '', context)\n      userState = await this._processNode(stateId, userState, context, fallbackTimeoutFlow.name, event)\n    } else {\n      this._trace('<>', 'NTHG', '', context)\n      userState = await this._endFlow(stateId)\n    }\n\n    return userState\n  }\n\n  async _processNode(stateId, userState, context, nodeName, event) {\n    let switchedFlow = false\n    let switchedNode = false\n\n    if (context.hasJumped) {\n      context.hasJumped = false\n      switchedNode = true\n    }\n\n    const originalFlow = context.currentFlow.name\n    const originalNode = context.node\n\n    if (callSubflowRegex.test(nodeName)) {\n      this._trace('>>', 'FLOW', `\"${nodeName}\"`, context, null)\n      context = this._gotoSubflow(nodeName, context)\n      switchedFlow = true\n    } else if (/^#/.test(nodeName)) {\n      // e.g. '#success'\n      this._trace('<<', 'FLOW', `\"${nodeName}\"`, context, null)\n      context = this._gotoPreviousFlow(nodeName, context)\n      switchedFlow = true\n    } else if (context.node !== nodeName) {\n      this._trace('>>', 'FLOW', `\"${nodeName}\"`)\n      switchedNode = true\n      context.node = nodeName\n    } else if (_.isNil(context.node)) {\n      // We just created the context\n      switchedNode = true\n      context.node = context.currentFlow.startNode\n    }\n\n    const node = DialogEngine._findNode(context.currentFlow, context.node)\n\n    if (!node || !node.name) {\n      userState = await this._endFlow(stateId)\n      return userState\n      // TODO Trace error\n      throw new Error(`Could not find node \"${context.node}\" in flow \"${context.currentFlow.name}\"`)\n    }\n\n    if (switchedFlow || switchedNode) {\n      context.flowStack.push({\n        flow: context.currentFlow.name,\n        node: context.node\n      })\n\n      // Flattens the stack to only include flow jumps, not node jumps\n      context.flowStack = context.flowStack.filter((el, i) => {\n        return i === context.flowStack.length - 1 || context.flowStack[i + 1].flow !== el.flow\n      })\n\n      if (context.flowStack.length >= MAX_STACK_SIZE) {\n        throw new Error(\n          `Exceeded maximum flow stack size (${MAX_STACK_SIZE}).\n         This might be due to an unexpected infinite loop in your flows.\n         Current flow: ${context.currentFlow.name}\n         Current node: ${context.node}`\n        )\n        return this._endFlow(stateId)\n      }\n\n      await this._setContext(stateId, context)\n\n      const beforeCtx = { stateId, node }\n      await Promise.fromCallback(callback => this.onBeforeNodeEnter.run(beforeCtx, callback))\n\n      if (node.onEnter) {\n        this._trace('!!', 'ENTR', '', context, userState)\n        userState = await this._processInstructions(node.onEnter, userState, event, context)\n      }\n\n      if (!node.onReceive) {\n        this._trace('..', 'NOWT', '', context, userState)\n\n        if (node.type === 'skill-call' && originalFlow !== node.flow) {\n          userState = await this._processNode(stateId, userState, context, node.flow, event)\n        } else {\n          userState = await this._transitionToNextNodes(node, context, userState, stateId, event)\n        }\n      }\n    } else {\n      // i.e. we were already on that node before we received the message\n      if (node.onReceive) {\n        this._trace('!!', 'RECV', '', context, userState)\n        userState = await this._processInstructions(node.onReceive, userState, event, context)\n      }\n\n      this._trace('..', 'RECV', '', context, userState)\n\n      if (node.type === 'skill-call' && originalFlow !== node.flow) {\n        userState = await this._processNode(stateId, userState, context, node.flow, event)\n      } else {\n        userState = await this._transitionToNextNodes(node, context, userState, stateId, event)\n      }\n    }\n\n    return userState\n  }\n\n  async _transitionToNextNodes(node, context, userState, stateId, event) {\n    const nextNodes = node.next || []\n    for (let i = 0; i < nextNodes.length; i++) {\n      if (await this._evaluateCondition(nextNodes[i].condition, userState, event)) {\n        this._trace('??', 'MTCH', `cond = \"${nextNodes[i].condition}\"`, context)\n        if (/^end$/i.test(nextNodes[i].node)) {\n          // Node \"END\" or \"end\" ends the flow (reserved keyword)\n          return this._endFlow(stateId)\n        } else {\n          return this._processNode(stateId, userState, context, nextNodes[i].node, event)\n        }\n      }\n    }\n\n    if (!nextNodes.length) {\n      // You reach this if there were no next nodes, in which case we end the flow\n      return this._endFlow(stateId)\n    }\n\n    return userState\n  }\n\n  async _endFlow(stateId) {\n    const beforeCtx = { stateId }\n    await Promise.fromCallback(callback => this.onBeforeEnd.run(beforeCtx, callback))\n\n    this._trace('--', 'ENDF', '', null, null)\n    await this.stateManager.deleteState(stateId, ['context'])\n\n    return null\n  }\n\n  async _getOrCreateContext(stateId) {\n    let state = await this._getContext(stateId)\n\n    if (!state || !state.currentFlow) {\n      const beforeCtx = { stateId, flowName: this.defaultFlow }\n      await Promise.fromCallback(callback => this.onBeforeCreated.run(beforeCtx, callback))\n\n      const flow = this._findFlow(beforeCtx.flowName, true)\n\n      if (!flow) {\n        throw new Error(`Could not find the default flow \"${this.defaultFlow}\"`)\n      }\n\n      state = {\n        currentFlow: flow,\n        flowStack: [{ flow: flow.name, node: flow.startNode }]\n      }\n\n      await this._setContext(stateId, state)\n\n      const afterCtx = { ...beforeCtx }\n      await Promise.fromCallback(callback => this.onAfterCreated.run(afterCtx, callback))\n    }\n\n    return state\n  }\n\n  _getContext(stateId) {\n    return this.stateManager.getState(stateId + '___context')\n  }\n\n  _setContext(stateId, state) {\n    return this.stateManager.setState(stateId + '___context', state)\n  }\n\n  _gotoSubflow(nodeName, context) {\n    let [, subflow, subflowNode] = nodeName.match(callSubflowRegex)\n\n    const flow = this._findFlow(subflow, true)\n\n    if (_.isNil(subflowNode)) {\n      subflowNode = flow.startNode\n    }\n\n    Object.assign(context, {\n      currentFlow: flow,\n      node: subflowNode\n    })\n\n    return context\n  }\n\n  _gotoPreviousFlow(nodeName, context) {\n    if (!context.flowStack) {\n      context.flowStack = []\n    }\n\n    while (context.currentFlow.name === _.get(_.last(context.flowStack), 'flow')) {\n      context.flowStack.pop()\n    }\n\n    if (context.flowStack.length < 1) {\n      this._trace('Flow tried to go back to previous flow but there was none. Exiting flow.', context, null)\n      // TODO END FLOW\n    } else {\n      let { flow, node } = _.last(context.flowStack)\n\n      if (nodeName !== '#') {\n        node = nodeName.substr(1)\n      }\n\n      Object.assign(context, {\n        currentFlow: this._findFlow(flow, true),\n        node: node\n      })\n    }\n\n    return context\n  }\n\n  async _processInstructions(instructions, userState, event, context) {\n    if (!_.isArray(instructions)) {\n      instructions = [instructions]\n    }\n\n    await Promise.mapSeries(instructions, async instruction => {\n      if (_.isString(instruction) && instruction.startsWith('say ')) {\n        const chunks = instruction.split(' ')\n        const params = _.slice(chunks, 2).join(' ')\n\n        if (chunks.length < 2) {\n          this.trace('ERROR Invalid text instruction. Expected an instruction along \"say #text Something\"')\n          return userState\n        }\n\n        await this._dispatchOutput(\n          {\n            type: chunks[1], // e.g. \"#text\" or \"#!trivia-12342\"\n            value: params // e.g. Any additional parameter provided to the template\n          },\n          userState,\n          event,\n          context\n        )\n      } else {\n        userState = await this._invokeAction(instruction, userState, event, context)\n      }\n    })\n\n    return userState\n  }\n\n  async _dispatchOutput(output, userState, event, context) {\n    const msg = String(output.type + (output.value || '')).substr(0, 20)\n    this._trace('~>', 'SEND', `\"${msg}\"`)\n\n    this.outputProcessors.forEach(processor => {\n      processor.send({\n        message: output,\n        state: userState,\n        originalEvent: event,\n        flowContext: context\n      })\n    })\n  }\n\n  async _invokeAction(instruction, userState, event, context) {\n    let name = null\n    let args = {}\n\n    if (_.isString(instruction)) {\n      if (instruction.includes(' ')) {\n        const chunks = instruction.split(' ')\n        const argsStr = _.tail(chunks).join(' ')\n        name = _.first(chunks)\n        try {\n          args = JSON.parse(argsStr)\n          args = _.mapValues(args, value => {\n            if (_.isString(value) && value.startsWith('{{') && value.endsWith('}}')) {\n              const key = value.substr(2, value.length - 4)\n              return _.get({ state: userState, s: userState, event: event, e: event }, key)\n            }\n            return value\n          })\n        } catch (err) {\n          throw new Error('ERROR function has invalid arguments (not a valid JSON string): ' + argsStr)\n        }\n      } else {\n        name = instruction\n      }\n    } else {\n      this._trace(`ERROR function is not a valid string`)\n    }\n\n    if (!this.actions[name]) {\n      this._trace(`ERROR function \"${name}\" not found`, context, userState)\n    } else {\n      try {\n        this._trace('!!', 'EXEC', `func \"${name}\"`, context, userState)\n        const ret = await this.actions[name].fn(Object.freeze(userState), event, args || {})\n\n        if (ret && _.isObject(ret)) {\n          if (Object.isFrozen(ret)) {\n            this._trace(\n              `ERROR function \"${name}\" returned the original (frozen) state. You should clone the state (see 'Object.assign()') instead of returning the original state.`,\n              context,\n              userState\n            )\n          } else {\n            this._trace('!!', 'SSET', '', context)\n            return ret\n          }\n        }\n      } catch (err) {\n        throw new Error(`ERROR function \"${name}\" thrown an error: ${err && err.message}`)\n      }\n    }\n\n    return userState\n  }\n\n  async _evaluateCondition(condition, userState, event) {\n    if (/^true|always|yes$/i.test(condition) || condition === '') {\n      return true\n    }\n\n    const vm = new VM({\n      timeout: 5000\n    })\n\n    _.keys(this.actions).forEach(name => {\n      vm.freeze(this.actions[name].fn, name)\n    })\n\n    vm.freeze(userState, 's')\n    vm.freeze(userState, 'state')\n    vm.freeze(event, 'event')\n    vm.freeze(event, 'e')\n\n    try {\n      return (await vm.run(condition)) == true\n    } catch (err) {\n      throw new Error(`ERROR evaluating condition \"${condition}\": ${err.message}`)\n    }\n  }\n\n  static _findNode(flow, nodeName, throwIfNotFound = false) {\n    if (throwIfNotFound && _.isNil(flow)) {\n      throw new Error(`Could not find node ${nodeName} because the flow was not defined (null)`)\n    }\n\n    const node = _.find(flow.nodes, { name: nodeName })\n\n    if (throwIfNotFound && _.isNil(nodeName)) {\n      throw new Error(`Could not find node \"${nodeName}\" in flow \"${flow.name}\"`)\n    }\n\n    return node\n  }\n\n  _findFlow(flowName, throwIfNotFound = false) {\n    const flow = _.find(this.flows, { name: flowName })\n\n    if (throwIfNotFound && _.isNil(flow)) {\n      throw new Error(`Could not find flow \"${flowName}\"`)\n    }\n\n    return flow\n  }\n\n  log(message, context, state) {\n    const flow = (_.get(context, 'currentFlow.name') || 'NONE').replace(/\\.flow\\.json/i, '')\n    const node = (context && context.node) || 'NONE'\n    const msg = `Dialog: [${flow} – ${node}]\\t${message}`\n    this.logger.debug(msg)\n  }\n\n  /**\n   * Dialog: [flow] (node) \\t OP  RESN  \"Description\"\n   * @param message\n   * @param context\n   * @param state\n   * @private\n   */\n  _trace(operation, reason, message, context) {\n    let flow = (_.get(context, 'currentFlow.name') || ' N/A ').replace(/\\.flow\\.json/i, '')\n    let node = (context && context.node) || ' N/A '\n\n    flow = flow.length > 13 ? flow.substr(0, 13) + '&' : flow\n    node = node.length > 13 ? node.substr(0, 13) + '&' : node\n\n    const spc = _.repeat(' ', 30 - flow.length - node.length)\n\n    const msg = `Dialog: [${flow}] (${node}) ${spc} ${operation}  ${reason} \\t ${message}`\n\n    this.logger.debug(msg)\n  }\n}\n\nmodule.exports = DialogEngine\n","/**\n * The Dialog State Manager is in charge of keeping track of the state\n * for all conversations. This is being used internally by the [Dialog Engine]{@link DialogEngine}\n * but is also exposed publicly if you need to programmatically alter the state of some conversations.\n * @namespace DialogStateManager\n * @example\n * bp.dialogEngine.stateManager\n */\n\nimport helpers from '../database/helpers'\nimport _ from 'lodash'\n\nmodule.exports = ({ db, internals = {} }) => {\n  const _internals = Object.assign(\n    {\n      _isExpired: session => {\n        return false // TODO Implement\n      }\n    },\n    internals\n  )\n\n  const _upsertState = async (stateId, state) => {\n    const knex = await db.get()\n\n    const params = {\n      tableName: 'dialog_sessions',\n      stateId,\n      state: JSON.stringify(state),\n      now: helpers(knex).date.now()\n    }\n\n    const sql = helpers(knex).isLite()\n      ? `\n        INSERT OR REPLACE INTO :tableName: (id, state, active_on)\n        VALUES (:stateId, :state, :now)\n      `\n      : `\n        INSERT INTO :tableName: (id, state, active_on, created_on)\n        VALUES (:stateId, :state, :now, :now)\n        ON CONFLICT (id) DO UPDATE\n          SET active_on = :now, state = :state\n      `\n\n    return knex.raw(sql, params)\n  }\n\n  const _createEmptyState = stateId => {\n    return { _stateId: stateId }\n  }\n\n  const _createSession = async stateId => {\n    const knex = await db.get()\n\n    const state = _createEmptyState(stateId)\n\n    const params = {\n      tableName: 'dialog_sessions',\n      stateId,\n      state: JSON.stringify(state),\n      now: helpers(knex).date.now()\n    }\n\n    const sql = helpers(knex).isLite()\n      ? `\n        INSERT OR REPLACE INTO :tableName: (id, state, active_on, created_on)\n        VALUES (:stateId, :state, :now, :now)\n      `\n      : `\n        INSERT INTO :tableName: (id, state, active_on, created_on)\n        VALUES (:stateId, :state, :now, :now)\n        ON CONFLICT (id) DO UPDATE\n          SET created_on = :now, active_on = :now, state = :state\n      `\n\n    await knex.raw(sql, params)\n\n    return state\n  }\n\n  /**\n   * Returns the current state of the conversation\n   * @param  {String} stateId\n   * @return {Object} The conversation state\n   * @async\n   * @memberof! DialogStateManager\n   * @example\n   * const state = await bp.dialogEngine.stateManager.getState(event.user.id)\n   */\n  const getState = async stateId => {\n    const knex = await db.get()\n\n    const session = await knex('dialog_sessions')\n      .where({ id: stateId })\n      .limit(1)\n      .then()\n      .get(0)\n      .then()\n\n    if (session) {\n      if (_internals._isExpired(session)) {\n        // TODO trigger time out\n        return _createSession(stateId)\n      } else {\n        return JSON.parse(session.state)\n      }\n    } else {\n      return _createSession(stateId)\n    }\n  }\n\n  /**\n   * Overwrites the state of a current conversation\n   * @param  {String} stateId\n   * @param {Object} state The conversation state\n   * @return {Object} The new state\n   * @async\n   * @memberof! DialogStateManager\n   */\n  const setState = (stateId, state) => {\n    if (_.isNil(state)) {\n      state = _createEmptyState(stateId)\n    }\n\n    if (!_.isPlainObject(state)) {\n      throw new Error('State must be a plain object')\n    }\n\n    return _upsertState(stateId, state)\n  }\n\n  /**\n   * Deletes the state(s) and (optionally) the associated sub-states (for e.g. ___context sub-state)\n   * @param stateId The state to delete\n   * @param {Array<String>} [substates] Detaults to ['context']. If this is empty it will delete no substate\n   * @async\n   * @memberof! DialogStateManager\n   */\n  const deleteState = async (stateId, substates = ['context']) => {\n    const knex = await db.get()\n\n    const states = [stateId, ...substates.map(x => `${stateId}___${x}`)]\n\n    await knex('dialog_sessions')\n      .whereIn('id', states)\n      .del()\n      .then()\n  }\n\n  return {\n    getState,\n    setState,\n    deleteState\n  }\n}\n","import path from 'path'\nimport fs from 'fs'\nimport glob from 'glob'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\nimport EventEmitter2 from 'eventemitter2'\nimport mkdirp from 'mkdirp'\n\nimport { validateFlowSchema } from './validator'\n\nexport default class FlowProvider extends EventEmitter2 {\n  constructor({ logger, botfile, projectLocation, ghostManager }) {\n    super({\n      wildcard: true,\n      maxListeners: 100\n    })\n\n    this.logger = logger\n    this.botfile = botfile\n    this.projectLocation = projectLocation\n    this.ghostManager = ghostManager\n    this.flowsDir = this.botfile.flowsDir || './flows'\n\n    mkdirp.sync(path.dirname(this.flowsDir))\n    this.ghostManager.addRootFolder(this.flowsDir, { filesGlob: '**/*.json' })\n  }\n\n  async loadAll() {\n    const flowFiles = await this.ghostManager.directoryListing(this.flowsDir, '.flow.json')\n\n    const flows = await Promise.map(flowFiles, async flowPath => {\n      const flow = JSON.parse(await this.ghostManager.readFile(this.flowsDir, flowPath))\n\n      const schemaError = validateFlowSchema(flow)\n      if (!flow || schemaError) {\n        return flow ? this.logger.warn(schemaError) : null\n      }\n\n      const uiEq = JSON.parse(await this.ghostManager.readFile(this.flowsDir, this._uiPath(flowPath)))\n\n      Object.assign(flow, { links: uiEq.links })\n\n      // Take position from UI files or create default position\n      let unplacedIndex = -1\n      flow.nodes = flow.nodes.map(node => {\n        const position = _.get(_.find(uiEq.nodes, { id: node.id }), 'position')\n        const placingStep = 250\n        unplacedIndex = position ? unplacedIndex : unplacedIndex + 1\n\n        return {\n          ...node,\n          x: position ? position.x : 50 + unplacedIndex * placingStep,\n          y: position ? position.y : (_.maxBy(flow.nodes, 'y') || { y: 0 }).y + placingStep\n        }\n      })\n\n      return {\n        name: flowPath,\n        location: flowPath,\n        nodes: _.filter(flow.nodes, node => !!node),\n        ..._.pick(flow, 'version', 'catchAll', 'startNode', 'links', 'skillData')\n      }\n    })\n\n    return flows.filter(Boolean)\n  }\n\n  async saveFlows(flows) {\n    if (!flows.find(({ flow }) => flow === 'main.flow.json')) {\n      throw new Error(`[Flow] Expected flows list to contain 'main.flow.json'`)\n    }\n    const flowsToSave = await Promise.mapSeries(flows, flow => this._prepareSaveFlow(flow))\n    const flowsSavePromises = _.flatten(\n      flowsToSave.map(({ flowPath, uiPath, flowContent, uiContent }) => [\n        this.ghostManager.upsertFile(this.flowsDir, flowPath, JSON.stringify(flowContent, null, 2)),\n        this.ghostManager.upsertFile(this.flowsDir, uiPath, JSON.stringify(uiContent, null, 2))\n      ])\n    )\n\n    const pathsToOmit = _.flatten(flowsToSave.map(flow => [flow.flowPath, flow.uiPath]))\n\n    const flowFiles = await this.ghostManager.directoryListing(this.flowsDir, '.json', pathsToOmit)\n    const flowsDeletePromises = flowFiles.map(filePath => this.ghostManager.deleteFile(this.flowsDir, filePath))\n\n    await Promise.all(flowsSavePromises.concat(flowsDeletePromises))\n\n    this.emit('flowsChanged')\n  }\n\n  async _prepareSaveFlow(flow) {\n    flow = Object.assign({}, flow, { version: '0.1' })\n\n    const schemaError = validateFlowSchema(flow)\n    if (schemaError) {\n      throw new Error(schemaError)\n    }\n\n    // What goes in the ui.json file\n    const uiContent = {\n      nodes: flow.nodes.map(node => ({ id: node.id, position: _.pick(node, 'x', 'y') })),\n      links: flow.links\n    }\n\n    // What goes in the .flow.json file\n    const flowContent = {\n      ..._.pick(flow, 'version', 'catchAll', 'startNode', 'skillData'),\n      nodes: flow.nodes.map(node => _.omit(node, 'x', 'y', 'lastModified'))\n    }\n\n    const flowPath = flow.location\n    return { flowPath, uiPath: this._uiPath(flowPath), flowContent, uiContent }\n  }\n\n  _uiPath(flowPath) {\n    return flowPath.replace(/\\.flow\\.json/i, '.ui.json')\n  }\n}\n","import path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\n\nexport default class ModuleConfiguration {\n  constructor(options) {\n    this.manager = options.manager\n    this.module = options.module\n    this.logger = options.logger\n    this.configLocation = options.configLocation\n  }\n\n  _getFileName() {\n    const sanitizedName = this.module.name\n      .replace(/^@botpress(-)?\\//i, '')\n      .replace(/^botpress(-)?/i, '')\n      .replace(path.delimiter, '_')\n\n    return `${sanitizedName}.json`\n  }\n\n  _getOptions() {\n    return this.module.options\n  }\n\n  _hasDefaultConfig() {\n    const filePath = path.resolve(this.module.path, 'config.json')\n    return fs.existsSync(filePath)\n  }\n\n  _readDefaultConfig() {\n    const filePath = path.resolve(this.module.path, 'config.json')\n    return fs.readFileSync(filePath, 'utf8')\n  }\n\n  async loadAll(caching = true) {\n    const config = await this.manager.loadAll(this._getFileName(), this._getOptions(), caching)\n\n    const file = this._getFileName()\n    const filePath = path.resolve(this.configLocation, file)\n\n    _.mapValues(config, (value, key) => {\n      if (value === '<<UPDATE_ME>>') {\n        const message = `[${this.module.name}] Missing mandatory configuration for \"${key}\". \nYou can provide this value in \"${filePath}\"`\n        this.logger.error(message)\n        throw new Error(message)\n      }\n    })\n\n    return config\n  }\n\n  async get(key, caching = true) {\n    return this.manager.get(this._getFileName(), key, this._getOptions(), caching)\n  }\n\n  /**\n   * Copy the module's default configuration file to the bot's config directory\n   * @private\n   */\n  async bootstrap() {\n    if (!this._hasDefaultConfig()) {\n      return\n    }\n\n    const file = this._getFileName()\n    const filePath = path.resolve(this.configLocation, file)\n    const content = this._readDefaultConfig()\n\n    fs.writeFileSync(filePath, content, 'utf8')\n    this.logger.info(`Configuration for module \"${this.module.name}\" has been created at ${filePath}`)\n  }\n\n  /**\n   * Checks whether the module has a configuration file\n   * and if the bot doesn't have the configuration file for it.\n   * @private\n   * @return {Boolean}\n   */\n  async isConfigMissing() {\n    const file = this._getFileName()\n    const filePath = path.resolve(this.configLocation, file)\n    return this._hasDefaultConfig() && !fs.existsSync(filePath)\n  }\n}\n","/**\n * The Configuration Manager is in charge of the configuration\n * for all the modules. It knows how to provision and load configuration\n * from the right places (env variables, files, botfile).\n * @namespace ConfigurationManager\n * @private\n */\n\nimport Joi from 'joi'\nimport _ from 'lodash'\nimport yn from 'yn'\nimport path from 'path'\nimport fs from 'fs'\nimport json5 from 'json5'\n\nimport ModuleConfiguration from './module'\nimport { isDeveloping } from '../util'\n\nconst validations = {\n  any: (value, validation) => validation(value),\n  string: (value, validation) => typeof value === 'string' && validation(value),\n  choice: (value, validation) => _.includes(validation, value),\n  bool: (value, validation) => (yn(value) === true || yn(value) === false) && validation(value)\n}\n\nconst transformers = {\n  bool: value => yn(value)\n}\n\nconst defaultValues = {\n  any: null,\n  string: '',\n  bool: false\n}\n\nconst amendOption = (option, name) => {\n  const validTypes = _.keys(validations)\n  if (!option.type || !_.includes(validTypes, option.type)) {\n    throw new Error(`Invalid type (${option.type || ''}) for config key (${name})`)\n  }\n\n  const validation = option.validation || (() => true)\n\n  if (typeof option.default !== 'undefined' && !validations[option.type](option.default, validation)) {\n    throw new Error(`Invalid default value (${option.default}) for (${name})`)\n  }\n\n  if (!option.default && !_.includes(_.keys(defaultValues), option.type)) {\n    throw new Error(`Default value is mandatory for type ${option.type} (${name})`)\n  }\n\n  return {\n    type: option.type,\n    required: option.required || false,\n    env: option.env || null,\n    default: option.default || defaultValues[option.type],\n    validation: validation\n  }\n}\n\nconst amendOptions = options => {\n  return _.mapValues(options, amendOption)\n}\n\nexport default class ConfigurationManager {\n  constructor(options) {\n    if (isDeveloping) {\n      const schema = Joi.object().keys({\n        configLocation: Joi.string()\n          .min(1)\n          .required(),\n        botfile: Joi.object().required(),\n        logger: Joi.object().required()\n      })\n\n      Joi.assert(options, schema, 'Invalid constructor elements for Configuration Manager')\n    }\n\n    this.configLocation = options.configLocation\n    this.botfile = options.botfile\n    this.logger = options.logger\n    this._memoizedLoadAll = _.memoize(this._loadAll.bind(this))\n  }\n\n  _loadFromDefaultValues(options) {\n    return _.mapValues(options, value => value.default)\n  }\n\n  _loadFromConfigFile(file, options) {\n    const filePath = path.resolve(this.configLocation, file)\n\n    if (fs.existsSync(filePath)) {\n      const content = fs.readFileSync(filePath, 'utf8')\n      return json5.parse(content)\n    }\n\n    return {}\n  }\n\n  _loadFromEnvVariables(options) {\n    const obj = {}\n\n    _.mapValues(process.env, (value, key) => {\n      if (_.isNil(value)) {\n        return\n      }\n      const entry = _.findKey(options, { env: key })\n      if (entry) {\n        obj[entry] = value\n      }\n    })\n\n    return obj\n  }\n\n  _loadAll(file, options = {}) {\n    options = amendOptions(options)\n\n    let config = this._loadFromDefaultValues(options)\n    Object.assign(config, this._loadFromConfigFile(file, options))\n    Object.assign(config, this._loadFromEnvVariables(options))\n\n    // Transform the values if there's a transformer for this type of value\n    config = _.mapValues(config, (value, key) => {\n      const { type } = options[key]\n      if (transformers[type]) {\n        return transformers[type](value)\n      } else {\n        return value\n      }\n    })\n\n    return config\n  }\n\n  /**\n   * Returns a Configuration for a specific module\n   * @param  {Object} module A module object\n   * @private\n   * @return {ModuleConfiguration} A module-specific configuration\n   */\n  getModuleConfiguration(module) {\n    return new ModuleConfiguration({\n      manager: this,\n      module: module,\n      configLocation: this.configLocation,\n      logger: this.logger\n    })\n  }\n\n  /**\n   * Loads configuration from the right module\n   * @param  {String} file The name of the configuration file\n   * @param  {Object} options\n   * @private\n   * @return {Object} The full configuration object, assembled from various sources\n   */\n  async loadAll(file, options, caching = true) {\n    const getter = caching ? this._memoizedLoadAll : this._loadAll\n    return getter(file, options)\n  }\n\n  async get(file, key, options, caching = true) {\n    const config = await this.loadAll(file, options, caching)\n    return config[key]\n  }\n}\n","import EventEmitter2 from 'eventemitter2'\n\nclass EventBus extends EventEmitter2 {\n  constructor() {\n    super({\n      wildcard: true,\n      maxListeners: 100\n    })\n  }\n}\n\nmodule.exports = EventBus\n","import Promise from 'bluebird'\nimport nanoid from 'nanoid'\nimport moment from 'moment'\nimport ms from 'ms'\nimport { findIndex } from 'lodash'\n\nimport helpers from '../database/helpers'\n\nconst DEFAULTS = {\n  timestampColumn: 'created_on'\n}\n\n/** The DB Janitor is the component that\n automatically clears old records from the specific tables\n according to the configuration.\n @namespace DbJanitor\n @example\n bp.janitor.add({...})\n */\nconst createJanitor = ({ db, logger, intervalMs = ms('1m') }) => {\n  const tasks = []\n  let currentPromise = null\n\n  // TODO: impplement `debuounce` param which, when set,\n  // prevents the specific task form running too often\n  // The goal is to have the interval reasonably low (1/5/10s)\n  // for some tasks like dialog sessions\n  // but don't run other tasks like logs more often than every 1/5/10min\n  const runTask = async ({ table, ttl, timestampColumn }) => {\n    logger.debug(`[DB Janitor] Running for table \"${table}\"`)\n    const knex = await db.get()\n    const outdatedCondition = helpers(knex).date.isBefore(timestampColumn, moment().subtract(ttl, 'ms'))\n    return knex(table)\n      .where(outdatedCondition)\n      .del()\n      .then()\n  }\n\n  const runTasks = () => {\n    logger.debug('[DB Janitor] Running tasks')\n    if (currentPromise) {\n      // don't run the tasks if the previous batch didn't finish yet\n      logger.debug('[DB Janitor] Skipping the current run, previous operation still running')\n      return\n    }\n    currentPromise = Promise.each(tasks, runTask)\n      .catch(err => {\n        logger.error('[DB Janitor] Error:', err.message)\n      })\n      .finally(() => {\n        currentPromise = null\n      })\n  }\n\n  let intervalId = null\n\n  /**\n   * Start the daemon that will keep checking the DB and delete\n   * the outdated records according to the config,\n   * see {@link DbJanitor#add}.\n   * @function DbJanitor#start\n   * @returns {void}\n   */\n  const start = () => {\n    if (intervalId) {\n      return\n    }\n    intervalId = setInterval(runTasks, intervalMs)\n    logger.info('[DB Janitor] Started')\n  }\n\n  /**\n   * Add the table for the janitor to keep watching and cleaning.\n   * @function DbJanitor#add\n   * @param {object} options\n   * @param {string} options.table The name of the DB table to watch.\n   * @param {number} options.ttl Records Time to Live in **milliseconds**.\n   * @param {string} [options.timestampColumn=\"created_on\"] The column\n   *  to check if the record is outdated.\n   * @returns {string} The id of the added task.\n   */\n  const add = options => {\n    logger.debug(`[DB Janitor] Added table \"${options.table}\"`)\n    const id = nanoid()\n    tasks.push(Object.assign({ id }, DEFAULTS, options))\n    return id\n  }\n\n  /**\n   * Remove the  table for the janitor to keep watching and cleaning.\n   * @function DbJanitor#remove\n   * @param {string} id The ID of the task returned by {@link DbJanitor#add}.\n   * @returns {void}\n   */\n  const remove = id => {\n    const i = findIndex(tasks, { id })\n    if (i < 0) {\n      logger.error(`[DB Janitor] Unknown task ID \"${id}\"`)\n      return\n    }\n    const [{ table }] = tasks.splice(i, 1)\n    logger.debug(`[DB Janitor] Removed table \"${table}\"`)\n  }\n\n  /**\n   * Stop the daemon.\n   * @function DbJanitor#stop\n   * @returns {void}\n   */\n  const stop = () => {\n    clearInterval(intervalId)\n    intervalId = null\n    logger.info('[DB Janitor] Stopped')\n  }\n\n  return { start, add, remove, stop }\n}\n\nexport default createJanitor\n","import _ from 'lodash'\nimport Promise from 'bluebird'\n\nimport helpers from '../database/helpers'\n\nmodule.exports = {\n  random: (knex, category, args) => {\n    return knex('content_items')\n      .where({ categoryId: category })\n      .orderBy(knex.raw('random()'))\n      .limit(1)\n      .get(0)\n  }\n}\n","module.exports = require(\"verror\");","/**\n * The Content Manager is mainly in charge of storing and retrieving\n * all the content that is stored and known by the bot. The content includes (but is not limited to)\n * the messages that the bot sends to users.\n * @see {@link https://botpress.io/docs/10.0/getting_started/trivia_content/}\n * @namespace  ContentManager\n * @example\n * bp.contentManager\n */\n\nimport path from 'path'\nimport fs from 'fs'\n\nimport { VError } from 'verror'\n\nimport _ from 'lodash'\nimport Promise from 'bluebird'\nimport glob from 'glob'\nimport mkdirp from 'mkdirp'\nimport nanoid from 'nanoid'\nimport json5 from 'json5'\n\nimport helpers from '../database/helpers'\nimport { getInMemoryDb } from '../util'\n\nconst getNewItemId = category => {\n  const prefix = (category.renderer || category.id).replace(/^#/, '')\n  return `${prefix}-${nanoid(6)}`\n}\n\nconst prepareDb = async () => {\n  const knex = getInMemoryDb()\n\n  // NB! This is in-memory temprorary database\n  // It is freshly created so we know there are no tables\n  // We also use camelCased columns for convenience\n  await knex.schema.createTable('content_items', table => {\n    table.string('id').primary()\n    table.text('data')\n    table.text('formData')\n    table.text('metadata')\n    table.string('categoryId')\n    table.text('previewText')\n    table.string('createdBy')\n    table.timestamp('createdOn')\n  })\n\n  return knex\n}\n\nconst defaults = {\n  contentDir: './content',\n  contentDataDir: './content_data'\n}\n\nmodule.exports = async ({ botfile, projectLocation, logger, ghostManager }) => {\n  const categories = []\n  const categoryById = {}\n  const fileById = {}\n\n  const getItemProviders = {}\n\n  const contentDir = path.resolve(projectLocation, botfile.contentDir || defaults.contentDir)\n  const contentDataDir = path.resolve(projectLocation, botfile.contentDataDir || defaults.contentDataDir)\n\n  const knex = await prepareDb()\n\n  const transformItemDbToApi = item => {\n    if (!item) {\n      return item\n    }\n\n    return {\n      ...item,\n      data: JSON.parse(item.data),\n      formData: JSON.parse(item.formData),\n      metadata: (item.metadata || '').split('|').filter(i => i.length > 0)\n    }\n  }\n\n  const transformItemApiToDb = item => {\n    if (!item) {\n      return item\n    }\n\n    const result = { ...item }\n\n    if ('formData' in item) {\n      result.formData = JSON.stringify(item.formData)\n    }\n    if ('data' in item) {\n      result.data = JSON.stringify(item.data)\n    }\n    if ('metadata' in item) {\n      result.metadata = '|' + (item.metadata || []).filter(i => !!i).join('|') + '|'\n    }\n\n    return result\n  }\n\n  /**\n   * @typedef {Object} ContentManager~Element\n   * @memberOf ContentManager\n   */\n\n  /**\n   * @typedef {Object} ContentManager~CategorySchema\n   * @memberOf ContentManager\n   * @prop {Object} json The JSONSchema\n   * @prop {String} ui The UI JSONSchema\n   * @property {String} description\n   * @property {String} renderer The name of the Content Renderer\n   */\n\n  /**\n   * @typedef {Object} ContentManager~Category\n   * @memberOf ContentManager\n   * @prop {String} id\n   * @prop {String} title\n   * @property {String} description\n   * @property {Number} count The number of elements in that category\n   * @property {ContentManager~CategorySchema} schema\n   */\n\n  /**\n   * Returns the elements of a given category\n   * @param  {String} categoryId The category, for example `text` or `trivia`.\n   * @param  {Number} [options.from=0] Pagination parameter (where to start)\n   * @param  {Number} [options.count=50] Pagination parameter (how many elements to return)\n   * @param  {String} [options.searchTerm=] Only return the elements containing this term\n   * @param  {Array.<String>}  [options.orderBy=['createdOn']]    A list of properties to order the elements by.\n   * @return {ContentManager~Element[]}\n   * @public\n   * @memberOf! ContentManager\n   */\n  const listCategoryItems = async (categoryId, { from = 0, count = 50, searchTerm, orderBy = ['createdOn'] } = {}) => {\n    let query = knex('content_items')\n\n    if (categoryId) {\n      query = query.where({ categoryId })\n    }\n\n    if (searchTerm) {\n      query = query.where(function() {\n        this.where('metadata', 'like', `%${searchTerm}%`)\n          .orWhere('formData', 'like', `%${searchTerm}%`)\n          .orWhere('id', 'like', `%${searchTerm}%`)\n      })\n    }\n\n    const items = await query\n      .orderBy(...orderBy)\n      .offset(from)\n      .limit(count)\n      .then()\n\n    return items.map(transformItemDbToApi)\n  }\n\n  const dumpDataToFile = async categoryId => {\n    // TODO Do paging here and dump *everything*\n    const items = (await listCategoryItems(categoryId, { count: 10000 })).map(item =>\n      _.pick(item, 'id', 'formData', 'createdBy', 'createdOn')\n    )\n\n    await ghostManager.upsertFile(contentDataDir, fileById[categoryId], JSON.stringify(items, null, 2))\n  }\n\n  const dumpAllDataToFiles = () => Promise.map(categories, ({ id }) => dumpDataToFile(id))\n\n  /**\n   * Get the schema for a given category\n   * @param  {String} categoryId [description]\n   * @return {ContentManager~CategorySchema}\n   */\n  const getCategorySchema = categoryId => {\n    const category = _.find(categories, { id: categoryId })\n    if (category == null) {\n      return null\n    }\n\n    return {\n      json: category.jsonSchema,\n      ui: category.uiSchema,\n      title: category.title,\n      description: category.description,\n      renderer: category.renderer\n    }\n  }\n\n  /**\n   * Returns all the categories\n   * @public\n   * @return {ContentManager~Category[]}\n   * @memberOf! ContentManager\n   */\n  const listAvailableCategories = () =>\n    Promise.map(categories, async category => {\n      const count = await knex('content_items')\n        .where({ categoryId: category.id })\n        .count('* as count')\n        .get(0)\n        .then(row => (row && Number(row.count)) || 0)\n\n      return {\n        id: category.id,\n        title: category.title,\n        description: category.description,\n        count,\n        schema: getCategorySchema(category.id)\n      }\n    })\n\n  const resolveRefs = async data => {\n    if (!data) {\n      return data\n    }\n    if (Array.isArray(data)) {\n      return Promise.map(data, resolveRefs)\n    }\n    if (_.isObject(data)) {\n      return Promise.props(_.mapValues(data, resolveRefs))\n    }\n    if (_.isString(data)) {\n      const m = data.match(/^##ref\\((.*)\\)$/)\n      if (!m) {\n        return data\n      }\n      return knex('content_items')\n        .select('formData')\n        .where('id', m[1])\n        .then(result => {\n          if (!result || !result.length) {\n            throw new Error(`Error resolving reference: ID ${m[1]} not found.`)\n          }\n          return JSON.parse(result[0].formData)\n        })\n        .then(resolveRefs)\n    }\n    return data\n  }\n\n  const computeData = async (categoryId, formData) => {\n    const category = categoryById[categoryId]\n    if (!category) {\n      throw new Error(`Unknown category ${categoryId}`)\n    }\n    return !category.computeData ? formData : category.computeData(formData, computeData)\n  }\n\n  const computeMetadata = async (categoryId, formData) => {\n    const category = categoryById[categoryId]\n    if (!category) {\n      throw new Error(`Unknown category ${categoryId}`)\n    }\n    return !category.computeMetadata ? [] : category.computeMetadata(formData, computeMetadata)\n  }\n\n  const computePreviewText = async (categoryId, formData) => {\n    const category = categoryById[categoryId]\n    if (!category) {\n      throw new Error(`Unknown category ${categoryId}`)\n    }\n    return !category.computePreviewText ? 'No preview' : category.computePreviewText(formData, computePreviewText)\n  }\n\n  const fillComputedProps = async (category, formData) => {\n    if (formData == null) {\n      throw new Error('\"formData\" must be a valid object')\n    }\n\n    const expandedFormData = await resolveRefs(formData)\n\n    const data = await computeData(category.id, expandedFormData)\n    const metadata = await computeMetadata(category.id, expandedFormData)\n    const previewText = await computePreviewText(category.id, expandedFormData)\n\n    if (!_.isArray(metadata)) {\n      throw new Error('computeMetadata must return an array of strings')\n    }\n\n    if (!_.isString(previewText)) {\n      throw new Error('computePreviewText must return a string')\n    }\n\n    if (data == null) {\n      throw new Error('computeData must return a valid object')\n    }\n\n    return {\n      data,\n      metadata,\n      previewText\n    }\n  }\n\n  /**\n   * Creates or updates an [Element]{@link ContentManager~Element}\n   * @param  {String} [options.itemId=] The id of the element to add\n   * @param  {String} options.categoryId The category of the element\n   * @param  {Object} options.formData The content of the element\n   * @async\n   * @public\n   * @memberOf! ContentManager\n   */\n  const createOrUpdateCategoryItem = async ({ itemId, categoryId, formData }) => {\n    categoryId = categoryId && categoryId.toLowerCase()\n    const category = _.find(categories, { id: categoryId })\n\n    if (category == null) {\n      throw new Error(`Category \"${categoryId}\" is not a valid registered categoryId`)\n    }\n\n    const item = { formData, ...(await fillComputedProps(category, formData)) }\n    const body = transformItemApiToDb(item)\n\n    const isNewItemCreation = !itemId\n    if (isNewItemCreation) {\n      itemId = getNewItemId(category)\n    }\n\n    if (!isNewItemCreation) {\n      await knex('content_items')\n        .update(body)\n        .where({ id: itemId })\n        .then()\n    } else {\n      await knex('content_items').insert({\n        ...body,\n        createdBy: 'admin',\n        createdOn: helpers(knex).date.now(),\n        id: itemId,\n        categoryId\n      })\n    }\n\n    await dumpDataToFile(categoryId)\n    return itemId\n  }\n\n  const categoryItemsCount = categoryId => {\n    let q = knex('content_items')\n    if (categoryId && categoryId !== 'all') {\n      q = q.where({ categoryId })\n    }\n    return q.count('id as count').then(([res]) => Number(res.count))\n  }\n\n  const deleteCategoryItems = async ids => {\n    if (!_.isArray(ids) || _.some(ids, id => !_.isString(id))) {\n      throw new Error('Expected an array of Ids to delete')\n    }\n\n    await knex('content_items')\n      .whereIn('id', ids)\n      .del()\n      .then()\n\n    return dumpAllDataToFiles()\n  }\n\n  const getItemDefault = async id => {\n    return knex('content_items')\n      .where({ id })\n      .get(0)\n  }\n\n  /**\n   * Retrieves one item\n   * @param  {String} query Usually the id of the {@link ContentManager.Element},\n   * but can also be a call to a {@link ContentManager.ElementProvider}.\n   * @return {ContentManager.ElementProvider}\n   * @memberof! ContentManager\n   * @example\n   * await bp.contentManager.getItem('#!trivia-12345')\n   * await bp.contentManager.getItem('#trivia-random()')\n   */\n  const getItem = async query => {\n    const providerRegex = /-(.+)\\((.*)\\)$/i\n\n    const pMatch = query.match(providerRegex)\n    let item\n\n    if (pMatch) {\n      const provider = pMatch[1].toLowerCase()\n      const args = pMatch[2]\n      const categoryName = query.substr(0, query.length - pMatch[0].length)\n\n      const fn = getItemProviders[provider]\n\n      if (!fn) {\n        throw new Error(`Invalid content expression \"${query}\", did you forget to register the \"${provider}\" provider?`)\n      }\n\n      item = await fn(knex, categoryName, args)\n\n      if (_.isArray(item)) {\n        throw new Error(`Provider \"${provider}\" returned an array instead of an object`)\n      }\n    } else {\n      item = await getItemDefault(query)\n    }\n\n    if (!item) {\n      return null\n    }\n\n    const category = _.find(categories, { id: item.categoryId })\n\n    return {\n      ...transformItemDbToApi(item),\n      categoryTitle: category.title,\n      categorySchema: getCategorySchema(item.categoryId)\n    }\n  }\n\n  /**\n   * Retrieves multiple items\n   * @param  {String} query Comma-separted string where each part is\n   * the same as an argument to {@link ContentManager.getItem}.\n   * @return {Array<ContentManager.ElementProvider>}\n   * @memberof! ContentManager\n   * @example\n   * await bp.contentManager.getItems('#!trivia-12345,#!trivia-12346')\n   */\n  const getItems = queries => Promise.map(queries.split(','), getItem)\n\n  const getItemsByMetadata = async metadata => {\n    const items = await knex('content_items')\n      .where('metadata', 'like', '%|' + metadata + '|%')\n      .then()\n\n    return transformItemDbToApi(items)\n  }\n\n  /**\n   * Refreshes the content categories metadata internally.\n   * This must be called after using `loadCategoryFromSchema`\n   * @memberOf!  ContentManager\n   * @public\n   */\n  const recomputeCategoriesMetadata = async () => {\n    for (const { id: categoryId } of categories) {\n      await knex('content_items')\n        .select('id', 'formData')\n        .where('categoryId', categoryId)\n        .then()\n        .each(async ({ id, formData }) => {\n          const computedProps = await fillComputedProps(categoryById[categoryId], JSON.parse(formData))\n          return knex('content_items')\n            .where('id', id)\n            .update(transformItemApiToDb(computedProps))\n        })\n    }\n  }\n\n  const loadData = async category => {\n    const fileName = category.id + '.json'\n    fileById[category.id] = fileName\n\n    logger.debug(`Loading data for ${category.id} from ${fileName}`)\n    let data = []\n    try {\n      data = await readDataForFile(fileName)\n    } catch (err) {\n      logger.warn(`Error reading data from ${fileName}`, err)\n    }\n\n    data = await Promise.map(data, async item => ({\n      ...item,\n      categoryId: category.id,\n      id: item.id || getNewItemId(category)\n    }))\n\n    // TODO: use transaction\n    return Promise.mapSeries(data, item =>\n      knex('content_items')\n        .insert(transformItemApiToDb(item))\n        .then()\n    )\n  }\n\n  /**\n   * Loads a new category from a raw schema definition.\n   * *Important:* do not forget to call `ContentManager~recomputeCategoriesMetadata` after calling this\n   * @param  {ContentManager~Category} schema A schema definition\n   * @memberOf!  ContentManager\n   * @return {Object} Returns the loaded category schema\n   * @public\n   */\n  const loadCategoryFromSchema = async schema => {\n    const requiredFields = ['id', 'title', 'jsonSchema']\n\n    requiredFields.forEach(field => {\n      if (_.isNil(schema[field])) {\n        throw new Error(`\"${field}\" is required but missing in schema`)\n      }\n    })\n\n    schema.id = schema.id.toLowerCase()\n\n    if (categoryById[schema.id]) {\n      throw new Error(`There is already a form with id \"${schema.id}\"`)\n    }\n\n    if (!schema.jsonSchema.title) {\n      schema.jsonSchema.title = schema.title\n    }\n\n    categoryById[schema.id] = schema\n    categories.push(schema)\n\n    await loadData(schema)\n\n    return schema\n  }\n\n  const loadCategoriesFromPath = async file => {\n    const filePath = path.resolve(contentDir, './' + file)\n\n    let schemas = null\n\n    if (/\\.json$/i.test(filePath)) {\n      // Using JSON5 instead of regular JSON\n      schemas = json5.parse(fs.readFileSync(filePath, 'utf8'))\n    } else {\n      // Allows for registering .form.js files\n      // eslint-disable-next-line no-eval\n      schemas = eval('require')(filePath) // Dynamic loading require eval for Webpack\n    }\n\n    try {\n      if (_.isArray(schemas)) {\n        for (const schema of schemas) {\n          await loadCategoryFromSchema(schema)\n        }\n      } else {\n        await loadCategoryFromSchema(schemas)\n      }\n    } catch (err) {\n      throw new VError(err, `Error registering Content Element \"${file}\"`)\n    }\n  }\n\n  const readDataForFile = async fileName => {\n    const json = await ghostManager.readFile(contentDataDir, fileName)\n    if (!json) {\n      return []\n    }\n\n    try {\n      const data = JSON.parse(json)\n      if (!Array.isArray(data)) {\n        throw new Error(`${fileName} expected to contain array, contents ignored`)\n      }\n      logger.info(`Read ${data.length} item(s) from ${fileName}`)\n      return data\n    } catch (err) {\n      logger.warn(`Error reading data from ${fileName}`, err)\n      return []\n    }\n  }\n\n  const init = async () => {\n    mkdirp.sync(contentDataDir)\n    await ghostManager.addRootFolder(contentDataDir, { filesGlob: '**/*.json' })\n\n    // DEPRECATED: Files don't have to contain .form anymore\n    const files = await Promise.fromCallback(cb => glob('**/*.@(form.json|form.js|json|js)', { cwd: contentDir }, cb))\n\n    for (const file of files) {\n      try {\n        await loadCategoriesFromPath(file)\n      } catch (err) {\n        throw new VError(err, `[Content Manager] Could not register Content Element \"${file}\"`)\n      }\n    }\n\n    await recomputeCategoriesMetadata()\n  }\n\n  /**\n   * @callback ElementProvider\n   * @memberOf!  ContentManager\n   * @param {KnexInstance} knex An instance of Knex\n   * @param {String} category The name of the category\n   * @param {String} args A string with whatever was passed in the parans e.g. \"random(25)\"\n   * @example\nconst randomProvider = (knex, category, args) => {\nreturn knex('content_items')\n  .where({ categoryId: category })\n  .orderBy(knex.raw('random()'))\n  .limit(1)\n  .get(0)\n}\n   */\n\n  /**\n   * Register a new item provider, which is used when parsing query for {@link ContentManager~getItem}\n   * @param  {String} name The name of the provider, e.g. `random`\n   * @param  {ContentManager.ElementProvider} fn A content provider function\n   * @memberOf ContentManager\n   * @public\n   * @example\n// returns a random element from a given category\nconst randomProvider = (knex, category, args) => {\n  return knex('content_items')\n    .where({ categoryId: category })\n    .orderBy(knex.raw('random()'))\n    .limit(1)\n    .get(0)\n}\n\nbp.contentManager.registerGetItemProvider('random', randomProvider)\n   */\n  const registerGetItemProvider = (name, fn) => {\n    name = name.toLowerCase()\n    getItemProviders[name] = fn\n  }\n\n  return {\n    init,\n    listAvailableCategories,\n    getCategorySchema,\n\n    loadCategoryFromSchema,\n    recomputeCategoriesMetadata,\n\n    createOrUpdateCategoryItem,\n    listCategoryItems,\n    categoryItemsCount,\n    deleteCategoryItems,\n\n    getItem,\n    getItems,\n    getItemsByMetadata,\n\n    registerGetItemProvider\n  }\n}\n","/**\n * The Users namespace contains operations available for the known users of your bot.\n * @public\n * @namespace Users\n * @example\n * bp.users\n */\n\nimport _ from 'lodash'\nimport helpers from './database/helpers'\n\nmodule.exports = ({ db }) => {\n  /**\n   * Returns whether or not a user has a specific tag or not.\n   * @param  {String} userId\n   * @param  {String} tag    The name of the tag. Case insensitive.\n   * @return {Boolean}\n   * @async\n   * @memberof! Users\n   * @example\n   * if (await bp.users.hasTag(event.user.id, 'IS_SUBSCRIBED')) {...}\n   */\n  const hasTag = async (userId, tag) => {\n    const knex = await db.get()\n\n    return knex('users_tags')\n      .select('userId')\n      .where({ userId, tag: _.toUpper(tag) })\n      .limit(1)\n      .then(ret => ret.length > 0)\n  }\n\n  /**\n   * Tags a user with a specific tag (or overwrites an existing one) and a given value for that tag (optional).\n   * Tags can be used to classify users (no value needed) or to store information about them (with a tag value).\n   * Values are useful to store user information like emails, etc.\n   * Value is always assumed to be a string.\n   * @param  {String}  userId\n   * @param  {String}  tag    The name of the tag.\n   * Case insensitive. Note that this property will always be upper-cased.\n   * @param  {String} [value]  Any string value to store info about this tag\n   * @async\n   * @memberof! Users\n   * @example\n   * await bp.users.tag(event.user.id, 'EMAIL', 'sylvain@botpress.io')\n   * await bp.users.tag(event.user.id, 'PAYING_USER')\n   */\n  const tag = async (userId, tag, value = true) => {\n    const knex = await db.get()\n\n    tag = _.toUpper(tag)\n\n    if (await hasTag(userId, tag)) {\n      await knex('users_tags')\n        .where({ userId, tag })\n        .update({\n          userId,\n          tag,\n          value,\n          tagged_on: helpers(knex).date.now()\n        })\n        .then()\n    } else {\n      await knex('users_tags')\n        .insert({\n          userId,\n          tag,\n          value,\n          tagged_on: helpers(knex).date.now()\n        })\n        .then()\n    }\n  }\n\n  /**\n   * Removes a tag from a user if it exists.\n   * @param  {String} userId\n   * @param  {String} tag    Name of the tag. Case-insensitive.\n   * @memberof! Users\n   */\n  const untag = async (userId, tag) => {\n    const knex = await db.get()\n\n    await knex('users_tags')\n      .where({ userId, tag: _.toUpper(tag) })\n      .del()\n      .then()\n  }\n\n  /**\n   * Returns the value of a user tag, if it exists\n   * @param  {String} userId [description]\n   * @param  {String} tag    [description]\n   * @return {?String}        Value of the tag\n   * @memberof! Users\n   */\n  const getTag = async (userId, tag, details = false) => {\n    const knex = await db.get()\n\n    return knex('users_tags')\n      .select('value', 'tagged_on', 'tag')\n      .where({ userId, tag: _.toUpper(tag) })\n      .limit(1)\n      .then()\n      .get(0)\n      .then(ret => {\n        if (ret && details) {\n          return {\n            ...ret,\n            tagged_on: new Date(ret.tagged_on)\n          }\n        }\n\n        return ret && ret.value\n      })\n  }\n\n  /**\n   * Returns all the tags for a given user\n   * @param  {String} userId [description]\n   * @return {Array.<{ tag: String, value: String}>}        An array of all the tags for this user\n   * @memberof! Users\n   */\n  const getTags = async userId => {\n    const knex = await db.get()\n\n    return knex('users_tags')\n      .where({ userId })\n      .select('tag', 'value')\n      .then(tags => {\n        return _.map(tags, v => {\n          return { tag: v.tag, value: v.value }\n        })\n      })\n  }\n\n  // TODO: Fix this, list of tags is always empty\n  const list = async (limit = 50, from = 0) => {\n    const knex = await db.get()\n\n    const isLite = helpers(knex).isLite()\n\n    const selectTags = isLite ? 'group_concat(tag) as tags' : \"string_agg(tag, ',') as tags\"\n\n    const subQuery = knex('users_tags')\n      .select('userId', knex.raw(selectTags))\n      .groupBy('userId')\n\n    return knex('users')\n      .leftJoin(knex.raw('(' + subQuery.toString() + ') AS t2'), 'users.id', '=', 't2.userId')\n      .select(\n        'users.id',\n        'users.userId',\n        'users.platform',\n        'users.gender',\n        'users.timezone',\n        'users.locale',\n        'users.picture_url',\n        'users.first_name',\n        'users.last_name',\n        'users.created_on',\n        't2.tags'\n      )\n      .orderBy('users.created_on', 'asc')\n      .offset(from)\n      .limit(limit)\n      .then(users =>\n        users.map(x =>\n          Object.assign(x, {\n            tags: (x.tags && x.tags.split(',')) || []\n          })\n        )\n      )\n  }\n\n  // TODO: Fix this, just doesn't work\n  const listWithTags = async (tags, limit = 50, from = 0) => {\n    const knex = await db.get()\n\n    tags = _.filter(tags, t => _.isString(t)).map(t => t.toUpperCase())\n    const filterByTag = tag =>\n      knex('users_tags')\n        .select('userId')\n        .where('tag', tag)\n\n    const isLite = helpers(knex).isLite()\n    const selectTags = isLite ? 'group_concat(tag) as tags' : \"string_agg(tag, ',') as tags\"\n\n    let query = knex('users')\n    let i = 0\n\n    const subQuery = knex('users_tags')\n      .select('userId', knex.raw(selectTags))\n      .groupBy('userId')\n\n    tags.forEach(tag => {\n      const name = 't' + ++i\n      query = query.join(\n        knex.raw('(' + filterByTag(tag).toString() + ') AS ' + name),\n        'users.id',\n        '=',\n        name + '.userId'\n      )\n    })\n\n    return query\n      .leftJoin(knex.raw('(' + subQuery.toString() + ') AS tt'), 'users.id', '=', 'tt.userId')\n      .select(\n        'users.userId as userId',\n        'users.platform as platform',\n        'users.gender as gender',\n        'users.timezone as timezone',\n        'users.locale as locale',\n        'users.picture_url as picture_url',\n        'users.first_name as first_name',\n        'users.last_name as last_name',\n        'users.created_on as created_on',\n        'tt.tags as tags'\n      )\n      .orderBy('users.created_on', 'asc')\n      .offset(from)\n      .limit(limit)\n      .then(users =>\n        users.map(x =>\n          Object.assign(x, {\n            tags: (x.tags && x.tags.split(',')) || []\n          })\n        )\n      )\n  }\n\n  const count = async () => {\n    const knex = await db.get()\n\n    return knex('users')\n      .count('* as count')\n      .then()\n      .get(0)\n      .then(ret => parseInt(ret && ret.count))\n  }\n\n  return { tag, untag, hasTag, getTag, getTags, list, count, listWithTags }\n}\n","module.exports = require(\"util\");","import util from 'util'\n\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nmodule.exports = ({ sendContent, db }) => {\n  const getUser = async id => {\n    const knex = await db.get()\n    const users = await knex('users')\n      .where({ id: id })\n      .orWhere('userId', id)\n      .limit(1)\n      .select('*')\n\n    if (!users || users.length <= 0) {\n      throw new Error(`User \"${id}\" not found in the database`)\n    }\n\n    return users[0]\n  }\n\n  /**\n   * Proactively sends a user a message\n   * @param  {string|object} user id or a full user object\n   * @param  {string} elementOrRenderer The name of the renderer to use OR an element id\n   * @param  {object} data Additionnal data that will be passed to the renderer\n   * @async\n   * @memberof! ContentRenderer\n   * @example\n   * bp.renderers.sendToUser(event.user.id, '#!text-77734', { typingIndicators: false })\n   */\n  const sendToUser = async (user, elementOrRenderer, data) => {\n    if (!_.isString(elementOrRenderer)) {\n      throw new Error('Invalid renderer: ' + elementOrRenderer)\n    }\n\n    if (_.isString(user)) {\n      user = await getUser(user)\n    }\n\n    if (!user || !user.id) {\n      throw new Error('Invalid user object: ' + util.inspect(user))\n    }\n\n    const text = 'This is not a real event, it has been forged by proactive.'\n    const forgedEvent = {\n      platform: user.platform,\n      user: user,\n      type: 'proactive',\n      text: text,\n      raw: { forged: true, message: text, to: user && user.id }\n    }\n\n    return sendContent(forgedEvent, elementOrRenderer, data)\n  }\n\n  return { sendToUser }\n}\n","import Mustache from 'mustache'\nimport ms from 'ms'\nimport _ from 'lodash'\n\n// TODO: can use typed-error that handles stack capturing\nclass ParsingError extends Error {\n  constructor(bloc, instructionIndex, error) {\n    super(`Error parsing bloc '${bloc}' at instruction ${instructionIndex + 1}: ${error}`)\n    this.bloc = bloc\n    this.instructionIndex = instructionIndex\n    this.internalMessage = error\n    Error.captureStackTrace(this, ParsingError)\n  }\n}\n\nconst premapInstruction = ({ currentPlatform }) => ({\n  instruction,\n  index,\n  instructions,\n  detectedPlatforms,\n  blocName\n}) => {\n  if (typeof instruction === 'string' || _.isArray(instruction)) {\n    return [\n      {\n        text: instruction\n      }\n    ]\n  }\n\n  // Parsing conditionals\n  const evaluate = (val, exp) => {\n    if (typeof exp === 'boolean') {\n      return val === exp\n    }\n    if (_.isArrayLike(exp)) {\n      return val ? !_.isEmpty(exp) : _.isEmpty(exp)\n    } else {\n      return val ? !!exp : !exp\n    }\n  }\n\n  if (!_.isNil(instruction.if) && !_.isNil(instruction.unless)) {\n    throw new ParsingError(blocName, index, \"Message can't be both 'if' and 'else'.\")\n  }\n\n  if (!_.isNil(instruction.unless) && !evaluate(false, instruction.unless)) {\n    return []\n  }\n\n  if (!_.isNil(instruction.if) && !evaluate(true, instruction.if)) {\n    return []\n  }\n\n  // Parsing \".on\"\n  let i = Object.assign({}, instruction)\n  if (instruction.on) {\n    if (typeof instruction.on === 'string') {\n      const platforms = instruction.on\n        .toLowerCase()\n        .split('+')\n        .map(_.trim)\n      if (!_.includes(platforms, currentPlatform.toLowerCase())) {\n        return []\n      } else {\n        i['__platformSpecific'] = true\n      }\n    } else if (_.isPlainObject(instruction.on)) {\n      const on = _.mapKeys(instruction.on, (__, key) => key.toLowerCase())\n\n      // This allows multiple platforms to be specified\n      // e.g. \"messenger+slack+web\"\n      _.keys(on).forEach(key => {\n        if (key.indexOf('+') >= 0) {\n          _.split(key, '+').forEach(alias => {\n            const trimmed = _.trim(alias)\n            on[trimmed] = _.merge({}, on[trimmed] || {}, on[key])\n          })\n        }\n      })\n\n      i = Object.assign(i, on[currentPlatform.toLowerCase()], { on: currentPlatform })\n    } else {\n      throw new ParsingError(\n        blocName,\n        index,\n        '\"on\" must be a string or a plain object but was a ' + typeof instruction.on\n      )\n    }\n  }\n\n  return [i]\n}\n\nconst mapInstruction = ({ currentPlatform, processors, incomingEvent }) => ({ instruction, messages, blocName }) => {\n  const ret = []\n\n  if (!_.isNil(instruction.wait)) {\n    ret.push({\n      __internal: true,\n      type: 'wait',\n      wait: _.isString(instruction.wait) ? ms(instruction.wait || 1000) : parseInt(instruction.wait) || 1000\n    })\n  }\n\n  if (!_.isNil(instruction.typing)) {\n    instruction.typing = _.isString(instruction.typing)\n      ? ms(instruction.typing || 1000)\n      : parseInt(instruction.typing) || 1000\n  }\n\n  const raw = _.omit(instruction, ['unless', 'if', 'on', 'wait'])\n\n  if (!_.keys(raw).length) {\n    return ret\n  }\n\n  if (_.isArray(instruction.text)) {\n    instruction.text = _.sample(instruction.text)\n  }\n\n  const processor = currentPlatform && processors[currentPlatform]\n  if (processor) {\n    const msg = processor({ instruction, messages, blocName, event: incomingEvent })\n    if (msg) {\n      ret.push(msg)\n    }\n\n    return ret\n  }\n\n  throw new Error('Unsupported platform: ' + currentPlatform)\n}\n\nconst mapBloc = (bloc, blocName, options, processors, incomingEvent) => {\n  const { currentPlatform, throwIfNoPlatform = false } = options\n\n  if (!currentPlatform && throwIfNoPlatform) {\n    throw new Error('You need to supply `currentplatform`')\n  }\n\n  const _premapInstruction = premapInstruction({ currentPlatform })\n  const _mapInstruction = mapInstruction({ currentPlatform, processors, incomingEvent })\n\n  if (!Array.isArray(bloc)) {\n    bloc = [bloc]\n  }\n\n  const messages = []\n  const detectedPlatforms = []\n  const instructions = []\n\n  // Premapping allows for modifications, drop and addition of instructions\n  _.forEach(bloc, (instruction, index) => {\n    const add = _premapInstruction({\n      instruction,\n      index,\n      instructions: bloc,\n      detectedPlatforms,\n      blocName\n    })\n\n    add && _.forEach(add, i => instructions.push(i))\n  })\n\n  _.forEach(instructions, instruction => {\n    const m = _mapInstruction({ instruction, messages, blocName })\n\n    if (m != null) {\n      // Messages can be null when the instruction only modified existing messages\n      m.forEach(message => messages.push(message))\n    }\n  })\n\n  return messages\n}\n\nconst renderMustache = (template, context) => {\n  Mustache.parse(template)\n  return Mustache.render(template, context)\n}\n\nconst hydrateMustache = (obj, context) => {\n  if (_.isString(obj)) {\n    return renderMustache(obj, context)\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(v => hydrateMustache(v, context))\n  }\n  if (_.isObject(obj)) {\n    return _.mapValues(obj, v => hydrateMustache(v, context))\n  }\n  return obj\n}\n\nmodule.exports = async ({ rendererName, rendererFn, context, options, processors, incomingEvent }) => {\n  // We're running it a second time to do second-level variable replacement\n  // This happens often when there are variables used in the Content Manager\n  const rawBloc = hydrateMustache(hydrateMustache(await rendererFn(context), context), context)\n\n  return mapBloc(rawBloc, rendererName, options, processors, incomingEvent)\n}\n","/**\n * The Content Renderer is in charge of transforming an {@link ContentManager~Element}\n * into a channel-specific object.\n * @namespace ContentRenderer\n * @example\n * bp.renderers\n */\n\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nimport Engine from './engine'\nimport Proactive from './proactive'\n\nmodule.exports = ({ logger, middlewares, db, contentManager, botfile }) => {\n  const processors = {} // A map of all the platforms that can process outgoing messages\n  const renderers = {} // A map of all the registered renderers\n\n  const registerChannel = ({ platform, processOutgoing }) => {\n    if (!_.isString(platform)) {\n      throw new Error(`[Renderers] Platform must be a string, got: ${platform}.`)\n    }\n    if (processors[platform]) {\n      throw new Error(`[Renderers] Platform should only be registered once, platform: ${platform}.`)\n    }\n    if (!_.isFunction(processOutgoing)) {\n      throw new Error(`[Renderers] processOutgoing must be a function, platform: ${platform}.`)\n    }\n\n    logger.verbose(`[Renderers] Enabled for ${platform}.`)\n\n    processors[platform] = processOutgoing\n  }\n\n  /**\n   * @callback Renderer\n   * @memberof! ContentRenderer\n   * @example\n   * bp.renderers.register('#text', data => ({ text: data.englishText }))\n   */\n\n  /**\n   * Registers a new renderer\n   * @param  {String} name Unique name of the renderer (e.g. `#text`).\n   * @param  {ContentRenderer.Renderer} rendererFn The rendering function\n   * @memberOf! ContentRenderer\n   */\n  const register = (name, rendererFn) => {\n    if (!_.isString(name)) {\n      throw new Error(`Renderer name must be a string, received ${name}`)\n    }\n    if (name.startsWith('#')) {\n      name = name.substr(1)\n    }\n\n    renderers[name] = rendererFn\n  }\n\n  /**\n   * Removes a specific renderer if it exists\n   * @param  {String} name Unique name of the renderer (e.g. `#text`)\n   * @memberOf! ContentRenderer\n   */\n  const unregister = name => {\n    if (!_.isString(name)) {\n      throw new Error(`Renderer name must be a string, received ${name}`)\n    }\n    if (name.startsWith('#')) {\n      name = name.substr(1)\n    }\n    delete renderers[name]\n  }\n\n  /**\n   * Returns whether or not a renderer is already registered\n   * @param  {String} name Unique name of the renderer (e.g. `#text`)\n   * @return {Boolean}\n   * @memberOf! ContentRenderer\n   */\n  const isRegistered = name => {\n    if (!_.isString(name)) {\n      throw new Error(`Renderer name must be a string, received ${name}`)\n    }\n    if (name.startsWith('#')) {\n      name = name.substr(1)\n    }\n    return !!renderers[name]\n  }\n\n  const invoke = ({ rendererFn, rendererName, context, outputPlatform, incomingEvent = null }) => {\n    // TODO throw if incomingEvents null <<<==== MOCK IT\n\n    const options = {\n      throwIfNoPlatform: true,\n      currentPlatform: outputPlatform\n    }\n\n    return Engine({ rendererFn, rendererName, context, options, processors, incomingEvent })\n  }\n\n  const doSendContent = async (rendererFn, { rendererName, context, outputPlatform, incomingEvent }) => {\n    const messages = await invoke({ rendererFn, rendererName, context, outputPlatform, incomingEvent })\n\n    return Promise.mapSeries(messages, message => {\n      if (message.__internal) {\n        if (message.type === 'wait') {\n          return Promise.delay(message.wait)\n        }\n      } else {\n        return middlewares.sendOutgoing(message)\n      }\n    })\n  }\n\n  const sendContent = async (incomingEvent, rendererName, additionalData = {}) => {\n    rendererName = rendererName.startsWith('#') ? rendererName.substr(1) : rendererName\n\n    // \"magic\" constants that can be used in the renderers\n    const initialData = {\n      BOT_URL: botfile.botUrl\n    }\n\n    if (rendererName.startsWith('!')) {\n      const itemName = rendererName.substr(1)\n      const contentItem = await contentManager.getItem(itemName)\n\n      if (!contentItem) {\n        throw new Error(`Could not find content item with ID \"${itemName}\" in the Content Manager`)\n      }\n\n      const { categoryId: itemCategoryId } = contentItem\n\n      const itemCategory = contentManager.getCategorySchema(itemCategoryId)\n\n      if (!itemCategory) {\n        throw new Error(\n          `Could not find category \"${itemCategoryId}\" in the Content Manager` + ` for item with ID \"${itemName}\"`\n        )\n      }\n\n      const itemRenderer = itemCategory.renderer\n      if (!_.isString(itemRenderer) || !itemRenderer.startsWith('#') || itemRenderer.length <= 1) {\n        throw new Error(`Invalid renderer '${itemRenderer}' in category '${itemCategoryId}' of Content Manager.\n         A renderer must start with '#'`)\n      }\n\n      rendererName = itemRenderer.substr(1)\n      Object.assign(initialData, _.isArray(contentItem.data) ? { items: contentItem.data } : contentItem.data)\n    }\n\n    const fullContext = Object.assign(\n      initialData,\n      {\n        user: incomingEvent.user,\n        event: _.pick(incomingEvent, ['raw', 'text', 'type', 'platform', 'user'])\n      },\n      additionalData\n    )\n\n    const renderer = renderers[rendererName]\n\n    if (!renderer) {\n      const error = `[Renderer] Renderer not defined (#${rendererName})`\n      logger.error(error)\n      throw new Error(error)\n    }\n\n    await doSendContent(renderer, {\n      rendererName,\n      context: fullContext,\n      outputPlatform: incomingEvent.platform,\n      incomingEvent\n    })\n\n    return {\n      renderer: rendererName,\n      context: fullContext,\n      outputPlatform: incomingEvent.platform\n    }\n  }\n\n  const processIncoming = (event, next) => {\n    event.reply = (rendererName, additionalData = {}) => {\n      return sendContent(event, rendererName, additionalData)\n    }\n\n    next()\n  }\n\n  const incomingMiddleware = {\n    name: 'rendering.instrumentation',\n    type: 'incoming',\n    order: 2, // Should really be first\n    module: 'botpress',\n    description: 'Built-in Botpress middleware that adds a `.reply` to events. Works with renderers.',\n    handler: processIncoming\n  }\n\n  const proactiveMethods = Proactive({ sendContent, db })\n\n  return {\n    registerChannel,\n    registerConnector: registerChannel, // DEPRECATED Use \"channel\" instead of \"connector\"\n    register,\n    unregister,\n    isRegistered,\n    incomingMiddleware,\n    ...proactiveMethods\n  }\n}\n","import fs from 'fs'\nimport path from 'path'\nimport axios from 'axios'\nimport ms from 'ms'\nimport _ from 'lodash'\n\nmodule.exports = ({ projectLocation, botfile, logger }) => {\n  let certificate = null\n  let rolesPromise = null\n\n  setInterval(() => (certificate = null), ms('5 minutes'))\n  setInterval(() => (rolesPromise = null), ms('5 minutes'))\n\n  function _readCloudfile() {\n    const filePath = path.resolve(projectLocation, 'bp-cloud.json')\n    if (!fs.existsSync(filePath)) {\n      throw new Error(\n        'Could not find `bp-cloud.json` file at project root. Have you run \"botpress cloud-pair\" command?'\n      )\n    }\n\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  }\n\n  function getCloudEndpoint() {\n    return _readCloudfile().endpoint\n  }\n\n  function getPairingInfo() {\n    return _.pick(_readCloudfile(), ['botId', 'endpoint', 'token', 'teamId'])\n  }\n\n  function isPaired() {\n    const filePath = path.resolve(projectLocation, 'bp-cloud.json')\n    return fs.existsSync(filePath)\n  }\n\n  function getBotEnv() {\n    return botfile.env\n  }\n\n  async function _getWellKnownRSACert() {\n    if (certificate) {\n      return certificate\n    }\n\n    const endpoint = getCloudEndpoint()\n    const { data } = await axios.get(endpoint + '/api/.well-known/public.key')\n\n    if (data && data.length) {\n      certificate = data\n    }\n\n    logger.debug('[Cloud] Updated certificates')\n\n    return data\n  }\n\n  async function updateRemoteEnv() {\n    if (!isPaired()) {\n      return\n    }\n\n    const { token, endpoint } = getPairingInfo()\n    const { env, botUrl } = botfile\n\n    await axios\n      .put(endpoint + '/api/pairing/env', {\n        botUrl,\n        token,\n        env\n      })\n      .then(() => {\n        logger.debug('[Cloud] Updated environment: ' + env)\n      })\n      .catch(err => {\n        const message = _.get(err, 'response.data.message') || err.message || 'Unknown error'\n        logger.error('[Cloud] Could not update environment: ' + message)\n      })\n  }\n\n  async function _getRemoteRoles() {\n    if (!isPaired()) {\n      return\n    }\n\n    if (rolesPromise) {\n      return rolesPromise\n    }\n\n    const { endpoint, token, botId } = getPairingInfo()\n\n    rolesPromise = axios\n      .get(`${endpoint}/api/bots/${botId}/roles`, {\n        headers: {\n          Authorization: `Bearer bot__${token}`\n        }\n      })\n      .then(({ data: { payload: data } }) => {\n        logger.debug('[Cloud] Received roles: ', data)\n        return data\n      })\n      .catch(err => {\n        const message = _.get(err, 'response.data.message') || err.message || 'Unknown error'\n        logger.error('[Cloud] Error receiving roles: ' + message)\n        return null\n      })\n\n    return rolesPromise\n  }\n\n  async function getUserRoles(roleNames) {\n    if (!isPaired()) {\n      return null\n    }\n\n    const roles = await _getRemoteRoles()\n    return roleNames.reduce((acc, roleName) => {\n      const role = _.find(roles, { name: roleName })\n      acc[roleName] = role && role.rules\n      return acc\n    }, {})\n  }\n\n  return {\n    getCloudEndpoint,\n    getBotEnv,\n    getUserRoles,\n    getCertificate: _getWellKnownRSACert,\n    isPaired,\n    getPairingInfo,\n    updateRemoteEnv\n  }\n}\n","import fs from 'fs'\nimport { resolveProjectFile } from './util'\n\nmodule.exports = projectLocation => {\n  const getBotInformation = () => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath))\n\n    return {\n      name: packageJson.name,\n      version: packageJson.version,\n      description: packageJson.description || '<no description>',\n      author: packageJson.author || '<no author>',\n      license: packageJson.license || 'AGPL-v3.0'\n    }\n  }\n\n  return { getBotInformation }\n}\n","import path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\n\nimport _ from 'lodash'\n\nimport listeners from './listeners'\nimport { resolveProjectFile } from './util'\n\nmodule.exports = ({ projectLocation, bp }) => {\n  const licensesPath = path.join(bp.botpressPath, './licenses')\n\n  const getLicenses = () => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const { license } = JSON.parse(fs.readFileSync(packageJsonPath))\n\n    const agplContent = fs.readFileSync(path.join(licensesPath, 'LICENSE_AGPL3')).toString()\n    const botpressContent = fs.readFileSync(path.join(licensesPath, 'LICENSE_BOTPRESS')).toString()\n\n    return {\n      agpl: {\n        name: 'AGPL-3.0',\n        licensedUnder: license === 'AGPL-3.0',\n        text: agplContent\n      },\n      botpress: {\n        name: 'Botpress',\n        licensedUnder: license.toLowerCase().indexOf('botpress') >= 0,\n        text: botpressContent\n      }\n    }\n  }\n\n  const changeLicense = Promise.method(license => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n\n    const licensePath = resolveProjectFile('LICENSE', projectLocation, true)\n    const licenseFileName = license === 'AGPL-3.0' ? 'LICENSE_AGPL3' : 'LICENSE_BOTPRESS'\n    const licenseContent = fs.readFileSync(path.join(licensesPath, licenseFileName))\n\n    const pkg = JSON.parse(fs.readFileSync(packageJsonPath))\n    pkg.license = license\n\n    fs.writeFileSync(licensePath, licenseContent)\n    fs.writeFileSync(packageJsonPath, JSON.stringify(pkg, null, 2))\n  })\n\n  const middleware = listeners.hear(/^BOT_LICENSE$/, (event, next) => {\n    const packageJsonPath = resolveProjectFile('package.json', projectLocation, true)\n    const { license, name, author } = JSON.parse(fs.readFileSync(packageJsonPath))\n\n    const response = `Bot:  ${name}\nCreated by: ${author}\nLicense: ${license}\nBotpress: ${bp.version}`\n\n    const userId = event.user && event.user.id // TODO Use botpress standard user getter\n\n    if (bp[event.platform] && bp[event.platform].sendText) {\n      bp[event.platform].sendText(userId, response)\n    } else {\n      bp.middlewares.sendOutgoing({\n        platform: event.platform,\n        type: 'text',\n        text: response,\n        raw: {\n          to: userId,\n          message: response,\n          responseTo: event\n        }\n      })\n    }\n  })\n\n  return {\n    getLicensing: async () => {\n      const licenses = getLicenses()\n      const currentLicense = _.find(licenses, { licensedUnder: true }) || licenses.botpress\n\n      return {\n        licensed: true,\n        name: currentLicense.name,\n        status: 'Active',\n        text: currentLicense.text\n      }\n    },\n    changeLicense,\n    middleware,\n    getFeatures: () => ({})\n  }\n}\n","import path from 'path'\nimport { safeId } from '../util'\n\nconst defaultDir = './media'\n\nmodule.exports = ({ botfile, logger, ghostManager, projectLocation }) => {\n  const mediaDir = path.resolve(projectLocation, botfile.mediaDir || defaultDir)\n\n  ghostManager.addRootFolder(mediaDir, { isBinary: true })\n\n  const saveFile = async (filename, buffer) => {\n    filename = `${safeId(20)}-${path.basename(filename)}`\n    await ghostManager.upsertFile(mediaDir, filename, buffer)\n    return filename\n  }\n\n  const readFile = filename => ghostManager.readFile(mediaDir, filename)\n\n  return { saveFile, readFile }\n}\n","/*\n  Table storing bot logs\n*/\n\nimport helpers from './helpers'\n\nmodule.exports = knex => {\n  const h = helpers(knex)\n  return h.createTableIfNotExists('logs', table => {\n    table.increments('id')\n    table.string('level')\n    table.text('message')\n    table.timestamp('created_on')\n  })\n}\n","/*\n  Tables storing ghost content and its revisions\n*/\n\nimport helpers from './helpers'\n\nmodule.exports = knex => {\n  const h = helpers(knex)\n  return h\n    .createTableIfNotExists('ghost_content', table => {\n      table.increments('id')\n      table.string('folder')\n      table.string('file')\n      table.text('content')\n      table.timestamp('modified_on').defaultTo(knex.fn.now())\n    })\n    .then(() =>\n      h.createTableIfNotExists('ghost_revisions', table => {\n        table.increments('id')\n        table.integer('content_id').references('ghost_content.id')\n        table.string('revision')\n        table.timestamp('created_on').defaultTo(knex.fn.now())\n        table.string('created_by')\n      })\n    )\n}\n","/*\n  Table storing the current dialog sessions\n*/\n\nimport helpers from './helpers'\n\nmodule.exports = knex =>\n  helpers(knex).createTableIfNotExists('dialog_sessions', table => {\n    table.string('id').primary() // Usually the user id, channel id, etc..\n    table.string('namespace') // Could be used for A/B testing\n    table.text('state')\n    table.timestamp('created_on').defaultTo(knex.fn.now())\n    table.timestamp('active_on')\n  })\n","/*\n  A table storing all notifications\n*/\n\nimport helpers from './helpers'\n\nmodule.exports = knex => {\n  return helpers(knex).createTableIfNotExists('notifications', table => {\n    table.string('id').unique()\n    table.string('message')\n    table.string('level')\n    table.string('module_id')\n    table.string('module_icon')\n    table.string('module_name')\n    table.string('redirect_url')\n\n    table.timestamp('created_on')\n\n    table.boolean('read')\n    table.boolean('archived')\n  })\n}\n","/*\n  A table storing all the user tags\n*/\n\nimport helpers from './helpers'\n\nmodule.exports = knex => {\n  return helpers(knex).createTableIfNotExists('users_tags', table => {\n    table.string('userId')\n    table.string('tag')\n    table.string('value')\n    table.timestamp('tagged_on')\n    table.unique(['userId', 'tag'])\n  })\n}\n","/*\n  A table storing all the interlocutors (users) and their information\n*/\n\nimport helpers from './helpers'\n\nmodule.exports = knex => {\n  return helpers(knex).createTableIfNotExists('users', table => {\n    table.string('id').primary()\n    table.string('userId')\n    table.string('platform')\n    table.enu('gender', ['unknown', 'male', 'female'])\n    table.integer('timezone')\n    table.string('picture_url')\n    table.string('first_name')\n    table.string('last_name')\n    table.string('locale')\n    table.timestamp('created_on')\n  })\n}\n","module.exports = [\n  require('./users.js'),\n  require('./tags.js'),\n  require('./notifications.js'),\n  require('./sessions.js'),\n  require('./ghost.js'),\n  require('./logs.js')\n]\n","module.exports = require(\"lodash/pick\");","/**\n * The db (database) namespace lets you control the database directly via [Knex]{@link http://knexjs.org/}\n * @public\n * @namespace Database\n * @example\n * await knex = bp.db.get()\n */\n\nimport Promise from 'bluebird'\nimport moment from 'moment'\nimport knex from 'knex'\nimport pick from 'lodash/pick'\n\nimport tables from './tables'\nimport kvs from './kvs'\nimport path from 'path'\n\nconst initializeCoreDatabase = (knex, botpressPath) => {\n  if (!knex) {\n    throw new Error('You must initialize the database before')\n  }\n\n  const directory = path.join(botpressPath, './migrations/')\n  return Promise.mapSeries(tables, fn => fn(knex)).then(() => knex.migrate.latest({ directory }))\n}\n\nconst createKnex = async ({ sqlite, postgres, botpressPath, logger }) => {\n  const commonConfig = {\n    useNullAsDefault: true\n  }\n  if (!postgres.enabled && process.version.startsWith('v10.')) {\n    logger &&\n      logger.warn(\n        '[Compatibility Notice] You are trying to use node@10.x but it has compatibility issues with sqlite3 package.' +\n          ' Please try either downgrading node to 8.x version or enabling postgres (read more at https://botpress.io/docs/latest/recipes/dbs/).'\n      )\n  }\n  const dbConfig = postgres.enabled\n    ? {\n        client: 'pg',\n        connection: postgres.connection || pick(postgres, ['host', 'port', 'user', 'password', 'database', 'ssl'])\n      }\n    : {\n        client: 'sqlite3',\n        connection: { filename: sqlite.location },\n        pool: {\n          afterCreate: (conn, cb) => {\n            conn.run('PRAGMA foreign_keys = ON', cb)\n          }\n        }\n      }\n\n  const _knex = knex(Object.assign(commonConfig, dbConfig))\n\n  await initializeCoreDatabase(_knex, botpressPath)\n  return _knex\n}\n\nmodule.exports = ({ sqlite, postgres, logger, botpressPath }) => {\n  let knex = null\n\n  const getDb = async () => {\n    if (!knex) {\n      knex = await createKnex({ sqlite, postgres, botpressPath, logger })\n    }\n\n    return knex\n  }\n\n  const saveUser = ({\n    id,\n    platform,\n    gender = 'unknown',\n    timezone = null,\n    locale = null,\n    picture_url,\n    first_name,\n    last_name\n  }) => {\n    const userId = platform + ':' + id\n    const userRow = {\n      id: userId,\n      userId: id,\n      platform,\n      gender,\n      timezone,\n      locale,\n      created_on: moment(new Date()).toISOString(),\n      picture_url: picture_url,\n      last_name: last_name,\n      first_name: first_name\n    }\n\n    return getDb().then(knex => {\n      let query = knex('users')\n        .insert(userRow)\n        .where(function() {\n          return this.select(knex.raw(1))\n            .from('users')\n            .where('id', '=', userId)\n        })\n\n      if (postgres.enabled) {\n        query = `${query} on conflict (id) do nothing`\n      } else {\n        // SQLite\n        query = query.toString().replace(/^insert/i, 'insert or ignore')\n      }\n\n      return knex.raw(query)\n    })\n  }\n\n  let kvsInstance = null\n\n  const createKvs = async () => {\n    const knex = await getDb()\n    const _kvs = new kvs(knex)\n    await _kvs.bootstrap()\n    return _kvs\n  }\n\n  const getKvs = async () => {\n    if (!kvsInstance) {\n      kvsInstance = createKvs()\n    }\n\n    return kvsInstance\n  }\n\n  const kvsGet = (...args) => getKvs().then(instance => instance.get(...args))\n  const kvsSet = (...args) => getKvs().then(instance => instance.set(...args))\n\n  const kvsWrapper = { get: kvsGet, set: kvsSet }\n\n  return {\n    /**\n     * Returns an initialized and connected instance of [Knex]{@link http://knexjs.org/}.\n     * Knex is a SQL Query Builder and database abstractor that Botpress (and every Botpress modules) use internally.\n     * [Knex Documentation]{@link http://knexjs.org/#Builder}\n     * @func\n     * @async\n     * @memberOf! Database\n     * @return {KnexQueryBuilder}\n     */\n    get: getDb,\n    saveUser,\n    location: postgres.enabled ? 'postgres' : sqlite.location,\n    get kvs() {\n      logger &&\n        logger.warn(\n          '[Deprecation Notice] `bp.db.kvs` is deprecated and will be removed in Botpress 11. Please use `bp.kvs` directly instead.'\n        )\n      return kvsWrapper\n    },\n    _kvs: kvsWrapper\n  }\n}\n","import _ from 'lodash'\nimport listeners from './listeners'\n\nmodule.exports = bp => {\n  const middleware = {\n    name: 'fallback',\n    type: 'incoming',\n    order: 200,\n    module: 'botpress',\n    description: 'The built-in fallback handler. You may override this by implementing bp.fallbackHandler',\n    handler: (event, next) => {\n      if (_.isFunction(bp.fallbackHandler)) {\n        bp.fallbackHandler(event, next)\n      }\n    }\n  }\n\n  return { middleware }\n}\n","import mware from 'mware'\nimport listeners from './listeners'\n\nmodule.exports = () => {\n  const chain = mware()\n  const handler = (event, next) => {\n    chain.run(event, function() {\n      next.apply(this, arguments)\n    })\n  }\n\n  const middleware = {\n    name: 'hear',\n    type: 'incoming',\n    order: 20,\n    module: 'botpress',\n    description: 'The built-in hear convenience middleware',\n    handler: handler\n  }\n\n  const hear = (condition, callback) => {\n    chain(listeners.hear(condition, callback))\n  }\n\n  return { hear, middleware }\n}\n","import _ from 'lodash'\nimport nanoid from 'nanoid'\n\nimport helpers from './database/helpers'\n\nimport { resolveModuleRootPath } from './util'\n\nconst getOriginatingModule = () => {\n  const origPrepareStackTrace = Error.prepareStackTrace\n  Error.prepareStackTrace = (_, stack) => stack\n\n  const err = new Error()\n  const stack = err.stack\n  Error.prepareStackTrace = origPrepareStackTrace\n  stack.shift()\n\n  return stack[1].getFileName()\n}\n\nconst notifications = ({ knex, modules, logger, events }) => {\n  const toDatabase = (knex, notification) => ({\n    id: notification.id,\n    message: notification.message,\n    level: notification.level,\n    module_id: notification.moduleId,\n    module_icon: notification.icon,\n    module_name: notification.name,\n    redirect_url: notification.url,\n    created_on: helpers(knex).date.now(),\n    read: helpers(knex).bool.false(),\n    archived: helpers(knex).bool.false()\n  })\n\n  const fromDatabase = (knex, row) => ({\n    id: row.id,\n    message: row.message,\n    level: row.level,\n    moduleId: row.module_id,\n    icon: row.module_icon,\n    name: row.module_name,\n    url: row.redirect_url,\n    date: new Date(row.created_on),\n    sound: false,\n    read: helpers(knex).bool.parse(row.read)\n  })\n\n  // TODO: a bunch of functions below doesn't use `await`, should they actually be `async`?\n\n  /**\n   * Marks a single notification as read (but doesn't archive it)\n   * @param  {string} notificationId The id of the notification to mark as read\n   * @return {Promise}\n   */\n  const markAsRead = async notificationId =>\n    knex('notifications')\n      .where({ id: notificationId })\n      .update({ read: helpers(knex).bool.true() })\n      .then()\n\n  /**\n   * Marks all notifications as read (but doesn't archive them)\n   * @return {Promise}\n   */\n  const markAllAsRead = async () =>\n    knex('notifications')\n      .update({ read: helpers(knex).bool.true() })\n      .then()\n\n  /**\n   * Get the top 100 (unseen) notifications\n   * @return {Promise<Array<Notification>>} The list of all unseen notifications\n   */\n  const getInbox = async () =>\n    knex('notifications')\n      .where({ archived: helpers(knex).bool.false() })\n      .orderBy('created_on', 'DESC')\n      .limit(100)\n      .then(rows => rows.map(row => fromDatabase(knex, row)))\n\n  /**\n   * Returns all archived notifications\n   * @return {Promise<Array<Notification>>} The list of all archived notifications\n   */\n  const getArchived = async () =>\n    knex('notifications')\n      .where({ archived: helpers(knex).bool.true() })\n      .orderBy('created_on', 'DESC')\n      .limit(100)\n      .then(rows => rows.map(row => fromDatabase(knex, row)))\n\n  /**\n * Archives a single notification\n * @param  {string} notificationId The id of the notification to archive\n * @return {Promise}\n */\n  const archive = async notificationId =>\n    knex('notifications')\n      .where({ id: notificationId })\n      .update({ archived: helpers(knex).bool.true() })\n      .then()\n\n  /**\n * Archives all notifications\n * @return {Promise}\n */\n  const archiveAll = async () =>\n    knex('notifications')\n      .update({ archived: helpers(knex).bool.true() })\n      .then()\n\n  // Internal use only\n  // Binds events to actions\n  const _bindEvents = () => {\n    events.on('notifications.getAll', async () => {\n      events.emit('notifications.all', await getInbox())\n    })\n\n    events.on('notifications.read', async id => {\n      await markAsRead(id)\n      events.emit('notifications.all', await getInbox())\n    })\n\n    events.on('notifications.allRead', async () => {\n      await markAllAsRead()\n      events.emit('notifications.all', await getInbox())\n    })\n\n    events.on('notifications.trashAll', async () => {\n      await archiveAll()\n      events.emit('notifications.all', await getInbox())\n    })\n  }\n\n  /**\n   * Create and append a new Notification in the Hub. Emits a `notifications.new` event.\n   * @param  {string} options.message     (required) The body message of the notification\n   * @param  {string} options.redirectUrl (optional) The URL the users will be redirected to\n   *                                      when clicking on the notification\n   * @param  {string} options.level       (optional) The level (info, success, error, warning). Defaults to `info`.\n   * @param  {bool} options.enableSound (optional) Whether the notification will trigger a buzzing sound\n   *                                    if a user is currently logged on the dashboard. (defaults to `false`)\n   * @return {Promise}\n   */\n  const create = async ({ message, redirectUrl, level, enableSound }) => {\n    if (!message || typeof message !== 'string') {\n      throw new Error(\"'message' is mandatory and should be a string\")\n    }\n\n    if (!level || typeof level !== 'string' || !_.includes(['info', 'error', 'success'], level.toLowerCase())) {\n      level = 'info'\n    } else {\n      level = level.toLowerCase()\n    }\n\n    const callingFile = getOriginatingModule()\n    const callingModuleRoot = callingFile && resolveModuleRootPath(callingFile)\n\n    const module = _.find(modules, mod => {\n      return mod.root === callingModuleRoot\n    })\n\n    let options = {\n      moduleId: 'botpress',\n      icon: 'view_module',\n      name: 'botpress',\n      url: _.isString(redirectUrl) ? redirectUrl : '/'\n    }\n\n    if (module) {\n      // because the bot itself can send notifications\n      options = {\n        moduleId: module.name,\n        icon: module.settings.menuIcon,\n        name: module.settings.menuText,\n        url: redirectUrl\n      }\n\n      if (!redirectUrl || typeof url !== 'string') {\n        options.url = `/modules/${module.name}`\n      }\n    }\n\n    const notification = {\n      id: nanoid(),\n      message: message,\n      level: level,\n      moduleId: options.moduleId,\n      icon: options.icon,\n      name: options.name,\n      url: options.url,\n      date: new Date(),\n      sound: enableSound || false,\n      read: false\n    }\n\n    await knex('notifications')\n      .insert(toDatabase(knex, notification))\n      .then()\n\n    if (logger) {\n      const logMessage = `[notification::${notification.moduleId}] ${notification.message}`\n      const loggerLevel = logger[level] || logger.info\n      loggerLevel(logMessage)\n    }\n\n    if (events) {\n      events.emit('notifications.new', notification)\n    }\n  }\n\n  return {\n    // ----> Start of legacy API (DEPRECATED as of Botpress 1.1)\n    load: getInbox,\n    send: ({ message, url, level, sound }) => {\n      return create({ message, redirectUrl: url, level, enableSound: sound })\n    },\n    // End of legacy API <---\n    markAsRead,\n    markAllAsRead,\n    archiveAll,\n    archive,\n    getInbox,\n    getArchived,\n    create,\n    // internal API\n    _bindEvents\n  }\n}\n\nmodule.exports = notifications\n","import AbstractAuthenticationProvider from '../provider'\n\nexport default class RootAuthentication extends AbstractAuthenticationProvider {\n  async login(user, password, ip = 'all') {\n    return {\n      success: true,\n      token: 'none'\n    }\n  }\n\n  async authenticateWithError(authHeader) {\n    return {\n      id: 0,\n      username: 'admin',\n      email: 'admin@botpress.io',\n      first_name: 'Admin',\n      last_name: 'Admin',\n      avatar_url: null,\n      roles: ['admin']\n    }\n  }\n\n  getAuthenticationInfo() {\n    return {\n      type: 'none'\n    }\n  }\n\n  async refreshToken(authHeader) {\n    const [scheme, token] = authHeader.split(' ')\n    if (scheme.toLowerCase() !== 'bearer') {\n      // only support Bearer scheme\n      return {\n        success: false,\n        reason: `Wrong scheme ${scheme}, expected Bearer`\n      }\n    }\n\n    // doesn't matter, can return the same token\n    return {\n      success: true,\n      token\n    }\n  }\n\n  async getUserIdentity(token) {\n    return this.authenticateWithError('bearer ' + token)\n  }\n\n  async getJWTSecretOrCertificate() {\n    return null\n  }\n}\n","import jwt from 'jsonwebtoken'\n\nimport AbstractAuthenticationProvider from '../provider'\n\nexport default class CloudAuthentication extends AbstractAuthenticationProvider {\n  constructor(options) {\n    super(options)\n\n    const { botId } = this.cloud.getPairingInfo() || {}\n\n    this.botId = botId\n    this.botEnv = this.cloud.getBotEnv()\n    this.endpoint = this.cloud.getCloudEndpoint()\n  }\n\n  async login() {\n    return { success: false, reason: 'Root authentication is disabled when using Botpress Cloud [BPCLOUDERR]' }\n  }\n\n  getAuthenticationInfo() {\n    return {\n      type: 'cloud',\n      botId: this.botId,\n      botEnv: this.botEnv,\n      endpoint: this.endpoint\n    }\n  }\n\n  async authenticateWithError(authHeader, allowProof = false) {\n    if (!authHeader) {\n      throw new Error('Missing auth header')\n    }\n\n    const [scheme, token] = authHeader.split(' ')\n\n    if (scheme.toLowerCase() !== 'bearer') {\n      throw new Error(`Wrong scheme '${scheme}', expected Bearer`)\n    }\n\n    const secret = await this.cloud.getCertificate()\n    const algorithm = 'RS256'\n\n    const decoded = jwt.verify(token, secret, { algorithms: [algorithm] })\n\n    if (!allowProof && decoded.identity_proof_only) {\n      return false\n    }\n\n    if (decoded.aud !== `urn:bot/${this.botId}`) {\n      return false\n    }\n\n    return decoded.user\n  }\n\n  async refreshToken(authHeader) {\n    const [scheme, token] = authHeader.split(' ')\n    if (scheme.toLowerCase() !== 'bearer') {\n      // only support Bearer scheme\n      return {\n        success: false,\n        reason: `Wrong scheme '${scheme}', expected Bearer`\n      }\n    }\n\n    // doesn't matter, can return the same token\n    return {\n      success: true,\n      token\n    }\n  }\n\n  async getUserIdentity(token) {\n    return this.authenticateWithError('bearer ' + token, true)\n  }\n\n  async getJWTSecretOrCertificate() {\n    return this.cloud.getCertificate()\n  }\n}\n","import fs from 'fs'\nimport path from 'path'\nimport crypto from 'crypto'\n\nimport jwt from 'jsonwebtoken'\n\nimport AbstractAuthenticationProvider from '../provider'\n\nexport default class RootAuthentication extends AbstractAuthenticationProvider {\n  constructor(options) {\n    super(options)\n\n    this._bootstrapToken()\n    this.attempts = {}\n  }\n\n  _bootstrapToken() {\n    let secret = ''\n    const secretPath = path.join(this.dataLocation, 'secret.key')\n\n    const createNewSecret = () => {\n      secret = crypto.randomBytes(256).toString()\n      fs.writeFileSync(secretPath, secret)\n      return secret\n    }\n\n    if (fs.existsSync(secretPath)) {\n      secret = fs.readFileSync(secretPath)\n    }\n\n    if (!secret || secret.length < 15) {\n      secret = createNewSecret()\n    }\n\n    this.secret = secret\n  }\n\n  async _buildToken(loginUser) {\n    return jwt.sign({ user: loginUser }, this.secret, {\n      issuer: 'bot.root',\n      expiresIn: this.securityConfig.tokenExpiry,\n      algorithm: 'HS256'\n    })\n  }\n\n  _attempt(ip) {\n    const { maxAttempts, resetAfter } = this.securityConfig\n\n    // reset the cache if time elapsed\n    if (new Date() - this.lastCleanTimestamp >= resetAfter) {\n      this.attempts = {}\n      this.lastCleanTimestamp = new Date()\n    }\n\n    return (this.attempts[ip] || 0) < maxAttempts\n  }\n\n  async _login(user, password, ip = 'all') {\n    const adminPassword = process.env.BOTPRESS_ADMIN_PASSWORD || this.securityConfig.password\n\n    if (\n      typeof user === 'string' &&\n      user.toLowerCase() === 'admin' &&\n      typeof password === 'string' &&\n      password === adminPassword\n    ) {\n      this.attempts[ip] = 0\n      return {\n        id: 0,\n        username: 'admin',\n        email: 'admin@botpress.io',\n        first_name: 'Admin',\n        last_name: 'Admin',\n        avatar_url: null,\n        roles: ['admin']\n      }\n    } else {\n      this.attempts[ip] = (this.attempts[ip] || 0) + 1\n      return null\n    }\n  }\n\n  async login(user, password, ip = 'all') {\n    const canAttempt = this._attempt(ip)\n    if (!canAttempt) {\n      return { success: false, reason: 'Too many login attempts. Try again later.' }\n    }\n\n    const loginUser = await this._login(user, password, ip)\n\n    if (loginUser) {\n      return {\n        success: true,\n        token: await this._buildToken(loginUser)\n      }\n    } else {\n      return {\n        success: false,\n        reason: 'Bad username / password'\n      }\n    }\n  }\n\n  async authenticateWithError(authHeader) {\n    const [scheme, token] = (authHeader || 'invalid header').split(' ')\n\n    if (scheme.toLowerCase() !== 'bearer') {\n      throw new Error(`Wrong scheme ${scheme}, expected Bearer`)\n    }\n\n    const decoded = jwt.verify(token, this.secret, { algorithms: ['HS256'] })\n\n    if (decoded.identity_proof_only) {\n      return false\n    }\n\n    return decoded.user\n  }\n\n  getAuthenticationInfo() {\n    return {\n      type: 'root'\n    }\n  }\n\n  async refreshToken(authHeader) {\n    try {\n      const loginUser = await this.authenticateWithError(authHeader)\n      return {\n        success: true,\n        token: await this.buildToken(loginUser)\n      }\n    } catch (err) {\n      return {\n        success: false,\n        reason: err.message || 'The token is invalid or expired'\n      }\n    }\n  }\n\n  async getUserIdentity(token) {\n    return this.authenticateWithError('bearer ' + token)\n  }\n\n  async getJWTSecretOrCertificate() {\n    return this.secret\n  }\n}\n","import Joi from 'joi'\n\nimport RootAuthentication from './root'\nimport CloudAuthentication from './cloud'\nimport NoneAuthentication from './none'\nimport { isDeveloping } from '../util'\n\nmodule.exports = async options => {\n  if (isDeveloping) {\n    const schema = Joi.object().keys({\n      dataLocation: Joi.string()\n        .min(1)\n        .required(),\n      projectLocation: Joi.string()\n        .min(1)\n        .required(),\n      securityConfig: Joi.object().required(),\n      db: Joi.object().required(),\n      cloud: Joi.object().required(),\n      logger: Joi.object().required()\n    })\n\n    Joi.assert(options, schema, 'Invalid constructor elements for Authentication Provider')\n  }\n\n  const isCloudPaired = options.securityConfig.useCloud && (await options.cloud.isPaired())\n\n  if (!options.securityConfig.enabled) {\n    return new NoneAuthentication(options)\n  }\n\n  if (isCloudPaired) {\n    return new CloudAuthentication(options)\n  } else {\n    return new RootAuthentication(options)\n  }\n}\n","import winston from 'winston'\nimport ms from 'ms'\nimport Promise from 'bluebird'\n\nimport { isEmpty } from 'lodash'\n\nimport helpers from '../database/helpers'\n\nconst LOGS_FLUSH_INTERVAL = ms('2s')\nconst LOGS_CHUNK_SIZE = 1000\n\nexport default class DbTransport extends winston.Transport {\n  constructor(opts) {\n    super(opts)\n    this.name = 'DBLogger'\n    this.db = opts.db\n\n    opts.janitor.add({\n      table: 'logs',\n      ttl: opts.ttl\n    })\n\n    this.flushInterval = setInterval(this.flush, LOGS_FLUSH_INTERVAL)\n  }\n\n  flushPromise = null\n  batches = []\n\n  doFlush = async () => {\n    const batch = this.batches.shift()\n\n    try {\n      if (!batch || !batch.length) {\n        return\n      }\n\n      const knex = await this.db.get()\n      await knex.batchInsert('logs', batch, LOGS_CHUNK_SIZE).then()\n    } catch (err) {\n      // We put the logs back on the queue in position 1\n      // so that the next call will insert them in the right order\n      // This works since `batchInsert` wraps the op in a transaction\n      this.batches.unshift(batch)\n    }\n  }\n\n  flush = async () => {\n    if (this.flushPromise) {\n      return // Previous flush is not done running\n    }\n\n    this.flushPromise = this.doFlush()\n\n    await this.flushPromise\n    this.flushPromise = null\n  }\n\n  log(level, message, meta, callback) {\n    if (!isEmpty(meta)) {\n      message += ` (meta=${JSON.stringify(meta)})`\n    }\n\n    this.db\n      .get()\n      .then(knex => {\n        const row = {\n          level,\n          message,\n          created_on: helpers(knex).date.format(new Date())\n        }\n\n        if (this.batches.length) {\n          this.batches[this.batches.length - 1].push(row)\n        } else {\n          this.batches.push([row])\n        }\n        this.emit('logged')\n        callback(null, true)\n      })\n      .catch(err => {\n        callback(err, null)\n      })\n  }\n\n  static async _query(db, limit = null, order = 'desc') {\n    const knex = await db.get()\n    let q = knex('logs')\n      .select('created_on as timestamp', 'level', 'message')\n      .orderBy('created_on', order)\n    if (limit) {\n      q = q.limit(limit)\n    }\n    return q.then()\n  }\n}\n","/**\n * @typedef {Function} Logger~MessageLogger\n * @param {String} message Message to log\n * @param {...Object} objects Additional objects to log\n */\n\n/**\n * @class Logger\n * @prop {Logger~MessageLogger} debug Logs message for debugging purposes\n * (hidden in production by default, see {@link Botfile} to change this)\n * @prop {Logger~MessageLogger} info Logs informative messages (shown in production)\n * @prop {Logger~MessageLogger} warn Logs warning messages (shown in production)\n * @prop {Logger~MessageLogger} error Logs error messages (shown in production)\n */\n\nimport moment from 'moment'\nimport ms from 'ms'\nimport winston from 'winston'\nimport Promise from 'bluebird'\n\nimport { isDeveloping } from '../util'\nimport DbTransport from './db-transport'\n\nmodule.exports = logConfig => {\n  let _db = null\n\n  const logger = new winston.Logger({\n    level: isDeveloping ? 'debug' : 'info',\n    transports: [\n      new winston.transports.Console({\n        prettyPrint: true,\n        colorize: true,\n        timestamp: () => moment().format('HH:mm:ss')\n      })\n    ]\n  })\n\n  logger.enableDbStorageIfNeeded = ({ db, janitor }) => {\n    if (logConfig.enabled) {\n      _db = db\n      const ttl = ms(`${logConfig.keepDays || 30}days`)\n      logger.add(DbTransport, { ttl, db, janitor })\n    }\n  }\n\n  logger.queryDb = (limit, order) => {\n    if (!logConfig.enabled) {\n      return Promise.resolve([])\n    }\n    return DbTransport._query(_db, limit, order)\n  }\n\n  return logger\n}\n","/**\n * The middleware chain is in charge of pre-processing incoming and outgoing messages.\n * A middleware can for example translate a message on receiving and before sending.\n * Most middleware are registered by the modules. For example, the Analytics module\n * keeps track of the messages with the help of an incoming and an outgoing middleware.\n * @namespace Middleware\n */\n\nimport _ from 'lodash'\nimport mware from 'mware'\nimport path from 'path'\nimport fs from 'fs'\nimport Promise from 'bluebird'\n\nconst createMiddleware = (bp, middlewareName) => {\n  const _use = mware()\n  const _error = mware()\n\n  const use = middleware => {\n    if (typeof middleware !== 'function') {\n      throw new TypeError('Expected all middleware arguments to be functions')\n    }\n\n    if (middleware.length === 2) {\n      _use(middleware)\n    } else if (middleware.length === 3) {\n      _error(middleware)\n    }\n  }\n\n  const dispatch = event => {\n    if (!_.isPlainObject(event)) {\n      throw new TypeError('Expected all dispatch arguments to be plain event objects')\n    }\n\n    const conformity = {\n      type: value => typeof value === 'string',\n      platform: value => typeof value === 'string',\n      text: value => typeof value === 'string',\n      raw: () => true\n    }\n\n    if (!_.conformsTo(event, conformity)) {\n      throw new TypeError(\n        'Expected event to contain (type: string), ' + '(platform: string), (text: string), (raw: any)'\n      )\n    }\n\n    // Provide botpress to the event handlers\n    event.bp = bp\n\n    _use.run(event, err => {\n      if (err) {\n        _error.run(err, event, () => {\n          bp.logger.error(`[BOTPRESS] Unhandled error in middleware (${middlewareName}). Error: ${err.message}`)\n        })\n      }\n    })\n\n    return event._promise || Promise.resolve()\n  }\n\n  return { use, dispatch }\n}\n\nmodule.exports = (bp, dataLocation, projectLocation, logger) => {\n  const middlewaresFilePath = path.join(dataLocation, 'middlewares.json')\n\n  const noopChain = arg => {\n    let message =\n      'Middleware called before middlewares have been loaded. This is a no-op.' +\n      ' Have you forgotten to call `bp.loadMiddlewares()` in your bot?'\n\n    if (arg && typeof arg === 'object') {\n      message += '\\nCalled with: ' + JSON.stringify(arg, null, 2)\n    }\n\n    logger.warn(message)\n  }\n\n  const readCustomizations = () => {\n    if (!fs.existsSync(middlewaresFilePath)) {\n      fs.writeFileSync(middlewaresFilePath, '{}')\n    }\n    return JSON.parse(fs.readFileSync(middlewaresFilePath))\n  }\n\n  let incoming = noopChain,\n    outgoing = noopChain,\n    customizations = readCustomizations()\n  const middlewares = []\n\n  const writeCustomizations = () => {\n    fs.writeFileSync(middlewaresFilePath, JSON.stringify(customizations))\n  }\n\n  const setCustomizations = middlewares => {\n    _.each(middlewares, middleware => {\n      const { name, order, enabled } = middleware\n      customizations[name] = { order, enabled }\n    })\n    writeCustomizations()\n  }\n\n  const resetCustomizations = () => {\n    customizations = {}\n    writeCustomizations()\n  }\n\n  /**\n   * @typedef {Object} Event\n   * @prop {String} platform\n   * @prop {String} text\n   * @prop {object} raw\n   * @prop {String} type\n   * @memberOf! Middleware\n   */\n\n  /**\n   * @callback Handler\n   * @memberOf! Middleware\n   * @param {Object} event The incoming or outgoing event\n   * @param {Function} next Call this function to make the event flow to the next middleware (see example)\n   */\n\n  /**\n   * @typedef {Object} Middleware\n   * @memberOf! Middleware\n   * @property {String} name Unique name of the middleware\n   * @property {Middleware.Handler} handler The handler function\n   * @property {String} type Can be 'incoming' or 'outgoing'\n   * @property {Number} order A positive number from 0 (before everything else) to 1000 (last middleware)\n   * @property {Boolean} [enabled=true] Whether this middleware is enabled or not\n   */\n\n  /**\n   * Registers a new middleware into the chain\n   * @param  {Middleware.Middleware} middleware The middleware to register\n   * @memberOf! Middleware\n   */\n  const register = middleware => {\n    if (!middleware || !middleware.name) {\n      logger.error('A unique middleware name is mandatory')\n      return false\n    }\n\n    if (!middleware.handler) {\n      logger.error('A middleware handler is mandatory')\n      return false\n    }\n\n    if (!middleware.type || (middleware.type !== 'incoming' && middleware.type !== 'outgoing')) {\n      logger.error('A middleware type (incoming or outgoing) is required')\n      return false\n    }\n\n    middleware.order = middleware.order || 0\n    middleware.enabled = typeof middleware.enabled === 'undefined' ? true : !!middleware.enabled\n\n    if (_.some(middlewares, m => m.name === middleware.name)) {\n      logger.error('Another middleware with the same name has already been registered')\n      return false\n    }\n\n    middlewares.push(middleware)\n  }\n\n  const list = () => {\n    return _.orderBy(\n      middlewares.map(middleware => {\n        const customization = customizations[middleware.name]\n        if (customization) {\n          return Object.assign({}, middleware, customization)\n        }\n        return middleware\n      }),\n      'order'\n    )\n  }\n\n  const load = () => {\n    incoming = createMiddleware(bp, 'incoming')\n    outgoing = createMiddleware(bp, 'outgoing')\n\n    const { middleware: licenseMiddleware } = bp.licensing\n    incoming.use(licenseMiddleware)\n\n    _.each(list(), m => {\n      if (!m.enabled) {\n        return logger.debug('SKIPPING middleware:', m.name, ' [Reason=disabled]')\n      }\n\n      logger.debug('Loading middleware:', m.name)\n\n      if (m.type === 'incoming') {\n        incoming.use(m.handler)\n      } else {\n        outgoing.use(m.handler)\n      }\n    })\n  }\n\n  const sendToMiddleware = type => event => {\n    const mw = type === 'incoming' ? incoming : outgoing\n    return mw.dispatch ? mw.dispatch(event) : mw(event)\n  }\n\n  return {\n    load,\n    list,\n    register,\n    /**\n     * Sends an incoming event (from the user to the bot)\n     * @param  {Middleware.Event} event An event object\n     * @memberOf! Middleware\n     */\n    sendIncoming: event => bp.messages.in.enqueue(event),\n\n    /**\n     * Sends an outgoing event (from the bot to the user)\n     * @param  {Middleware.Event} event An event object\n     * @memberOf! Middleware\n     */\n    sendOutgoing: event => bp.messages.out.enqueue(event),\n    sendIncomingImmediately: sendToMiddleware('incoming'),\n    sendOutgoingImmediately: sendToMiddleware('outgoing'),\n    getCustomizations: () => customizations,\n    setCustomizations,\n    resetCustomizations\n  }\n}\n","module.exports = require(\"dotenv\");","module.exports = require(\"cluster\");","module.exports = require(\"source-map-support/register\");","/**\n * The global instance of Botpress, which is the main object\n * your bot will use to interact with Botpress.\n * @var {Botpress} bp\n * @example\n * // File: index.js\n * // All bots are passed an instance of `bp` upon start\n * // This is an example of an empty bot\n * module.exports = (bp) => { ... }\n */\n\n/**\n * @namespace Botpress\n * @property {DialogEngine}  dialogEngine APIs to create and manipulate conversation flows\n * @property {KVS}  kvs Convenient, high-level storage mechanism\n * @property {ContentManager}  contentManager APIs to manage the content programmatically\n * @property {ContentRenderer}  renderers Change the look and feel of the\n * Content Elements (messages) on the different channels\n * @property {Database}  db (Advanced) Access to the internal Botpress Database\n * @property {Users}  users Store and manipulate data about users\n * @property {DialogStateManager}  dialogEngine.stateManager APIs to manipulate conversation states\n * @property {Logger}  logger Logging utility\n * @property {Botfile}  botfile The current botfile of the running bot\n */\n\nimport 'source-map-support/register'\n\nimport chalk from 'chalk'\nimport path from 'path'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport cluster from 'cluster'\nimport dotenv from 'dotenv'\nimport ms from 'ms'\n\nimport createMiddlewares from './middlewares'\nimport createLogger from './logger'\nimport createSecurity from './security'\nimport createNotifications from './notifications'\nimport createHearMiddleware from './hear'\nimport createFallbackMiddleware from './fallback'\nimport createDatabase from './database'\nimport createGhostManager from './ghost-content'\nimport createMediaManager from './media-manager'\nimport createLicensing from './licensing'\nimport createAbout from './about'\nimport createModules from './modules'\nimport createCloud from './cloud'\nimport createRenderers from './renderers'\nimport createUsers from './users'\nimport createContentManager from './content/service'\nimport defaultGetItemProviders from './content/getItemProviders'\nimport createHelpers from './helpers'\nimport createJanitor from './janitor'\nimport stats from './stats'\n\nimport EventBus from './bus'\nimport ConfigurationManager from './config-manager'\nimport FlowProvider from './dialog/provider'\nimport StateManager from './dialog/state'\nimport DialogEngine from './dialog/engine'\nimport DialogProcessors from './dialog/processors'\nimport DialogJanitor from './dialog/janitor'\nimport SkillsManager from './skills'\nimport Queue from './queues/memory'\n\nimport packageJson from '../package.json'\n\nimport createServer from './server'\n\nimport { getDataLocation, getBotpressVersion } from './util'\n\nimport { isDeveloping, print } from './util'\n\nconst RESTART_EXIT_CODE = 107\n\nconst mkdirIfNeeded = (path, logger) => {\n  if (!fs.existsSync(path)) {\n    logger.info(`Creating data directory: ${path}`)\n\n    try {\n      fs.mkdirSync(path)\n    } catch (err) {\n      logger.error(`[FATAL] Error creating directory: ${err.message}`)\n      process.exit(1)\n    }\n  }\n}\n\nconst REQUIRED_PROPS = ['botUrl']\n\nconst validateBotfile = botfile => {\n  if ('disableFileLogs' in botfile || _.get(botfile, 'log.file')) {\n    console.log(\n      `\n      You're using the old logs configuration format.\n      Since v11 botpress has stopped storing logs in files and\n      has moved them to the database.\n\n      Please update your botfile.\n\n      Old configuration format:\n        /*\n          By default logs are enabled and available in dataDir\n        */\n        disableFileLogs: false,\n        log: {\n          file: 'bot.log',\n          maxSize: 1e6 // 1mb\n        }\n\n      New format:\n        /*\n          By default logs are enabled and stored in the DB for 30 days\n        */\n        logs: {\n          enabled: true,\n          keepDays: 30\n        }\n      `\n    )\n    throw new Error('Outdated botfile format')\n  }\n\n  for (const prop of REQUIRED_PROPS) {\n    if (!(prop in botfile)) {\n      throw new Error(`Missing required botpress setting: ${prop}`)\n    }\n  }\n}\n\nclass botpress {\n  constructor({ botfile, options = {} }) {\n    this.version = getBotpressVersion()\n    /**\n     * The project location, which is the folder where botfile.js located\n     */\n    this.projectLocation = path.dirname(botfile)\n\n    /**\n     * Setup env with dotenv *before* requiring the botfile config\n     */\n    this._setupEnv()\n\n    /**\n     * The botfile config object\n     */\n    // eslint-disable-next-line no-eval\n    this.botfile = eval('require')(botfile)\n    validateBotfile(this.botfile)\n\n    this.stats = stats(this.botfile)\n\n    this.interval = null\n\n    /*\n      Check --inspect flag\n    */\n\n    const opts = _.result(options, 'opts') || {}\n\n    this.hasInspectMode = opts.inspect || opts.i\n  }\n\n  /**\n   * Start the bot instance\n   *\n   * It will do the following initiation steps:\n   *\n   * 1. setup logger\n   * 2. resolve paths (dataLocation)\n   * 3. inject security functions\n   * 4. load modules\n   * @private\n   */\n  async _start() {\n    this.stats.track('bot', 'started')\n\n    if (!this.interval) {\n      this.interval = setInterval(() => {\n        this.stats.track('bot', 'running')\n      }, 30 * 1000)\n    }\n\n    this.botpressPath = path.join(__dirname, '../')\n\n    const { projectLocation, botfile } = this\n\n    const isFirstRun = fs.existsSync(path.join(projectLocation, '.welcome'))\n    const dataLocation = getDataLocation(botfile.dataDir, projectLocation)\n    const configLocation = getDataLocation(botfile.modulesConfigDir, projectLocation)\n    const dbLocation = path.join(dataLocation, 'db.sqlite')\n    const version = packageJson.version\n\n    const logger = createLogger(botfile.logs)\n    mkdirIfNeeded(dataLocation, logger)\n    mkdirIfNeeded(configLocation, logger)\n\n    const db = createDatabase({\n      sqlite: { location: dbLocation },\n      postgres: botfile.postgres,\n      logger,\n      botpressPath: this.botpressPath\n    })\n\n    await db.get() // Running migrations\n\n    const janitor = createJanitor({ db, logger })\n\n    logger.enableDbStorageIfNeeded({ db, janitor })\n    logger.info(`Starting botpress version ${version}`)\n\n    janitor.start()\n\n    const kvs = db._kvs\n\n    const cloud = await createCloud({ projectLocation, botfile, logger })\n\n    if (!!botfile.login.useCloud && (await cloud.isPaired())) {\n      setInterval(() => cloud.updateRemoteEnv(), ms('10m'))\n      cloud.updateRemoteEnv() // async on purpose\n    }\n\n    const configManager = new ConfigurationManager({ configLocation, botfile, logger })\n\n    const security = await createSecurity({\n      dataLocation,\n      securityConfig: botfile.login,\n      projectLocation,\n      db,\n      cloud,\n      logger\n    })\n\n    const modules = createModules(logger, projectLocation, dataLocation, configManager)\n\n    const moduleDefinitions = modules._scan()\n\n    const events = new EventBus()\n\n    const notifications = createNotifications({\n      knex: await db.get(),\n      modules: moduleDefinitions,\n      logger,\n      events\n    })\n    const about = createAbout(projectLocation)\n    const licensing = createLicensing({\n      logger,\n      projectLocation,\n      version,\n      db,\n      botfile,\n      bp: this\n    })\n    const middlewares = createMiddlewares(this, dataLocation, projectLocation, logger)\n    const { hear, middleware: hearMiddleware } = createHearMiddleware()\n    const { middleware: fallbackMiddleware } = createFallbackMiddleware(this)\n\n    const users = createUsers({ db })\n    const ghostManager = createGhostManager({\n      projectLocation,\n      logger,\n      db,\n      enabled: !!_.get(botfile, 'ghostContent.enabled')\n    })\n    const contentManager = await createContentManager({\n      logger,\n      projectLocation,\n      botfile,\n      ghostManager\n    })\n    const mediaManager = await createMediaManager({\n      botfile,\n      logger,\n      ghostManager,\n      projectLocation\n    })\n\n    // Register the built-in item providers such as \"-random()\"\n    Object.keys(defaultGetItemProviders).forEach(provider => {\n      contentManager.registerGetItemProvider(provider, defaultGetItemProviders[provider])\n    })\n\n    const renderers = createRenderers({\n      logger,\n      middlewares,\n      db,\n      contentManager,\n      botfile\n    })\n\n    const stateManager = StateManager({ db })\n    const flowProvider = new FlowProvider({ logger, projectLocation, botfile, ghostManager })\n    const dialogJanitor = new DialogJanitor({ db, middlewares, botfile })\n    const dialogEngine = new DialogEngine({ flowProvider, stateManager, logger })\n\n    const skillsManager = new SkillsManager({ logger })\n\n    dialogEngine.onError(({ message }) =>\n      notifications.create({ message: `DialogEngine: ${message}`, level: 'error', redirectUrl: '/logs' })\n    )\n\n    // Registers the default output processor, which sends messages to the user\n    dialogEngine.registerOutputProcessor(DialogProcessors['default'])\n    dialogJanitor.install()\n\n    const incomingQueue = new Queue('Incoming', logger, {\n      redis: botfile.redis\n    })\n    incomingQueue.subscribe(job => middlewares.sendIncomingImmediately(job.event))\n\n    const outgoingQueue = new Queue('Outgoing', logger, {\n      redis: botfile.redis\n    })\n    outgoingQueue.subscribe(job => middlewares.sendOutgoingImmediately(job.event))\n\n    const messages = {\n      in: {\n        enqueue: event => incomingQueue.enqueue({ event }),\n        cancelAll: event => incomingQueue.cancelAll({ event }),\n        peek: event => incomingQueue.peek({ event })\n      },\n      out: {\n        enqueue: event => outgoingQueue.enqueue({ event }),\n        cancelAll: event => outgoingQueue.cancelAll({ event }),\n        peek: event => outgoingQueue.peek({ event })\n      }\n    }\n\n    middlewares.register(renderers.incomingMiddleware)\n    middlewares.register(hearMiddleware)\n    middlewares.register(fallbackMiddleware)\n\n    _.assign(this, {\n      dataLocation,\n      isFirstRun,\n      version,\n      logger,\n      security, // login, authenticate, getSecret\n      events,\n      notifications, // load, save, send\n      about,\n      middlewares,\n      hear,\n      licensing,\n      modules,\n      db,\n      janitor,\n      kvs,\n      configManager,\n      cloud,\n      renderers,\n      users,\n      ghostManager,\n      contentManager,\n      mediaManager,\n      dialogEngine,\n      dialogJanitor,\n      messages,\n      skills: skillsManager\n    })\n\n    Object.defineProperty(this, 'umm', {\n      get() {\n        logger.warn('DEPRECATION NOTICE – bp.umm is deprecated and will be removed – Please see bp.renderers instead.')\n        return renderers\n      }\n    })\n\n    const loadedModules = await modules._load(moduleDefinitions, this)\n\n    this.stats.track('bot', 'modules', 'loaded', loadedModules.length)\n\n    _.assign(this, {\n      _loadedModules: loadedModules\n    })\n\n    skillsManager.registerSkillsFromModules(_.values(loadedModules))\n    await contentManager.init()\n\n    notifications._bindEvents()\n\n    const server = createServer(this)\n    server.start().then(srv => {\n      this.stopServer = srv && srv.stop\n\n      if (this.hasInspectMode) {\n        const serverPID = process.pid\n        const inspectSignal = 'SIGUSR1'\n\n        if (process.platform === 'win32') {\n          process._debugProcess(serverPID)\n        } else {\n          process.kill(serverPID, inspectSignal)\n        }\n      }\n\n      events.emit('ready')\n      for (const mod of _.values(loadedModules)) {\n        mod.handlers.ready && mod.handlers.ready(this, mod.configuration, createHelpers)\n      }\n\n      const { botUrl } = botfile\n      logger.info(chalk.green.bold(`Bot launched. Visit: ${botUrl}`))\n    })\n\n    const middlewareAutoLoading = _.get(botfile, 'middleware.autoLoading')\n    if (!_.isNil(middlewareAutoLoading) && middlewareAutoLoading === false) {\n      logger.debug('Middleware Auto Loading was disabled. Call bp.middlewares.load() manually.')\n    } else {\n      middlewares.load()\n    }\n\n    // eslint-disable-next-line no-eval\n    const projectEntry = eval('require')(projectLocation)\n    if (typeof projectEntry === 'function') {\n      projectEntry.call(projectEntry, this)\n    } else {\n      logger.error('[FATAL] The bot entry point must be a function that takes an instance of bp')\n      process.exit(1)\n    }\n\n    process.on('uncaughtException', err => {\n      logger.error('[FATAL] An unhandled exception occurred in your bot', err)\n      if (isDeveloping) {\n        logger.error(err.stack)\n      }\n\n      this.stats.trackException(err.message)\n      process.exit(1)\n    })\n\n    process.on('unhandledRejection', (reason, p) => {\n      logger.error('Unhandled Rejection in Promise: ', p, 'Reason:', reason)\n\n      this.stats.trackException(reason)\n      if (isDeveloping && reason && reason.stack) {\n        logger.error(reason.stack)\n      }\n    })\n  }\n\n  start = () => {\n    if (cluster.isMaster) {\n      let firstWorkerHasStartedAlready = false\n\n      const quit = (code = 0) => {\n        if (this.stopServer) {\n          this.stopServer()\n        }\n\n        process.exit(code)\n      }\n\n      const receiveMessageFromWorker = message => {\n        if (message && message.workerStatus === 'starting') {\n          if (!firstWorkerHasStartedAlready) {\n            firstWorkerHasStartedAlready = true\n          } else {\n            print('info', '*** restarted worker process ***')\n            this.stats.track('bot', 'restarted')\n          }\n        } else if (message.type === 'exit') {\n          quit()\n        }\n      }\n\n      cluster.on('exit', (worker, code /* , signal */) => {\n        if (code === RESTART_EXIT_CODE) {\n          cluster.fork().on('message', receiveMessageFromWorker)\n        } else {\n          quit(code)\n        }\n      })\n\n      cluster.fork().on('message', receiveMessageFromWorker)\n    }\n\n    if (cluster.isWorker) {\n      process.send({ workerStatus: 'starting' })\n      this._start().catch(err => {\n        print('error', 'Error starting botpress: ', err.message, err.stack)\n      })\n    }\n  }\n\n  restart(interval = 0) {\n    setTimeout(() => {\n      process.exit(RESTART_EXIT_CODE)\n    }, interval)\n  }\n\n  _setupEnv() {\n    const envPath = path.resolve(this.projectLocation, '.env')\n    if (fs.existsSync(envPath)) {\n      const envConfig = dotenv.parse(fs.readFileSync(envPath))\n      for (const k in envConfig) {\n        if (_.isNil(process.env[k]) || process.env.ENV_OVERLOAD) {\n          process.env[k] = envConfig[k]\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = botpress\n","import path from 'path'\nimport fs from 'fs'\nimport axios from 'axios'\nimport { print } from '../util'\nimport _ from 'lodash'\n\nconst hostnameRegex = /^(http|https):\\/\\/(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]).)*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])(:\\d+)?$/gi\n\nmodule.exports = async (token, options) => {\n  const opts = options.opts()\n  const projectPath = path.resolve('.')\n  const endpoint = opts.endpoint\n\n  if (!token || !token.length) {\n    return print.error('Please provide a valid token. e.g. \"botpress cloud-pair your-secret-token\"')\n  }\n\n  if (!hostnameRegex.test(endpoint)) {\n    return print.error(\n      `Invalid endpoint: \"${endpoint}\". Endpoint must start with 'http' or 'https' and must not contain a trailing slash.`\n    )\n  }\n\n  const filePath = path.resolve(projectPath, 'bp-cloud.json')\n\n  if (fs.existsSync(filePath)) {\n    return print.error(\n      `This bot is already paired with Botpress Cloud. If you believe this is an error, delete this file and try again: \"${filePath}\"`\n    )\n  }\n\n  const packagePath = path.resolve(projectPath, 'package.json')\n\n  if (!fs.existsSync(packagePath)) {\n    return print.error(`This does not look like a valid project root. Please run this command at the root of your bot.`)\n  }\n\n  const { name, description } = eval('require')(packagePath) // eslint-disable-line\n\n  const pairUrl = `${endpoint}/api/pairing`\n\n  try {\n    const { data } = await axios.post(pairUrl, { token, name, description })\n\n    const { botId, teamId } = data.payload\n\n    const content = {\n      botId,\n      teamId,\n      token,\n      endpoint\n    }\n\n    fs.writeFileSync(filePath, JSON.stringify(content, null, 2), 'utf8')\n  } catch (err) {\n    const message = _.get(err, 'response.data.message') || err.message || 'Unknown error'\n    return print.error(`Failed to pair the bot: \"${message}\"`)\n  }\n\n  print.success('Bot paired successfully')\n}\n","/*\n  Transparent Ghost Content Manager hs the same API but\n  proxies all calls directly to the FS.\n  It's used while in development.\n*/\n\nimport path from 'path'\nimport fs from 'fs'\nimport mkdirp from 'mkdirp'\nimport Promise from 'bluebird'\nimport glob from 'glob'\n\nimport { normalizeFolder as _normalizeFolder } from './util'\n\nPromise.promisifyAll(fs)\nconst mkdirpAsync = Promise.promisify(mkdirp)\n\nmodule.exports = ({ logger, projectLocation }) => {\n  const normalizeFolder = _normalizeFolder(projectLocation)\n\n  const folderOptions = {}\n\n  logger.info('[Ghost Content Manager] (transparent) Initialized')\n\n  return {\n    addRootFolder: (rootFolder, options = {}) => {\n      const { normalizedFolderName } = normalizeFolder(rootFolder)\n      logger.debug(`[Ghost Content Manager] (transparent) Added root folder ${normalizedFolderName}, doing nothing.`)\n      folderOptions[normalizedFolderName] = options\n    },\n\n    upsertFile: (folder, file, content) => {\n      const { folderPath } = normalizeFolder(folder)\n      const filePath = path.join(folderPath, file)\n      const fullFileFolder = path.dirname(filePath)\n      return mkdirpAsync(fullFileFolder)\n        .then(() => fs.writeFileAsync(filePath, content))\n        .catch(e => {\n          logger.error('[Ghost Content Manager] (transparent) upsertFile error', e)\n          throw e\n        })\n    },\n\n    readFile: (folder, file) => {\n      const { folderPath, normalizedFolderName } = normalizeFolder(folder)\n      const filePath = path.join(folderPath, file)\n      const isBinary = (folderOptions[normalizedFolderName] || {}).isBinary || false\n      return fs\n        .readFileAsync(filePath, isBinary ? null : 'utf8')\n        .catch({ code: 'ENOENT' }, () => null)\n        .catch(e => {\n          logger.error('[Ghost Content Manager] (transparent) readFile error', e)\n          throw e\n        })\n    },\n\n    deleteFile: (folder, file) => {\n      const { folderPath } = normalizeFolder(folder)\n      const filePath = path.join(folderPath, file)\n      return fs.unlinkAsync(filePath).catch(e => {\n        logger.error('[Ghost Content Manager] (transparent) deleteFile error', e)\n        throw e\n      })\n    },\n\n    directoryListing: (rootFolder, fileEndingPattern = '', pathsToOmit = []) => {\n      const { folderPath } = normalizeFolder(rootFolder)\n      return fs\n        .accessAsync(folderPath)\n        .then(\n          () =>\n            Promise.fromCallback(cb => glob(`**/*${fileEndingPattern}`, { cwd: folderPath }, cb)).then(paths =>\n              paths.filter(path => !pathsToOmit.includes(path))\n            ),\n          () => []\n        )\n        .catch(e => {\n          logger.error('[Ghost Content Manager] (transparent) directoryListing error', e)\n          throw e\n        })\n    },\n\n    getPending: () => ({}),\n\n    getPendingWithContent: () => ({})\n  }\n}\n","module.exports = require(\"lodash/uniq\");","module.exports = require(\"lodash/partition\");","module.exports = require(\"prepend-file\");","module.exports = require(\"username\");","import fs from 'fs'\nimport path from 'path'\nimport os from 'os'\nimport Promise from 'bluebird'\nimport axios from 'axios'\nimport Confirm from 'prompt-confirm'\nimport username from 'username'\nimport prependFile from 'prepend-file'\nimport mapValues from 'lodash/mapValues'\n\nimport { print } from '../util'\nimport { REVISIONS_FILE_NAME } from '../ghost-content'\n\nimport { login } from './auth'\n\nPromise.promisifyAll(fs)\n\nconst writeRevisions = async (revisionsFile, revisions) => {\n  const user = await username()\n  const host = os.hostname()\n  let fullUser = [user, host].filter(Boolean).join('@')\n  if (fullUser) {\n    fullUser = ' by ' + fullUser\n  }\n  const preamble = `# Synced ${new Date().toISOString()}${fullUser}`\n\n  return Promise.fromCallback(cb => {\n    prependFile(revisionsFile, [preamble, ...revisions, ''].join('\\n'), cb)\n  })\n}\n\nconst writeFile = folderPath => async ({ file, content, deleted }) => {\n  const filePath = path.join(folderPath, file)\n  return deleted ? fs.unlinkAsync(filePath) : fs.writeFileAsync(filePath, content)\n}\n\nconst updateFolder = projectLocation => async ({ files, revisions, binary }, folder) => {\n  const folderPath = path.join(projectLocation, folder)\n  const revisionsFile = path.join(folderPath, REVISIONS_FILE_NAME)\n  await writeRevisions(revisionsFile, revisions)\n\n  if (binary) {\n    files.forEach(data => {\n      data.content = Buffer.from(data.content, 'base64')\n    })\n  }\n\n  return Promise.each(files, writeFile(folderPath))\n}\n\nmodule.exports = async botUrl => {\n  botUrl = botUrl.replace(/\\/+$/, '')\n\n  // This also implicitly ensures we're inside of the bot project directory, and validates the bot URL\n  print.info(`Checking your login status with ${botUrl}...`)\n  const token = await login(botUrl)\n  if (!token) {\n    print.warn('Login is required for this operation, exiting now.')\n    return\n  }\n\n  let config\n  try {\n    const { data } = await axios.get(`${botUrl}/api/ghost_content/export`, {\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    })\n    config = data\n  } catch (err) {\n    print.error(err.message || 'Unknown error', 'while fetching ghost content.')\n    return\n  }\n\n  if (!config || !Object.keys(config).length) {\n    print.info('No pending ghost revisions, nothing to be done here.')\n    return\n  }\n\n  const confirm = await new Confirm(`\n  Running this command will override any untracked / uncommitted changes to the corresponding content files.\n  It is recommended that you use version control system (like git) and commit any changes before proceeding.\n  Are you sure you want to continue?\n  `).run()\n\n  if (!confirm) {\n    return\n  }\n\n  try {\n    await Promise.props(mapValues(config, updateFolder(path.resolve('.'))))\n    print.success(`\n    All content synced successfully. You now need to redeploy your bot with the updated content to finish the sync procedure.\n    If you're using version control system (like git) you should review the changes before committing.\n    Please don't forget to include (commit, deploy) ${REVISIONS_FILE_NAME} file(s).\n    `)\n  } catch (err) {\n    print.error(err.message || 'Unknown error', 'while applying ghost content.')\n    print.error('Your content files may be in inconsistent state.')\n    print.error('It is recommended to reset the changes (like git reset) and try again.')\n  }\n}\n","module.exports = require(\"valid-url\");","import { print } from '../util'\n\nimport createModules from '../modules'\n\nmodule.exports = () => {\n  const modulesManager = createModules(null, './', null)\n  const modules = modulesManager.listInstalled()\n\n  if (!modules || modules.length === 0) {\n    print('info', 'There are no module installed.')\n    print('------------------')\n    print('info', 'To install modules, use `npm install --save <module-name>`')\n    print(\n      'info',\n      'You can discover modules in the Modules section of your bot UI' +\n        '. You can also search npm with the botpress keyword.'\n    )\n  } else {\n    print('info', 'There are ' + modules.length + ' modules installed:')\n    modules.forEach(mod => print('>> ' + mod))\n  }\n}\n","import util from '../util'\nimport stats from '../stats'\nimport fs from 'fs'\nimport path from 'path'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\n\nmodule.exports = fromVersion => {\n  stats({}).track('cli', 'migration', fromVersion)\n\n  if (!fs.existsSync('./botfile.js')) {\n    throw new Error('You must be inside a bot directory to run a migration')\n  }\n\n  const files = _.sortBy(require.context('./migrations/').keys(), x => x)\n\n  const toApply = _.filter(files, f => {\n    if (!/.js$/i.test(f)) {\n      return false\n    }\n\n    return parseFloat(fromVersion) < parseFloat(f.replace(/\\.js/i, ''))\n  })\n\n  return Promise.mapSeries(toApply, file => {\n    const migration = require('./migrations/' + file)\n    return migration(path.resolve('.')).then(() => {\n      util.print('success', `Migration ${file.replace('.js', '')} applied successfully`)\n    })\n  }).finally(() => {\n    util.print('success', 'Migration completed.')\n    process.exit(0)\n  })\n}\n","import Confirm from 'prompt-confirm'\nimport chalk from 'chalk'\nimport path from 'path'\nimport fs from 'fs'\nimport { execSync } from 'child_process'\n\nimport { print } from '../util'\nimport createModules from '../modules'\n\nmodule.exports = async version => {\n  version = version || 'latest'\n\n  const modulesManager = createModules(null, './', null)\n  const packages = ['botpress', ...modulesManager.listInstalled()]\n\n  let cmdRest = ''\n\n  for (const pkg of packages) {\n    const confirm = await new Confirm(chalk`\nDo you want to update {yellow \"${pkg}\"} to version {underline ${version}}?`).run()\n    if (confirm) {\n      cmdRest += `${pkg}@${version} `\n    }\n  }\n\n  if (cmdRest.length) {\n    console.log(chalk`===> {underline Installing dependencies, please wait...}`)\n\n    if (fs.existsSync(path.resolve('./yarn.lock'))) {\n      execSync(`yarn add ${cmdRest}`)\n    } else {\n      execSync(`npm install --save ${cmdRest}`)\n    }\n\n    console.log(chalk`{green.bold Done!}`)\n  }\n}\n","import { spawn } from 'child_process'\nimport prompt from 'prompt'\nimport chalk from 'chalk'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport glob from 'glob'\nimport Promise from 'bluebird'\n\nimport stats from '../stats'\n\nconst introductionText = chalk`\n{dim ---------------}\nThis tool will bootstrap a new {bold Botpress} module for you.\nFor more information or help, please visit {underline https://botpress.io/docs}\n{dim ---------------}`\n\nconst nextStepText = chalk`\n{green 🎉  Your module was successfully bootstraped!}\n\n{yellow Next steps:}\n  {yellow 1)} Install the dependencies by running {bold npm install} (or {bold yarn install})\n  {yellow 2)} Compile the module using {bold npm run compile} (or {bold yarn run compile})\n  {yellow 3)} Link the module to ease development and testing using {bold npm link}\n  {yellow 4)} Install the module in your testing bot using {bold npm install --save path/to/the/module}\n  {yellow 5)} Link the module using {bold npm link MODULE-NAME}\n\n{bold Enjoy Botpress!}\n`\n\nconst invalidDirectoryError = chalk`\n{red Fatal Error} You need to run this command in an empty directory.\n`\n\nconst templateNotFoundError = template => chalk`\n{red Fatal Error} Template {bold ${template}} not found.\n`\n\nconst copyingFile = name => chalk`{dim -> Copying ${name}}`\n\nconst assertDoesntExist = file => {\n  if (fs.existsSync(file)) {\n    console.log(invalidDirectoryError)\n    process.exit(1)\n  }\n}\n\n/**\n * Loads a template a returns a map of files and content\n * @param  {string} name The name of the template to load\n * @return {object} A map of files `{ path: content }``\n * @private\n */\nconst loadTemplate = async name => {\n  const templatePath = path.join(__dirname, 'cli/templates/' + name)\n\n  if (!fs.existsSync) {\n    console.log(templateNotFoundError(name))\n    process.exit(1)\n  }\n\n  const files = await Promise.fromCallback(cb => glob('**/*.*', { cwd: templatePath, dot: true }, cb))\n\n  return _.reduce(\n    files,\n    (obj, file) => {\n      const filePath = path.join(templatePath, file)\n      obj[file] = fs.readFileSync(filePath).toString()\n      return obj\n    },\n    {}\n  )\n}\n\nconst generate = async result => {\n  const files = await loadTemplate('create-default')\n\n  for (const [name, content] of Object.entries(files)) {\n    console.log(copyingFile(name))\n    const compiled = _.template(content, { interpolate: /<%=([\\s\\S]+?)%>/g })\n    const directory = path.dirname(name)\n    if (directory.length) {\n      mkdirp.sync(directory)\n    }\n\n    fs.writeFileSync(name, compiled(result))\n  }\n\n  console.log(nextStepText)\n}\n\nmodule.exports = () => {\n  console.log(introductionText)\n\n  const moduleDirectory = path.resolve('.')\n  const dirname = path.basename(moduleDirectory)\n\n  stats({}).track('cli', 'modules', 'create')\n\n  _.each(['package.json', 'botfile.js', 'index.js'], assertDoesntExist)\n\n  const schema = {\n    properties: {\n      name: {\n        description: chalk.white('module name:'),\n        pattern: /^(\\@botpress\\/|botpress-)[a-z0-9][a-z0-9-_\\.]+$/,\n        message: `Name must be only lowercase letters, digits, dashes, underscores and dots.\nIt must also start with \"@botpress/\" or \"botpress-\"`,\n        required: true,\n        default: dirname\n      },\n      description: {\n        required: false,\n        description: chalk.white('description:')\n      },\n      author: {\n        required: false,\n        description: chalk.white('author:')\n      }\n    }\n  }\n\n  prompt.message = ''\n  prompt.delimiter = ''\n  prompt.start()\n\n  prompt.get(schema, (err, result) => {\n    generate(result)\n  })\n}\n","module.exports = require(\"monitorctrlc\");","module.exports = require(\"nodemon\");","module.exports = require(\"nanoid/generate\");","module.exports = require(\"module\");","import os from 'os'\nimport path from 'path'\nimport fs from 'fs'\nimport util from '../util'\nimport chalk from 'chalk'\nimport nodemon from 'nodemon'\nimport { monitorCtrlC } from 'monitorctrlc'\nimport { execSync } from 'child_process'\n\nconst getPath = path => {\n  if (os.platform() === 'win32') {\n    const shortPath = execSync(`@echo off && for %I in (\"${path}\") do echo %~sI`)\n    return shortPath.toString('utf8').replace(/(\\n|\\r)+$/, '')\n  } else {\n    return path\n  }\n}\n\n/**\n * Entry point of botpress\n *\n * It will do the following things:\n *\n * 1. Find botpress instance creator in `node_modules` folder in current project.\n * 2. Find the `botfile.js` which will be injected into the creator to create the instance.\n * 3. Start the botpress instance.\n */\nmodule.exports = (projectPath, options) => {\n  let Botpress = null\n\n  if (!projectPath || typeof projectPath !== 'string') {\n    projectPath = '.'\n  }\n\n  projectPath = path.resolve(projectPath)\n\n  try {\n    // eslint-disable-next-line no-eval\n    Botpress = eval('require')(path.join(projectPath, 'node_modules', 'botpress')).Botpress()\n  } catch (err) {\n    util.print('error', err.message)\n    util.print('error', err.stack)\n    util.print('error', '(fatal) Could not load the local version of botpress')\n    util.print('Hint: 1) have you used `botpress init` to create a new bot the proper way?')\n    util.print('Hint: 2) Do you have read and write permissions on the current directory?')\n    util.print('-------------')\n    util.print(\n      'If none of the above works, this might be a bug in botpress. ' +\n        'Please contact the Botpress Team on gitter and provide the printed error above.'\n    )\n    process.exit(1)\n  }\n\n  const botfile = path.join(projectPath, 'botfile.js')\n  if (!fs.existsSync(botfile)) {\n    util.print('error', `(fatal) No ${chalk.bold('botfile.js')} file found at: ` + botfile)\n    process.exit(1)\n  }\n\n  const getDefaultWatchIgnore = () => {\n    // eslint-disable-next-line no-eval\n    const bf = eval('require')(botfile)\n    const dataDir = util.getDataLocation(bf.dataDir, projectPath)\n    return [dataDir, 'node_modules']\n  }\n\n  const opts = options.opts()\n  if (opts.watch || opts.w) {\n    util.print('info', '*** watching files for changes ***')\n\n    const argvWithoutWatch = process.argv.filter(arg => !/^(--watch|-w)$/.test(arg))\n    argvWithoutWatch[0] = getPath(argvWithoutWatch[0])\n\n    const nodemonOptions = {\n      cwd: process.cwd(),\n      exec: argvWithoutWatch.join(' '),\n      ext: opts.watchExt,\n      watch: opts.watchDir && opts.watchDir.length ? opts.watchDir : undefined,\n      ignore: opts.watchIgnore && opts.watchIgnore.length ? opts.watchIgnore : getDefaultWatchIgnore(),\n      stdin: false,\n      restartable: false\n    }\n\n    const mon = nodemon(nodemonOptions)\n    mon.on('restart', (changedFile, two) =>\n      util.print('info', '*** restarting botpress because of file change: ', changedFile)\n    )\n\n    monitorCtrlC(() => {\n      mon.emit('quit')\n      setTimeout(() => process.exit(), 100)\n    })\n  } else {\n    const bot = new Botpress({ botfile, options })\n    bot.start()\n  }\n}\n","module.exports = require(\"node-machine-id\");","module.exports = require(\"universal-analytics\");","import prompt from 'prompt'\nimport chalk from 'chalk'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport glob from 'glob'\nimport Promise from 'bluebird'\n\nimport stats from '../stats'\n\nconst introductionText = chalk`\n{dim ---------------}\nHey there 👋, thanks for using {bold Botpress}!\nWe'll walk you through the creation of your new bot.\nFor more information or help, please visit {underline https://botpress.io/docs}\n{dim ---------------}`\n\nconst nextStepText = chalk`\n{green 🎉  Your bot was initialized succesfully!}\n\n{yellow Next steps:}\n  {yellow 1)} Install bot dependencies by running {bold npm install} (or {bold yarn install})\n  {yellow 2)} Start the bot by running {bold npm start} (or {bold yarn start})\n\n{bold Enjoy Botpress!}\n`\n\nconst invalidDirectoryError = chalk`\n{red Fatal Error} You need to run this command in an empty directory.\n`\n\nconst dirExistsError = dir => chalk`\n{red Fatal Error} Directory {bold ${dir}} already exists.\n`\n\nconst templateNotFoundError = template => chalk`\n{red Fatal Error} Template {bold ${template}} not found.\n`\n\nconst showTemplateInfo = info => chalk`\n{dim =============================}\nTemplate: {bold ${info.name}}\nAuthor: {dim ${info.author}}\nDescription: {dim ${info.description}}\nChannels: {yellow ${info.channels.join(', ')}}\n{dim =============================}\n`\n\nconst copyingFile = name => chalk`{dim -> Copying ${name}}`\n\nconst assertDoesntExist = file => {\n  if (fs.existsSync(file)) {\n    console.log(invalidDirectoryError)\n    process.exit(1)\n  }\n}\n\n// Show template description\n// Say more templates coming up\n// Ask questions\n// Copy files, replacing variables\n// Show \"success, now run `yarn install`\"\n\n/**\n * Loads a template a returns a map of files and content\n * @param  {string} name The name of the template to load\n * @return {object} A map of files `{ path: content }``\n * @private\n */\nconst loadTemplate = async name => {\n  const templatePath = path.join(__dirname, 'cli/templates/' + name)\n\n  if (!fs.existsSync) {\n    console.log(templateNotFoundError(name))\n    process.exit(1)\n  }\n\n  const files = await Promise.fromCallback(cb => glob('**/*.*', { cwd: templatePath, dot: true }, cb))\n\n  return _.reduce(\n    files,\n    (obj, file) => {\n      const filePath = path.join(templatePath, file)\n      obj[file] = fs.readFileSync(filePath).toString()\n      return obj\n    },\n    {}\n  )\n}\n\nconst generate = async result => {\n  const files = await loadTemplate('init-default')\n\n  const info = JSON.parse(files['info.json'])\n  delete files['info.json']\n\n  console.log(showTemplateInfo(info))\n\n  for (const [name, content] of Object.entries(files)) {\n    console.log(copyingFile(name))\n    const compiled = _.template(content, { interpolate: /<%=([\\s\\S]+?)%>/g })\n    const directory = path.dirname(name)\n    if (directory.length) {\n      mkdirp.sync(directory)\n    }\n\n    fs.writeFileSync(name, compiled(result))\n  }\n\n  console.log(nextStepText)\n}\n\nmodule.exports = async (dirName, { yes }) => {\n  console.log(introductionText)\n\n  // People can optionally provide the directory of the bot\n  // Like \"bp init my-bot\"\n  if (dirName) {\n    if (!fs.existsSync(dirName)) {\n      fs.mkdirSync(dirName)\n      process.chdir(dirName)\n    } else {\n      console.log(dirExistsError(dirName))\n      return process.exit(1)\n    }\n  }\n\n  // Loaded by Webpack at bundle time\n  const botpressVersion = require('../../package.json').version\n\n  stats({}).track('cli', 'bot', 'init')\n\n  _.each(['package.json', 'botfile.js', 'index.js'], assertDoesntExist)\n\n  // The name of the current directory\n  const defaultBotName = path.basename(path.resolve('./'))\n\n  const schema = {\n    properties: {\n      name: {\n        description: chalk.white('name:'),\n        pattern: /^[a-z0-9][a-z0-9-_\\.]+$/,\n        message: 'name must be only lowercase letters, ' + 'digits, dashes, underscores and dots.',\n        required: true,\n        default: defaultBotName\n      },\n      version: {\n        required: true,\n        description: chalk.white('botpress version:'),\n        default: botpressVersion\n      },\n      description: {\n        required: false,\n        description: chalk.white('description:')\n      },\n      author: {\n        required: false,\n        description: chalk.white('author:')\n      }\n    }\n  }\n\n  if (yes) {\n    generate({\n      name: defaultBotName,\n      version: botpressVersion,\n      description: '',\n      author: ''\n    })\n  } else {\n    prompt.message = ''\n    prompt.delimiter = ''\n    prompt.start()\n\n    prompt.get(schema, (err, result) => {\n      if (err) {\n        if (err.message !== 'canceled') {\n          console.error(err)\n        }\n\n        process.exit(1)\n      }\n\n      generate(result)\n    })\n  }\n}\n","module.exports = require(\"commander\");","import program from 'commander'\n\nimport init from './init'\nimport start from './start'\nimport create from './create'\nimport update from './update'\nimport migrate from './migrate'\nimport list from './list'\nimport { login, logout } from './auth'\nimport ghostSync from './ghost-sync'\nimport cloudPair from './cloudPair'\n\nimport { getBotpressVersion, collectArgs } from '../util'\n\nprogram\n  .command('init [dirName]')\n  .description('Create a new bot in new directory (or in current directory if not provided)')\n  .option('-y, --yes', 'Say yes to every prompt and use default values')\n  .action(init)\n\nconst defaultWatchExt = '.js,.jsx,.json,.yml'\nconst defaultBotpressCloudEndpoint = 'https://botpress.cloud'\n\nprogram\n  .command('start [path]')\n  .alias('s')\n  .description('Starts running a bot')\n  .option('-w, --watch', 'Watch bot for changes, and restart automatically')\n  .option(\n    '--watchExt <extensions>',\n    `When watching, which file extensions to watch. Default: \"${defaultWatchExt}\"`,\n    defaultWatchExt\n  )\n  .option(\n    '--watchDir <dir>',\n    `When watching, what to watch. Can be repeated. Default: Directory of botfile.js`,\n    collectArgs,\n    []\n  )\n  .option(\n    '--watchIgnore <file|dir>',\n    `When watching, what to ignore. Can be repeated. Default: dataDir, watchExt from botfile.js, and node_modules`,\n    collectArgs,\n    []\n  )\n  .option('-i, --inspect', 'Inspect bot with \"debugger\"')\n  .action(start)\n\nprogram\n  .command('list')\n  .alias('ls')\n  .description('List installed modules')\n  .action(list)\n\nprogram\n  .command('create')\n  .alias('c')\n  .description('Create a new module for development or distribution')\n  .action(create)\n\nprogram\n  .command('update [version]')\n  .alias('up')\n  .description('Updates your bot and all the modules to a specific version')\n  .action(update)\n\nprogram\n  .command('migrate <fromVersion>')\n  .description('Migrates the current bot from version X')\n  .action(migrate)\n\nprogram\n  .command('login <bot-server-url>')\n  .description(\n    'Login to the given bot instance. Provide the full base URL for the bot, like https://mybot.herokuapp.com.'\n  )\n  .action(login)\n\nprogram\n  .command('logout [bot-server-url]')\n  .description(\n    'Forget saved auth for the given bot instance, or all recorded auth tokens (if bot URL is not specified)'\n  )\n  .action(logout)\n\nprogram\n  .command('ghost-sync <bot-server-url>')\n  .description('Pull the ghost content from the remote bot instance and apply it locally.')\n  .action(ghostSync)\n\nprogram\n  .command('cloud-pair <api-token>')\n  .description('Pairs your local bot with the Botpress Cloud (supercharges your bot)')\n  .option(\n    '--endpoint <endpoint-url>',\n    `Change the Botpress Cloud server endpoint. Default: \"${defaultBotpressCloudEndpoint}\"`,\n    defaultBotpressCloudEndpoint\n  )\n  .action(cloudPair)\n\nprogram\n  .version(getBotpressVersion())\n  .description('Easily create, manage and extend chatbots.')\n  .parse(process.argv)\n\nif (!program.args.length) {\n  program.help()\n}\n","module.exports = require(\"babel-polyfill\");","if (!global._babelPolyfill) {\n  require('babel-polyfill')\n}\n\nconst DatabaseHelpers = require('./src/database/helpers.js')\n\nconst CLI = () => require('./src/cli')\nconst Botpress = () => require('./src/botpress.js')\n\nmodule.exports = { Botpress, DatabaseHelpers, CLI }\n"],"sourceRoot":""}